"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./activeSlot"));
__export(require("./appService"));
__export(require("./certificate"));
__export(require("./certificateBinding"));
__export(require("./certificateOrder"));
__export(require("./customHostnameBinding"));
__export(require("./environment"));
__export(require("./environmentV3"));
__export(require("./functionApp"));
__export(require("./functionAppSlot"));
__export(require("./getAppService"));
__export(require("./getAppServiceEnvironment"));
__export(require("./getAppServicePlan"));
__export(require("./getCertificate"));
__export(require("./getCertificateOrder"));
__export(require("./getEnvironmentV3"));
__export(require("./getFunctionApp"));
__export(require("./getFunctionAppHostKeys"));
__export(require("./hybridConnection"));
__export(require("./kind"));
__export(require("./managedCertificate"));
__export(require("./plan"));
__export(require("./slot"));
__export(require("./slotVirtualNetworkSwiftConnection"));
__export(require("./sourceCodeToken"));
__export(require("./staticSite"));
__export(require("./virtualNetworkSwiftConnection"));
__export(require("./zMixins"));
__export(require("./zMixins_durable"));
__export(require("./zMixins_http"));
__export(require("./zMixins_timer"));
// Import resources to register:
const activeSlot_1 = require("./activeSlot");
const appService_1 = require("./appService");
const certificate_1 = require("./certificate");
const certificateBinding_1 = require("./certificateBinding");
const certificateOrder_1 = require("./certificateOrder");
const customHostnameBinding_1 = require("./customHostnameBinding");
const environment_1 = require("./environment");
const environmentV3_1 = require("./environmentV3");
const functionApp_1 = require("./functionApp");
const functionAppSlot_1 = require("./functionAppSlot");
const hybridConnection_1 = require("./hybridConnection");
const managedCertificate_1 = require("./managedCertificate");
const plan_1 = require("./plan");
const slot_1 = require("./slot");
const slotVirtualNetworkSwiftConnection_1 = require("./slotVirtualNetworkSwiftConnection");
const sourceCodeToken_1 = require("./sourceCodeToken");
const staticSite_1 = require("./staticSite");
const virtualNetworkSwiftConnection_1 = require("./virtualNetworkSwiftConnection");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:appservice/activeSlot:ActiveSlot":
                return new activeSlot_1.ActiveSlot(name, undefined, { urn });
            case "azure:appservice/appService:AppService":
                return new appService_1.AppService(name, undefined, { urn });
            case "azure:appservice/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure:appservice/certificateBinding:CertificateBinding":
                return new certificateBinding_1.CertificateBinding(name, undefined, { urn });
            case "azure:appservice/certificateOrder:CertificateOrder":
                return new certificateOrder_1.CertificateOrder(name, undefined, { urn });
            case "azure:appservice/customHostnameBinding:CustomHostnameBinding":
                return new customHostnameBinding_1.CustomHostnameBinding(name, undefined, { urn });
            case "azure:appservice/environment:Environment":
                return new environment_1.Environment(name, undefined, { urn });
            case "azure:appservice/environmentV3:EnvironmentV3":
                return new environmentV3_1.EnvironmentV3(name, undefined, { urn });
            case "azure:appservice/functionApp:FunctionApp":
                return new functionApp_1.FunctionApp(name, undefined, { urn });
            case "azure:appservice/functionAppSlot:FunctionAppSlot":
                return new functionAppSlot_1.FunctionAppSlot(name, undefined, { urn });
            case "azure:appservice/hybridConnection:HybridConnection":
                return new hybridConnection_1.HybridConnection(name, undefined, { urn });
            case "azure:appservice/managedCertificate:ManagedCertificate":
                return new managedCertificate_1.ManagedCertificate(name, undefined, { urn });
            case "azure:appservice/plan:Plan":
                return new plan_1.Plan(name, undefined, { urn });
            case "azure:appservice/slot:Slot":
                return new slot_1.Slot(name, undefined, { urn });
            case "azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection":
                return new slotVirtualNetworkSwiftConnection_1.SlotVirtualNetworkSwiftConnection(name, undefined, { urn });
            case "azure:appservice/sourceCodeToken:SourceCodeToken":
                return new sourceCodeToken_1.SourceCodeToken(name, undefined, { urn });
            case "azure:appservice/staticSite:StaticSite":
                return new staticSite_1.StaticSite(name, undefined, { urn });
            case "azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection":
                return new virtualNetworkSwiftConnection_1.VirtualNetworkSwiftConnection(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appservice/activeSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/appService", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateOrder", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/customHostnameBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/environment", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/environmentV3", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/hybridConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/managedCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/plan", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slotVirtualNetworkSwiftConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceCodeToken", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticSite", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/virtualNetworkSwiftConnection", _module);
//# sourceMappingURL=index.js.map