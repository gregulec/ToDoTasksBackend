"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getLab"));
__export(require("./getVirtualNetwork"));
__export(require("./globalVMShutdownSchedule"));
__export(require("./lab"));
__export(require("./linuxVirtualMachine"));
__export(require("./policy"));
__export(require("./schedule"));
__export(require("./virtualNetwork"));
__export(require("./windowsVirtualMachine"));
// Import resources to register:
const globalVMShutdownSchedule_1 = require("./globalVMShutdownSchedule");
const lab_1 = require("./lab");
const linuxVirtualMachine_1 = require("./linuxVirtualMachine");
const policy_1 = require("./policy");
const schedule_1 = require("./schedule");
const virtualNetwork_1 = require("./virtualNetwork");
const windowsVirtualMachine_1 = require("./windowsVirtualMachine");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:devtest/globalVMShutdownSchedule:GlobalVMShutdownSchedule":
                return new globalVMShutdownSchedule_1.GlobalVMShutdownSchedule(name, undefined, { urn });
            case "azure:devtest/lab:Lab":
                return new lab_1.Lab(name, undefined, { urn });
            case "azure:devtest/linuxVirtualMachine:LinuxVirtualMachine":
                return new linuxVirtualMachine_1.LinuxVirtualMachine(name, undefined, { urn });
            case "azure:devtest/policy:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "azure:devtest/schedule:Schedule":
                return new schedule_1.Schedule(name, undefined, { urn });
            case "azure:devtest/virtualNetwork:VirtualNetwork":
                return new virtualNetwork_1.VirtualNetwork(name, undefined, { urn });
            case "azure:devtest/windowsVirtualMachine:WindowsVirtualMachine":
                return new windowsVirtualMachine_1.WindowsVirtualMachine(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "devtest/globalVMShutdownSchedule", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/lab", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/linuxVirtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/policy", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/schedule", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/virtualNetwork", _module);
pulumi.runtime.registerResourceModule("azure", "devtest/windowsVirtualMachine", _module);
//# sourceMappingURL=index.js.map