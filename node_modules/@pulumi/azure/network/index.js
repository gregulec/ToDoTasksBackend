"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./applicationGateway"));
__export(require("./applicationSecurityGroup"));
__export(require("./bgpConnection"));
__export(require("./ddosProtectionPlan"));
__export(require("./expressRouteCircuit"));
__export(require("./expressRouteCircuitAuthorization"));
__export(require("./expressRouteCircuitConnection"));
__export(require("./expressRouteCircuitPeering"));
__export(require("./expressRouteConnection"));
__export(require("./expressRouteGateway"));
__export(require("./expressRoutePort"));
__export(require("./firewall"));
__export(require("./firewallApplicationRuleCollection"));
__export(require("./firewallNatRuleCollection"));
__export(require("./firewallNetworkRuleCollection"));
__export(require("./firewallPolicy"));
__export(require("./firewallPolicyRuleCollectionGroup"));
__export(require("./getApplicationGateway"));
__export(require("./getApplicationSecurityGroup"));
__export(require("./getExpressRouteCircuit"));
__export(require("./getFirewall"));
__export(require("./getFirewallPolicy"));
__export(require("./getGatewayConnection"));
__export(require("./getIpGroup"));
__export(require("./getLocalNetworkGateway"));
__export(require("./getNatGateway"));
__export(require("./getNetworkDdosProtectionPlan"));
__export(require("./getNetworkInterface"));
__export(require("./getNetworkSecurityGroup"));
__export(require("./getNetworkWatcher"));
__export(require("./getPublicIP"));
__export(require("./getPublicIPs"));
__export(require("./getPublicIpPrefix"));
__export(require("./getRouteFilter"));
__export(require("./getRouteTable"));
__export(require("./getServiceTags"));
__export(require("./getSubnet"));
__export(require("./getTrafficManager"));
__export(require("./getTrafficManagerProfile"));
__export(require("./getVirtualHub"));
__export(require("./getVirtualNetwork"));
__export(require("./getVirtualNetworkGateway"));
__export(require("./getVirtualWan"));
__export(require("./getVpnGateway"));
__export(require("./ipgroup"));
__export(require("./localNetworkGateway"));
__export(require("./natGateway"));
__export(require("./natGatewayPublicIpAssociation"));
__export(require("./natGatewayPublicIpPrefixAssociation"));
__export(require("./networkConnectionMonitor"));
__export(require("./networkInterface"));
__export(require("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation"));
__export(require("./networkInterfaceApplicationSecurityGroupAssociation"));
__export(require("./networkInterfaceBackendAddressPoolAssociation"));
__export(require("./networkInterfaceNatRuleAssociation"));
__export(require("./networkInterfaceSecurityGroupAssociation"));
__export(require("./networkPacketCapture"));
__export(require("./networkSecurityGroup"));
__export(require("./networkSecurityRule"));
__export(require("./networkWatcher"));
__export(require("./networkWatcherFlowLog"));
__export(require("./packetCapture"));
__export(require("./pointToPointVpnGateway"));
__export(require("./profile"));
__export(require("./publicIp"));
__export(require("./publicIpPrefix"));
__export(require("./route"));
__export(require("./routeFilter"));
__export(require("./routeTable"));
__export(require("./securityPartnerProvider"));
__export(require("./subnet"));
__export(require("./subnetNatGatewayAssociation"));
__export(require("./subnetNetworkSecurityGroupAssociation"));
__export(require("./subnetRouteTableAssociation"));
__export(require("./subnetServiceEndpointStoragePolicy"));
__export(require("./trafficManagerEndpoint"));
__export(require("./trafficManagerProfile"));
__export(require("./virtualHub"));
__export(require("./virtualHubConnection"));
__export(require("./virtualHubIp"));
__export(require("./virtualHubRouteTable"));
__export(require("./virtualNetwork"));
__export(require("./virtualNetworkDnsServers"));
__export(require("./virtualNetworkGateway"));
__export(require("./virtualNetworkGatewayConnection"));
__export(require("./virtualNetworkPeering"));
__export(require("./virtualWan"));
__export(require("./vpnGateway"));
__export(require("./vpnGatewayConnection"));
__export(require("./vpnServerConfiguration"));
__export(require("./vpnSite"));
// Import resources to register:
const applicationGateway_1 = require("./applicationGateway");
const applicationSecurityGroup_1 = require("./applicationSecurityGroup");
const bgpConnection_1 = require("./bgpConnection");
const ddosProtectionPlan_1 = require("./ddosProtectionPlan");
const expressRouteCircuit_1 = require("./expressRouteCircuit");
const expressRouteCircuitAuthorization_1 = require("./expressRouteCircuitAuthorization");
const expressRouteCircuitConnection_1 = require("./expressRouteCircuitConnection");
const expressRouteCircuitPeering_1 = require("./expressRouteCircuitPeering");
const expressRouteConnection_1 = require("./expressRouteConnection");
const expressRouteGateway_1 = require("./expressRouteGateway");
const expressRoutePort_1 = require("./expressRoutePort");
const firewall_1 = require("./firewall");
const firewallApplicationRuleCollection_1 = require("./firewallApplicationRuleCollection");
const firewallNatRuleCollection_1 = require("./firewallNatRuleCollection");
const firewallNetworkRuleCollection_1 = require("./firewallNetworkRuleCollection");
const firewallPolicy_1 = require("./firewallPolicy");
const firewallPolicyRuleCollectionGroup_1 = require("./firewallPolicyRuleCollectionGroup");
const ipgroup_1 = require("./ipgroup");
const localNetworkGateway_1 = require("./localNetworkGateway");
const natGateway_1 = require("./natGateway");
const natGatewayPublicIpAssociation_1 = require("./natGatewayPublicIpAssociation");
const natGatewayPublicIpPrefixAssociation_1 = require("./natGatewayPublicIpPrefixAssociation");
const networkConnectionMonitor_1 = require("./networkConnectionMonitor");
const networkInterface_1 = require("./networkInterface");
const networkInterfaceApplicationGatewayBackendAddressPoolAssociation_1 = require("./networkInterfaceApplicationGatewayBackendAddressPoolAssociation");
const networkInterfaceApplicationSecurityGroupAssociation_1 = require("./networkInterfaceApplicationSecurityGroupAssociation");
const networkInterfaceBackendAddressPoolAssociation_1 = require("./networkInterfaceBackendAddressPoolAssociation");
const networkInterfaceNatRuleAssociation_1 = require("./networkInterfaceNatRuleAssociation");
const networkInterfaceSecurityGroupAssociation_1 = require("./networkInterfaceSecurityGroupAssociation");
const networkPacketCapture_1 = require("./networkPacketCapture");
const networkSecurityGroup_1 = require("./networkSecurityGroup");
const networkSecurityRule_1 = require("./networkSecurityRule");
const networkWatcher_1 = require("./networkWatcher");
const networkWatcherFlowLog_1 = require("./networkWatcherFlowLog");
const packetCapture_1 = require("./packetCapture");
const pointToPointVpnGateway_1 = require("./pointToPointVpnGateway");
const profile_1 = require("./profile");
const publicIp_1 = require("./publicIp");
const publicIpPrefix_1 = require("./publicIpPrefix");
const route_1 = require("./route");
const routeFilter_1 = require("./routeFilter");
const routeTable_1 = require("./routeTable");
const securityPartnerProvider_1 = require("./securityPartnerProvider");
const subnet_1 = require("./subnet");
const subnetNatGatewayAssociation_1 = require("./subnetNatGatewayAssociation");
const subnetNetworkSecurityGroupAssociation_1 = require("./subnetNetworkSecurityGroupAssociation");
const subnetRouteTableAssociation_1 = require("./subnetRouteTableAssociation");
const subnetServiceEndpointStoragePolicy_1 = require("./subnetServiceEndpointStoragePolicy");
const trafficManagerEndpoint_1 = require("./trafficManagerEndpoint");
const trafficManagerProfile_1 = require("./trafficManagerProfile");
const virtualHub_1 = require("./virtualHub");
const virtualHubConnection_1 = require("./virtualHubConnection");
const virtualHubIp_1 = require("./virtualHubIp");
const virtualHubRouteTable_1 = require("./virtualHubRouteTable");
const virtualNetwork_1 = require("./virtualNetwork");
const virtualNetworkDnsServers_1 = require("./virtualNetworkDnsServers");
const virtualNetworkGateway_1 = require("./virtualNetworkGateway");
const virtualNetworkGatewayConnection_1 = require("./virtualNetworkGatewayConnection");
const virtualNetworkPeering_1 = require("./virtualNetworkPeering");
const virtualWan_1 = require("./virtualWan");
const vpnGateway_1 = require("./vpnGateway");
const vpnGatewayConnection_1 = require("./vpnGatewayConnection");
const vpnServerConfiguration_1 = require("./vpnServerConfiguration");
const vpnSite_1 = require("./vpnSite");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:network/applicationGateway:ApplicationGateway":
                return new applicationGateway_1.ApplicationGateway(name, undefined, { urn });
            case "azure:network/applicationSecurityGroup:ApplicationSecurityGroup":
                return new applicationSecurityGroup_1.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure:network/bgpConnection:BgpConnection":
                return new bgpConnection_1.BgpConnection(name, undefined, { urn });
            case "azure:network/ddosProtectionPlan:DdosProtectionPlan":
                return new ddosProtectionPlan_1.DdosProtectionPlan(name, undefined, { urn });
            case "azure:network/expressRouteCircuit:ExpressRouteCircuit":
                return new expressRouteCircuit_1.ExpressRouteCircuit(name, undefined, { urn });
            case "azure:network/expressRouteCircuitAuthorization:ExpressRouteCircuitAuthorization":
                return new expressRouteCircuitAuthorization_1.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection":
                return new expressRouteCircuitConnection_1.ExpressRouteCircuitConnection(name, undefined, { urn });
            case "azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering":
                return new expressRouteCircuitPeering_1.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure:network/expressRouteConnection:ExpressRouteConnection":
                return new expressRouteConnection_1.ExpressRouteConnection(name, undefined, { urn });
            case "azure:network/expressRouteGateway:ExpressRouteGateway":
                return new expressRouteGateway_1.ExpressRouteGateway(name, undefined, { urn });
            case "azure:network/expressRoutePort:ExpressRoutePort":
                return new expressRoutePort_1.ExpressRoutePort(name, undefined, { urn });
            case "azure:network/firewall:Firewall":
                return new firewall_1.Firewall(name, undefined, { urn });
            case "azure:network/firewallApplicationRuleCollection:FirewallApplicationRuleCollection":
                return new firewallApplicationRuleCollection_1.FirewallApplicationRuleCollection(name, undefined, { urn });
            case "azure:network/firewallNatRuleCollection:FirewallNatRuleCollection":
                return new firewallNatRuleCollection_1.FirewallNatRuleCollection(name, undefined, { urn });
            case "azure:network/firewallNetworkRuleCollection:FirewallNetworkRuleCollection":
                return new firewallNetworkRuleCollection_1.FirewallNetworkRuleCollection(name, undefined, { urn });
            case "azure:network/firewallPolicy:FirewallPolicy":
                return new firewallPolicy_1.FirewallPolicy(name, undefined, { urn });
            case "azure:network/firewallPolicyRuleCollectionGroup:FirewallPolicyRuleCollectionGroup":
                return new firewallPolicyRuleCollectionGroup_1.FirewallPolicyRuleCollectionGroup(name, undefined, { urn });
            case "azure:network/iPGroup:IPGroup":
                return new ipgroup_1.IPGroup(name, undefined, { urn });
            case "azure:network/localNetworkGateway:LocalNetworkGateway":
                return new localNetworkGateway_1.LocalNetworkGateway(name, undefined, { urn });
            case "azure:network/natGateway:NatGateway":
                return new natGateway_1.NatGateway(name, undefined, { urn });
            case "azure:network/natGatewayPublicIpAssociation:NatGatewayPublicIpAssociation":
                return new natGatewayPublicIpAssociation_1.NatGatewayPublicIpAssociation(name, undefined, { urn });
            case "azure:network/natGatewayPublicIpPrefixAssociation:NatGatewayPublicIpPrefixAssociation":
                return new natGatewayPublicIpPrefixAssociation_1.NatGatewayPublicIpPrefixAssociation(name, undefined, { urn });
            case "azure:network/networkConnectionMonitor:NetworkConnectionMonitor":
                return new networkConnectionMonitor_1.NetworkConnectionMonitor(name, undefined, { urn });
            case "azure:network/networkInterface:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation":
                return new networkInterfaceApplicationGatewayBackendAddressPoolAssociation_1.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceApplicationSecurityGroupAssociation:NetworkInterfaceApplicationSecurityGroupAssociation":
                return new networkInterfaceApplicationSecurityGroupAssociation_1.NetworkInterfaceApplicationSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceBackendAddressPoolAssociation:NetworkInterfaceBackendAddressPoolAssociation":
                return new networkInterfaceBackendAddressPoolAssociation_1.NetworkInterfaceBackendAddressPoolAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceNatRuleAssociation:NetworkInterfaceNatRuleAssociation":
                return new networkInterfaceNatRuleAssociation_1.NetworkInterfaceNatRuleAssociation(name, undefined, { urn });
            case "azure:network/networkInterfaceSecurityGroupAssociation:NetworkInterfaceSecurityGroupAssociation":
                return new networkInterfaceSecurityGroupAssociation_1.NetworkInterfaceSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/networkPacketCapture:NetworkPacketCapture":
                return new networkPacketCapture_1.NetworkPacketCapture(name, undefined, { urn });
            case "azure:network/networkSecurityGroup:NetworkSecurityGroup":
                return new networkSecurityGroup_1.NetworkSecurityGroup(name, undefined, { urn });
            case "azure:network/networkSecurityRule:NetworkSecurityRule":
                return new networkSecurityRule_1.NetworkSecurityRule(name, undefined, { urn });
            case "azure:network/networkWatcher:NetworkWatcher":
                return new networkWatcher_1.NetworkWatcher(name, undefined, { urn });
            case "azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog":
                return new networkWatcherFlowLog_1.NetworkWatcherFlowLog(name, undefined, { urn });
            case "azure:network/packetCapture:PacketCapture":
                return new packetCapture_1.PacketCapture(name, undefined, { urn });
            case "azure:network/pointToPointVpnGateway:PointToPointVpnGateway":
                return new pointToPointVpnGateway_1.PointToPointVpnGateway(name, undefined, { urn });
            case "azure:network/profile:Profile":
                return new profile_1.Profile(name, undefined, { urn });
            case "azure:network/publicIp:PublicIp":
                return new publicIp_1.PublicIp(name, undefined, { urn });
            case "azure:network/publicIpPrefix:PublicIpPrefix":
                return new publicIpPrefix_1.PublicIpPrefix(name, undefined, { urn });
            case "azure:network/route:Route":
                return new route_1.Route(name, undefined, { urn });
            case "azure:network/routeFilter:RouteFilter":
                return new routeFilter_1.RouteFilter(name, undefined, { urn });
            case "azure:network/routeTable:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "azure:network/securityPartnerProvider:SecurityPartnerProvider":
                return new securityPartnerProvider_1.SecurityPartnerProvider(name, undefined, { urn });
            case "azure:network/subnet:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation":
                return new subnetNatGatewayAssociation_1.SubnetNatGatewayAssociation(name, undefined, { urn });
            case "azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation":
                return new subnetNetworkSecurityGroupAssociation_1.SubnetNetworkSecurityGroupAssociation(name, undefined, { urn });
            case "azure:network/subnetRouteTableAssociation:SubnetRouteTableAssociation":
                return new subnetRouteTableAssociation_1.SubnetRouteTableAssociation(name, undefined, { urn });
            case "azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy":
                return new subnetServiceEndpointStoragePolicy_1.SubnetServiceEndpointStoragePolicy(name, undefined, { urn });
            case "azure:network/trafficManagerEndpoint:TrafficManagerEndpoint":
                return new trafficManagerEndpoint_1.TrafficManagerEndpoint(name, undefined, { urn });
            case "azure:network/trafficManagerProfile:TrafficManagerProfile":
                return new trafficManagerProfile_1.TrafficManagerProfile(name, undefined, { urn });
            case "azure:network/virtualHub:VirtualHub":
                return new virtualHub_1.VirtualHub(name, undefined, { urn });
            case "azure:network/virtualHubConnection:VirtualHubConnection":
                return new virtualHubConnection_1.VirtualHubConnection(name, undefined, { urn });
            case "azure:network/virtualHubIp:VirtualHubIp":
                return new virtualHubIp_1.VirtualHubIp(name, undefined, { urn });
            case "azure:network/virtualHubRouteTable:VirtualHubRouteTable":
                return new virtualHubRouteTable_1.VirtualHubRouteTable(name, undefined, { urn });
            case "azure:network/virtualNetwork:VirtualNetwork":
                return new virtualNetwork_1.VirtualNetwork(name, undefined, { urn });
            case "azure:network/virtualNetworkDnsServers:VirtualNetworkDnsServers":
                return new virtualNetworkDnsServers_1.VirtualNetworkDnsServers(name, undefined, { urn });
            case "azure:network/virtualNetworkGateway:VirtualNetworkGateway":
                return new virtualNetworkGateway_1.VirtualNetworkGateway(name, undefined, { urn });
            case "azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection":
                return new virtualNetworkGatewayConnection_1.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure:network/virtualNetworkPeering:VirtualNetworkPeering":
                return new virtualNetworkPeering_1.VirtualNetworkPeering(name, undefined, { urn });
            case "azure:network/virtualWan:VirtualWan":
                return new virtualWan_1.VirtualWan(name, undefined, { urn });
            case "azure:network/vpnGateway:VpnGateway":
                return new vpnGateway_1.VpnGateway(name, undefined, { urn });
            case "azure:network/vpnGatewayConnection:VpnGatewayConnection":
                return new vpnGatewayConnection_1.VpnGatewayConnection(name, undefined, { urn });
            case "azure:network/vpnServerConfiguration:VpnServerConfiguration":
                return new vpnServerConfiguration_1.VpnServerConfiguration(name, undefined, { urn });
            case "azure:network/vpnSite:VpnSite":
                return new vpnSite_1.VpnSite(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "network/applicationGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/applicationSecurityGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/bgpConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/ddosProtectionPlan", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuit", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitAuthorization", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteCircuitPeering", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRouteGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/expressRoutePort", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewall", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallApplicationRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallNatRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallNetworkRuleCollection", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "network/firewallPolicyRuleCollectionGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/iPGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/localNetworkGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/natGatewayPublicIpPrefixAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkConnectionMonitor", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterface", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceApplicationSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceBackendAddressPoolAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceNatRuleAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkInterfaceSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkPacketCapture", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityGroup", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkSecurityRule", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkWatcher", _module);
pulumi.runtime.registerResourceModule("azure", "network/networkWatcherFlowLog", _module);
pulumi.runtime.registerResourceModule("azure", "network/packetCapture", _module);
pulumi.runtime.registerResourceModule("azure", "network/pointToPointVpnGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/profile", _module);
pulumi.runtime.registerResourceModule("azure", "network/publicIp", _module);
pulumi.runtime.registerResourceModule("azure", "network/publicIpPrefix", _module);
pulumi.runtime.registerResourceModule("azure", "network/route", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeFilter", _module);
pulumi.runtime.registerResourceModule("azure", "network/routeTable", _module);
pulumi.runtime.registerResourceModule("azure", "network/securityPartnerProvider", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnet", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetNatGatewayAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetNetworkSecurityGroupAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "network/subnetServiceEndpointStoragePolicy", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "network/trafficManagerProfile", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHub", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubIp", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualHubRouteTable", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetwork", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkDnsServers", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkGatewayConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualNetworkPeering", _module);
pulumi.runtime.registerResourceModule("azure", "network/virtualWan", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnGateway", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnGatewayConnection", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnServerConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "network/vpnSite", _module);
//# sourceMappingURL=index.js.map