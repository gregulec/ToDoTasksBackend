"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./api"));
__export(require("./apiDiagnostic"));
__export(require("./apiOperation"));
__export(require("./apiOperationPolicy"));
__export(require("./apiOperationTag"));
__export(require("./apiPolicy"));
__export(require("./apiRelease"));
__export(require("./apiSchema"));
__export(require("./apiVersionSet"));
__export(require("./authorizationServer"));
__export(require("./backend"));
__export(require("./certificate"));
__export(require("./customDomain"));
__export(require("./diagnostic"));
__export(require("./emailTemplate"));
__export(require("./gateway"));
__export(require("./gatewayApi"));
__export(require("./getApi"));
__export(require("./getApiVersionSet"));
__export(require("./getGateway"));
__export(require("./getGroup"));
__export(require("./getProduct"));
__export(require("./getService"));
__export(require("./getUser"));
__export(require("./group"));
__export(require("./groupUser"));
__export(require("./identityProviderAad"));
__export(require("./identityProviderAadb2c"));
__export(require("./identityProviderFacebook"));
__export(require("./identityProviderGoogle"));
__export(require("./identityProviderMicrosoft"));
__export(require("./identityProviderTwitter"));
__export(require("./logger"));
__export(require("./namedValue"));
__export(require("./notificationRecipientEmail"));
__export(require("./openIdConnectProvider"));
__export(require("./policy"));
__export(require("./product"));
__export(require("./productApi"));
__export(require("./productGroup"));
__export(require("./productPolicy"));
__export(require("./property"));
__export(require("./redisCache"));
__export(require("./service"));
__export(require("./subscription"));
__export(require("./tag"));
__export(require("./user"));
// Import resources to register:
const api_1 = require("./api");
const apiDiagnostic_1 = require("./apiDiagnostic");
const apiOperation_1 = require("./apiOperation");
const apiOperationPolicy_1 = require("./apiOperationPolicy");
const apiOperationTag_1 = require("./apiOperationTag");
const apiPolicy_1 = require("./apiPolicy");
const apiRelease_1 = require("./apiRelease");
const apiSchema_1 = require("./apiSchema");
const apiVersionSet_1 = require("./apiVersionSet");
const authorizationServer_1 = require("./authorizationServer");
const backend_1 = require("./backend");
const certificate_1 = require("./certificate");
const customDomain_1 = require("./customDomain");
const diagnostic_1 = require("./diagnostic");
const emailTemplate_1 = require("./emailTemplate");
const gateway_1 = require("./gateway");
const gatewayApi_1 = require("./gatewayApi");
const group_1 = require("./group");
const groupUser_1 = require("./groupUser");
const identityProviderAad_1 = require("./identityProviderAad");
const identityProviderAadb2c_1 = require("./identityProviderAadb2c");
const identityProviderFacebook_1 = require("./identityProviderFacebook");
const identityProviderGoogle_1 = require("./identityProviderGoogle");
const identityProviderMicrosoft_1 = require("./identityProviderMicrosoft");
const identityProviderTwitter_1 = require("./identityProviderTwitter");
const logger_1 = require("./logger");
const namedValue_1 = require("./namedValue");
const notificationRecipientEmail_1 = require("./notificationRecipientEmail");
const openIdConnectProvider_1 = require("./openIdConnectProvider");
const policy_1 = require("./policy");
const product_1 = require("./product");
const productApi_1 = require("./productApi");
const productGroup_1 = require("./productGroup");
const productPolicy_1 = require("./productPolicy");
const property_1 = require("./property");
const redisCache_1 = require("./redisCache");
const service_1 = require("./service");
const subscription_1 = require("./subscription");
const tag_1 = require("./tag");
const user_1 = require("./user");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:apimanagement/api:Api":
                return new api_1.Api(name, undefined, { urn });
            case "azure:apimanagement/apiDiagnostic:ApiDiagnostic":
                return new apiDiagnostic_1.ApiDiagnostic(name, undefined, { urn });
            case "azure:apimanagement/apiOperation:ApiOperation":
                return new apiOperation_1.ApiOperation(name, undefined, { urn });
            case "azure:apimanagement/apiOperationPolicy:ApiOperationPolicy":
                return new apiOperationPolicy_1.ApiOperationPolicy(name, undefined, { urn });
            case "azure:apimanagement/apiOperationTag:ApiOperationTag":
                return new apiOperationTag_1.ApiOperationTag(name, undefined, { urn });
            case "azure:apimanagement/apiPolicy:ApiPolicy":
                return new apiPolicy_1.ApiPolicy(name, undefined, { urn });
            case "azure:apimanagement/apiRelease:ApiRelease":
                return new apiRelease_1.ApiRelease(name, undefined, { urn });
            case "azure:apimanagement/apiSchema:ApiSchema":
                return new apiSchema_1.ApiSchema(name, undefined, { urn });
            case "azure:apimanagement/apiVersionSet:ApiVersionSet":
                return new apiVersionSet_1.ApiVersionSet(name, undefined, { urn });
            case "azure:apimanagement/authorizationServer:AuthorizationServer":
                return new authorizationServer_1.AuthorizationServer(name, undefined, { urn });
            case "azure:apimanagement/backend:Backend":
                return new backend_1.Backend(name, undefined, { urn });
            case "azure:apimanagement/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure:apimanagement/customDomain:CustomDomain":
                return new customDomain_1.CustomDomain(name, undefined, { urn });
            case "azure:apimanagement/diagnostic:Diagnostic":
                return new diagnostic_1.Diagnostic(name, undefined, { urn });
            case "azure:apimanagement/emailTemplate:EmailTemplate":
                return new emailTemplate_1.EmailTemplate(name, undefined, { urn });
            case "azure:apimanagement/gateway:Gateway":
                return new gateway_1.Gateway(name, undefined, { urn });
            case "azure:apimanagement/gatewayApi:GatewayApi":
                return new gatewayApi_1.GatewayApi(name, undefined, { urn });
            case "azure:apimanagement/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azure:apimanagement/groupUser:GroupUser":
                return new groupUser_1.GroupUser(name, undefined, { urn });
            case "azure:apimanagement/identityProviderAad:IdentityProviderAad":
                return new identityProviderAad_1.IdentityProviderAad(name, undefined, { urn });
            case "azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c":
                return new identityProviderAadb2c_1.IdentityProviderAadb2c(name, undefined, { urn });
            case "azure:apimanagement/identityProviderFacebook:IdentityProviderFacebook":
                return new identityProviderFacebook_1.IdentityProviderFacebook(name, undefined, { urn });
            case "azure:apimanagement/identityProviderGoogle:IdentityProviderGoogle":
                return new identityProviderGoogle_1.IdentityProviderGoogle(name, undefined, { urn });
            case "azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft":
                return new identityProviderMicrosoft_1.IdentityProviderMicrosoft(name, undefined, { urn });
            case "azure:apimanagement/identityProviderTwitter:IdentityProviderTwitter":
                return new identityProviderTwitter_1.IdentityProviderTwitter(name, undefined, { urn });
            case "azure:apimanagement/logger:Logger":
                return new logger_1.Logger(name, undefined, { urn });
            case "azure:apimanagement/namedValue:NamedValue":
                return new namedValue_1.NamedValue(name, undefined, { urn });
            case "azure:apimanagement/notificationRecipientEmail:NotificationRecipientEmail":
                return new notificationRecipientEmail_1.NotificationRecipientEmail(name, undefined, { urn });
            case "azure:apimanagement/openIdConnectProvider:OpenIdConnectProvider":
                return new openIdConnectProvider_1.OpenIdConnectProvider(name, undefined, { urn });
            case "azure:apimanagement/policy:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "azure:apimanagement/product:Product":
                return new product_1.Product(name, undefined, { urn });
            case "azure:apimanagement/productApi:ProductApi":
                return new productApi_1.ProductApi(name, undefined, { urn });
            case "azure:apimanagement/productGroup:ProductGroup":
                return new productGroup_1.ProductGroup(name, undefined, { urn });
            case "azure:apimanagement/productPolicy:ProductPolicy":
                return new productPolicy_1.ProductPolicy(name, undefined, { urn });
            case "azure:apimanagement/property:Property":
                return new property_1.Property(name, undefined, { urn });
            case "azure:apimanagement/redisCache:RedisCache":
                return new redisCache_1.RedisCache(name, undefined, { urn });
            case "azure:apimanagement/service:Service":
                return new service_1.Service(name, undefined, { urn });
            case "azure:apimanagement/subscription:Subscription":
                return new subscription_1.Subscription(name, undefined, { urn });
            case "azure:apimanagement/tag:Tag":
                return new tag_1.Tag(name, undefined, { urn });
            case "azure:apimanagement/user:User":
                return new user_1.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "apimanagement/api", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiDiagnostic", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperation", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiOperationTag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiRelease", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiSchema", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/apiVersionSet", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/authorizationServer", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/backend", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/customDomain", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/diagnostic", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/emailTemplate", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gateway", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/gatewayApi", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/group", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/groupUser", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAad", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderAadb2c", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderFacebook", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderGoogle", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderMicrosoft", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/identityProviderTwitter", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/logger", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/namedValue", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/notificationRecipientEmail", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/openIdConnectProvider", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/policy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/product", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productApi", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productGroup", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/productPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/property", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/redisCache", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/service", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/subscription", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/tag", _module);
pulumi.runtime.registerResourceModule("azure", "apimanagement/user", _module);
//# sourceMappingURL=index.js.map