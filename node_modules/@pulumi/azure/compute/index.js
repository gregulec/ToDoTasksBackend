"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./availabilitySet"));
__export(require("./bastionHost"));
__export(require("./configurationPolicyAssignment"));
__export(require("./dataDiskAttachment"));
__export(require("./dedicatedHost"));
__export(require("./dedicatedHostGroup"));
__export(require("./diskAccess"));
__export(require("./diskEncryptionSet"));
__export(require("./extension"));
__export(require("./getAvailabilitySet"));
__export(require("./getDedicatedHost"));
__export(require("./getDedicatedHostGroup"));
__export(require("./getDiskAccess"));
__export(require("./getDiskEncryptionSet"));
__export(require("./getImage"));
__export(require("./getImages"));
__export(require("./getManagedDisk"));
__export(require("./getPlatformImage"));
__export(require("./getSharedImage"));
__export(require("./getSharedImageGallery"));
__export(require("./getSharedImageVersion"));
__export(require("./getSharedImageVersions"));
__export(require("./getSnapshot"));
__export(require("./getSshPublicKey"));
__export(require("./getVirtualMachine"));
__export(require("./getVirtualMachineScaleSet"));
__export(require("./image"));
__export(require("./linuxVirtualMachine"));
__export(require("./linuxVirtualMachineScaleSet"));
__export(require("./managedDisk"));
__export(require("./orchestratedVirtualMachineScaleSet"));
__export(require("./scaleSet"));
__export(require("./sharedImage"));
__export(require("./sharedImageGallery"));
__export(require("./sharedImageVersion"));
__export(require("./snapshot"));
__export(require("./sshPublicKey"));
__export(require("./virtualMachine"));
__export(require("./virtualMachineScaleSetExtension"));
__export(require("./windowsVirtualMachine"));
__export(require("./windowsVirtualMachineScaleSet"));
// Import resources to register:
const availabilitySet_1 = require("./availabilitySet");
const bastionHost_1 = require("./bastionHost");
const configurationPolicyAssignment_1 = require("./configurationPolicyAssignment");
const dataDiskAttachment_1 = require("./dataDiskAttachment");
const dedicatedHost_1 = require("./dedicatedHost");
const dedicatedHostGroup_1 = require("./dedicatedHostGroup");
const diskAccess_1 = require("./diskAccess");
const diskEncryptionSet_1 = require("./diskEncryptionSet");
const extension_1 = require("./extension");
const image_1 = require("./image");
const linuxVirtualMachine_1 = require("./linuxVirtualMachine");
const linuxVirtualMachineScaleSet_1 = require("./linuxVirtualMachineScaleSet");
const managedDisk_1 = require("./managedDisk");
const orchestratedVirtualMachineScaleSet_1 = require("./orchestratedVirtualMachineScaleSet");
const scaleSet_1 = require("./scaleSet");
const sharedImage_1 = require("./sharedImage");
const sharedImageGallery_1 = require("./sharedImageGallery");
const sharedImageVersion_1 = require("./sharedImageVersion");
const snapshot_1 = require("./snapshot");
const sshPublicKey_1 = require("./sshPublicKey");
const virtualMachine_1 = require("./virtualMachine");
const virtualMachineScaleSetExtension_1 = require("./virtualMachineScaleSetExtension");
const windowsVirtualMachine_1 = require("./windowsVirtualMachine");
const windowsVirtualMachineScaleSet_1 = require("./windowsVirtualMachineScaleSet");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:compute/availabilitySet:AvailabilitySet":
                return new availabilitySet_1.AvailabilitySet(name, undefined, { urn });
            case "azure:compute/bastionHost:BastionHost":
                return new bastionHost_1.BastionHost(name, undefined, { urn });
            case "azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment":
                return new configurationPolicyAssignment_1.ConfigurationPolicyAssignment(name, undefined, { urn });
            case "azure:compute/dataDiskAttachment:DataDiskAttachment":
                return new dataDiskAttachment_1.DataDiskAttachment(name, undefined, { urn });
            case "azure:compute/dedicatedHost:DedicatedHost":
                return new dedicatedHost_1.DedicatedHost(name, undefined, { urn });
            case "azure:compute/dedicatedHostGroup:DedicatedHostGroup":
                return new dedicatedHostGroup_1.DedicatedHostGroup(name, undefined, { urn });
            case "azure:compute/diskAccess:DiskAccess":
                return new diskAccess_1.DiskAccess(name, undefined, { urn });
            case "azure:compute/diskEncryptionSet:DiskEncryptionSet":
                return new diskEncryptionSet_1.DiskEncryptionSet(name, undefined, { urn });
            case "azure:compute/extension:Extension":
                return new extension_1.Extension(name, undefined, { urn });
            case "azure:compute/image:Image":
                return new image_1.Image(name, undefined, { urn });
            case "azure:compute/linuxVirtualMachine:LinuxVirtualMachine":
                return new linuxVirtualMachine_1.LinuxVirtualMachine(name, undefined, { urn });
            case "azure:compute/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
                return new linuxVirtualMachineScaleSet_1.LinuxVirtualMachineScaleSet(name, undefined, { urn });
            case "azure:compute/managedDisk:ManagedDisk":
                return new managedDisk_1.ManagedDisk(name, undefined, { urn });
            case "azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet":
                return new orchestratedVirtualMachineScaleSet_1.OrchestratedVirtualMachineScaleSet(name, undefined, { urn });
            case "azure:compute/scaleSet:ScaleSet":
                return new scaleSet_1.ScaleSet(name, undefined, { urn });
            case "azure:compute/sharedImage:SharedImage":
                return new sharedImage_1.SharedImage(name, undefined, { urn });
            case "azure:compute/sharedImageGallery:SharedImageGallery":
                return new sharedImageGallery_1.SharedImageGallery(name, undefined, { urn });
            case "azure:compute/sharedImageVersion:SharedImageVersion":
                return new sharedImageVersion_1.SharedImageVersion(name, undefined, { urn });
            case "azure:compute/snapshot:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            case "azure:compute/sshPublicKey:SshPublicKey":
                return new sshPublicKey_1.SshPublicKey(name, undefined, { urn });
            case "azure:compute/virtualMachine:VirtualMachine":
                return new virtualMachine_1.VirtualMachine(name, undefined, { urn });
            case "azure:compute/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
                return new virtualMachineScaleSetExtension_1.VirtualMachineScaleSetExtension(name, undefined, { urn });
            case "azure:compute/windowsVirtualMachine:WindowsVirtualMachine":
                return new windowsVirtualMachine_1.WindowsVirtualMachine(name, undefined, { urn });
            case "azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
                return new windowsVirtualMachineScaleSet_1.WindowsVirtualMachineScaleSet(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "compute/availabilitySet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/bastionHost", _module);
pulumi.runtime.registerResourceModule("azure", "compute/configurationPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dataDiskAttachment", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHost", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHostGroup", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskAccess", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskEncryptionSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/extension", _module);
pulumi.runtime.registerResourceModule("azure", "compute/image", _module);
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachineScaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/managedDisk", _module);
pulumi.runtime.registerResourceModule("azure", "compute/orchestratedVirtualMachineScaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/scaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImage", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageGallery", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageVersion", _module);
pulumi.runtime.registerResourceModule("azure", "compute/snapshot", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sshPublicKey", _module);
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachineScaleSetExtension", _module);
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachineScaleSet", _module);
//# sourceMappingURL=index.js.map