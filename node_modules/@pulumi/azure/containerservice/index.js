"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getClusterNodePool"));
__export(require("./getKubernetesCluster"));
__export(require("./getKubernetesServiceVersions"));
__export(require("./getRegistry"));
__export(require("./getRegistryScopeMap"));
__export(require("./getRegistryToken"));
__export(require("./group"));
__export(require("./kubernetesCluster"));
__export(require("./kubernetesClusterNodePool"));
__export(require("./registry"));
__export(require("./registryScopeMap"));
__export(require("./registryToken"));
__export(require("./registryWebhook"));
__export(require("./registryWebook"));
// Import resources to register:
const group_1 = require("./group");
const kubernetesCluster_1 = require("./kubernetesCluster");
const kubernetesClusterNodePool_1 = require("./kubernetesClusterNodePool");
const registry_1 = require("./registry");
const registryScopeMap_1 = require("./registryScopeMap");
const registryToken_1 = require("./registryToken");
const registryWebhook_1 = require("./registryWebhook");
const registryWebook_1 = require("./registryWebook");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:containerservice/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azure:containerservice/kubernetesCluster:KubernetesCluster":
                return new kubernetesCluster_1.KubernetesCluster(name, undefined, { urn });
            case "azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool":
                return new kubernetesClusterNodePool_1.KubernetesClusterNodePool(name, undefined, { urn });
            case "azure:containerservice/registry:Registry":
                return new registry_1.Registry(name, undefined, { urn });
            case "azure:containerservice/registryScopeMap:RegistryScopeMap":
                return new registryScopeMap_1.RegistryScopeMap(name, undefined, { urn });
            case "azure:containerservice/registryToken:RegistryToken":
                return new registryToken_1.RegistryToken(name, undefined, { urn });
            case "azure:containerservice/registryWebhook:RegistryWebhook":
                return new registryWebhook_1.RegistryWebhook(name, undefined, { urn });
            case "azure:containerservice/registryWebook:RegistryWebook":
                return new registryWebook_1.RegistryWebook(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "containerservice/group", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesCluster", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/kubernetesClusterNodePool", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registry", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryScopeMap", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryToken", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebhook", _module);
pulumi.runtime.registerResourceModule("azure", "containerservice/registryWebook", _module);
//# sourceMappingURL=index.js.map