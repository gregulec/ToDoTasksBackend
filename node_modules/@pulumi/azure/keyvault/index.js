"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./accessPolicy"));
__export(require("./certifiate"));
__export(require("./certificate"));
__export(require("./certificateIssuer"));
__export(require("./getAccessPolicy"));
__export(require("./getCertificate"));
__export(require("./getCertificateData"));
__export(require("./getCertificateIssuer"));
__export(require("./getKey"));
__export(require("./getKeyVault"));
__export(require("./getManagedHardwareSecurityModule"));
__export(require("./getSecret"));
__export(require("./getSecrets"));
__export(require("./key"));
__export(require("./keyVault"));
__export(require("./managedHardwareSecurityModule"));
__export(require("./secret"));
// Import resources to register:
const accessPolicy_1 = require("./accessPolicy");
const certifiate_1 = require("./certifiate");
const certificate_1 = require("./certificate");
const certificateIssuer_1 = require("./certificateIssuer");
const key_1 = require("./key");
const keyVault_1 = require("./keyVault");
const managedHardwareSecurityModule_1 = require("./managedHardwareSecurityModule");
const secret_1 = require("./secret");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:keyvault/accessPolicy:AccessPolicy":
                return new accessPolicy_1.AccessPolicy(name, undefined, { urn });
            case "azure:keyvault/certifiate:Certifiate":
                return new certifiate_1.Certifiate(name, undefined, { urn });
            case "azure:keyvault/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure:keyvault/certificateIssuer:CertificateIssuer":
                return new certificateIssuer_1.CertificateIssuer(name, undefined, { urn });
            case "azure:keyvault/key:Key":
                return new key_1.Key(name, undefined, { urn });
            case "azure:keyvault/keyVault:KeyVault":
                return new keyVault_1.KeyVault(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModule:ManagedHardwareSecurityModule":
                return new managedHardwareSecurityModule_1.ManagedHardwareSecurityModule(name, undefined, { urn });
            case "azure:keyvault/secret:Secret":
                return new secret_1.Secret(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "keyvault/accessPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certifiate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificateIssuer", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/key", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/keyVault", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModule", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/secret", _module);
//# sourceMappingURL=index.js.map