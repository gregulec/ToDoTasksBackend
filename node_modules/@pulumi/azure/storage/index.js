"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./account"));
__export(require("./accountNetworkRules"));
__export(require("./blob"));
__export(require("./blobInventoryPolicy"));
__export(require("./container"));
__export(require("./customerManagedKey"));
__export(require("./dataLakeGen2Filesystem"));
__export(require("./dataLakeGen2Path"));
__export(require("./encryptionScope"));
__export(require("./getAccount"));
__export(require("./getAccountBlobContainerSAS"));
__export(require("./getAccountSAS"));
__export(require("./getBlob"));
__export(require("./getEncryptionScope"));
__export(require("./getPolicy"));
__export(require("./getShare"));
__export(require("./getStorageContainer"));
__export(require("./getSync"));
__export(require("./getSyncGroup"));
__export(require("./getTableEntity"));
__export(require("./managementPolicy"));
__export(require("./objectReplication"));
__export(require("./queue"));
__export(require("./share"));
__export(require("./shareDirectory"));
__export(require("./shareFile"));
__export(require("./sync"));
__export(require("./syncCloudEndpoint"));
__export(require("./syncGroup"));
__export(require("./table"));
__export(require("./tableEntity"));
__export(require("./zMixins"));
__export(require("./zipBlob"));
// Import resources to register:
const account_1 = require("./account");
const accountNetworkRules_1 = require("./accountNetworkRules");
const blob_1 = require("./blob");
const blobInventoryPolicy_1 = require("./blobInventoryPolicy");
const container_1 = require("./container");
const customerManagedKey_1 = require("./customerManagedKey");
const dataLakeGen2Filesystem_1 = require("./dataLakeGen2Filesystem");
const dataLakeGen2Path_1 = require("./dataLakeGen2Path");
const encryptionScope_1 = require("./encryptionScope");
const managementPolicy_1 = require("./managementPolicy");
const objectReplication_1 = require("./objectReplication");
const queue_1 = require("./queue");
const share_1 = require("./share");
const shareDirectory_1 = require("./shareDirectory");
const shareFile_1 = require("./shareFile");
const sync_1 = require("./sync");
const syncCloudEndpoint_1 = require("./syncCloudEndpoint");
const syncGroup_1 = require("./syncGroup");
const table_1 = require("./table");
const tableEntity_1 = require("./tableEntity");
const zipBlob_1 = require("./zipBlob");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:storage/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure:storage/accountNetworkRules:AccountNetworkRules":
                return new accountNetworkRules_1.AccountNetworkRules(name, undefined, { urn });
            case "azure:storage/blob:Blob":
                return new blob_1.Blob(name, undefined, { urn });
            case "azure:storage/blobInventoryPolicy:BlobInventoryPolicy":
                return new blobInventoryPolicy_1.BlobInventoryPolicy(name, undefined, { urn });
            case "azure:storage/container:Container":
                return new container_1.Container(name, undefined, { urn });
            case "azure:storage/customerManagedKey:CustomerManagedKey":
                return new customerManagedKey_1.CustomerManagedKey(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem":
                return new dataLakeGen2Filesystem_1.DataLakeGen2Filesystem(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Path:DataLakeGen2Path":
                return new dataLakeGen2Path_1.DataLakeGen2Path(name, undefined, { urn });
            case "azure:storage/encryptionScope:EncryptionScope":
                return new encryptionScope_1.EncryptionScope(name, undefined, { urn });
            case "azure:storage/managementPolicy:ManagementPolicy":
                return new managementPolicy_1.ManagementPolicy(name, undefined, { urn });
            case "azure:storage/objectReplication:ObjectReplication":
                return new objectReplication_1.ObjectReplication(name, undefined, { urn });
            case "azure:storage/queue:Queue":
                return new queue_1.Queue(name, undefined, { urn });
            case "azure:storage/share:Share":
                return new share_1.Share(name, undefined, { urn });
            case "azure:storage/shareDirectory:ShareDirectory":
                return new shareDirectory_1.ShareDirectory(name, undefined, { urn });
            case "azure:storage/shareFile:ShareFile":
                return new shareFile_1.ShareFile(name, undefined, { urn });
            case "azure:storage/sync:Sync":
                return new sync_1.Sync(name, undefined, { urn });
            case "azure:storage/syncCloudEndpoint:SyncCloudEndpoint":
                return new syncCloudEndpoint_1.SyncCloudEndpoint(name, undefined, { urn });
            case "azure:storage/syncGroup:SyncGroup":
                return new syncGroup_1.SyncGroup(name, undefined, { urn });
            case "azure:storage/table:Table":
                return new table_1.Table(name, undefined, { urn });
            case "azure:storage/tableEntity:TableEntity":
                return new tableEntity_1.TableEntity(name, undefined, { urn });
            case "azure:storage/zipBlob:ZipBlob":
                return new zipBlob_1.ZipBlob(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "storage/account", _module);
pulumi.runtime.registerResourceModule("azure", "storage/accountNetworkRules", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blob", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blobInventoryPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/container", _module);
pulumi.runtime.registerResourceModule("azure", "storage/customerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Filesystem", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Path", _module);
pulumi.runtime.registerResourceModule("azure", "storage/encryptionScope", _module);
pulumi.runtime.registerResourceModule("azure", "storage/managementPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/objectReplication", _module);
pulumi.runtime.registerResourceModule("azure", "storage/queue", _module);
pulumi.runtime.registerResourceModule("azure", "storage/share", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareDirectory", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareFile", _module);
pulumi.runtime.registerResourceModule("azure", "storage/sync", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncCloudEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncGroup", _module);
pulumi.runtime.registerResourceModule("azure", "storage/table", _module);
pulumi.runtime.registerResourceModule("azure", "storage/tableEntity", _module);
pulumi.runtime.registerResourceModule("azure", "storage/zipBlob", _module);
//# sourceMappingURL=index.js.map