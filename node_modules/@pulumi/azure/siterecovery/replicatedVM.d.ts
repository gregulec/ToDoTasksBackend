import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
 *
 * ## Import
 *
 * Site Recovery Replicated VM's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 */
export declare class ReplicatedVM extends pulumi.CustomResource {
    /**
     * Get an existing ReplicatedVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicatedVMState, opts?: pulumi.CustomResourceOptions): ReplicatedVM;
    /**
     * Returns true if the given object is an instance of ReplicatedVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ReplicatedVM;
    /**
     * One or more `managedDisk` block.
     */
    readonly managedDisks: pulumi.Output<outputs.siterecovery.ReplicatedVMManagedDisk[] | undefined>;
    /**
     * The name of the network mapping.
     */
    readonly name: pulumi.Output<string>;
    /**
     * One or more `networkInterface` block.
     */
    readonly networkInterfaces: pulumi.Output<outputs.siterecovery.ReplicatedVMNetworkInterface[]>;
    readonly recoveryReplicationPolicyId: pulumi.Output<string>;
    /**
     * The name of the vault that should be updated.
     */
    readonly recoveryVaultName: pulumi.Output<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    readonly sourceRecoveryFabricName: pulumi.Output<string>;
    /**
     * Name of the protection container to use.
     */
    readonly sourceRecoveryProtectionContainerName: pulumi.Output<string>;
    /**
     * Id of the VM to replicate
     */
    readonly sourceVmId: pulumi.Output<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    readonly targetAvailabilitySetId: pulumi.Output<string | undefined>;
    /**
     * Network to use when a failover is done (recommended to set if any networkInterface is configured for failover).
     */
    readonly targetNetworkId: pulumi.Output<string>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    readonly targetRecoveryFabricId: pulumi.Output<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    readonly targetRecoveryProtectionContainerId: pulumi.Output<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    readonly targetResourceGroupId: pulumi.Output<string>;
    /**
     * Create a ReplicatedVM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicatedVMArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ReplicatedVM resources.
 */
export interface ReplicatedVMState {
    /**
     * One or more `managedDisk` block.
     */
    managedDisks?: pulumi.Input<pulumi.Input<inputs.siterecovery.ReplicatedVMManagedDisk>[]>;
    /**
     * The name of the network mapping.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` block.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.siterecovery.ReplicatedVMNetworkInterface>[]>;
    recoveryReplicationPolicyId?: pulumi.Input<string>;
    /**
     * The name of the vault that should be updated.
     */
    recoveryVaultName?: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    sourceRecoveryFabricName?: pulumi.Input<string>;
    /**
     * Name of the protection container to use.
     */
    sourceRecoveryProtectionContainerName?: pulumi.Input<string>;
    /**
     * Id of the VM to replicate
     */
    sourceVmId?: pulumi.Input<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    targetAvailabilitySetId?: pulumi.Input<string>;
    /**
     * Network to use when a failover is done (recommended to set if any networkInterface is configured for failover).
     */
    targetNetworkId?: pulumi.Input<string>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    targetRecoveryFabricId?: pulumi.Input<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    targetRecoveryProtectionContainerId?: pulumi.Input<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    targetResourceGroupId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ReplicatedVM resource.
 */
export interface ReplicatedVMArgs {
    /**
     * One or more `managedDisk` block.
     */
    managedDisks?: pulumi.Input<pulumi.Input<inputs.siterecovery.ReplicatedVMManagedDisk>[]>;
    /**
     * The name of the network mapping.
     */
    name?: pulumi.Input<string>;
    /**
     * One or more `networkInterface` block.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.siterecovery.ReplicatedVMNetworkInterface>[]>;
    recoveryReplicationPolicyId: pulumi.Input<string>;
    /**
     * The name of the vault that should be updated.
     */
    recoveryVaultName: pulumi.Input<string>;
    /**
     * Name of the resource group where the vault that should be updated is located.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Name of fabric that should contains this replication.
     */
    sourceRecoveryFabricName: pulumi.Input<string>;
    /**
     * Name of the protection container to use.
     */
    sourceRecoveryProtectionContainerName: pulumi.Input<string>;
    /**
     * Id of the VM to replicate
     */
    sourceVmId: pulumi.Input<string>;
    /**
     * Id of availability set that the new VM should belong to when a failover is done.
     */
    targetAvailabilitySetId?: pulumi.Input<string>;
    /**
     * Network to use when a failover is done (recommended to set if any networkInterface is configured for failover).
     */
    targetNetworkId?: pulumi.Input<string>;
    /**
     * Id of fabric where the VM replication should be handled when a failover is done.
     */
    targetRecoveryFabricId: pulumi.Input<string>;
    /**
     * Id of protection container where the VM replication should be created when a failover is done.
     */
    targetRecoveryProtectionContainerId: pulumi.Input<string>;
    /**
     * Id of resource group where the VM should be created when a failover is done.
     */
    targetResourceGroupId: pulumi.Input<string>;
}
