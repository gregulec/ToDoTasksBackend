"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a VM replicated using Azure Site Recovery (Azure to Azure only). A replicated VM keeps a copiously updated image of the VM in another region in order to be able to start the VM in that region in case of a disaster.
 *
 * ## Import
 *
 * Site Recovery Replicated VM's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:siterecovery/replicatedVM:ReplicatedVM vmreplication /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name/replicationProtectionContainers/protection-container-name/replicationProtectedItems/vm-replication-name
 * ```
 */
class ReplicatedVM extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["managedDisks"] = state ? state.managedDisks : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["recoveryReplicationPolicyId"] = state ? state.recoveryReplicationPolicyId : undefined;
            inputs["recoveryVaultName"] = state ? state.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["sourceRecoveryFabricName"] = state ? state.sourceRecoveryFabricName : undefined;
            inputs["sourceRecoveryProtectionContainerName"] = state ? state.sourceRecoveryProtectionContainerName : undefined;
            inputs["sourceVmId"] = state ? state.sourceVmId : undefined;
            inputs["targetAvailabilitySetId"] = state ? state.targetAvailabilitySetId : undefined;
            inputs["targetNetworkId"] = state ? state.targetNetworkId : undefined;
            inputs["targetRecoveryFabricId"] = state ? state.targetRecoveryFabricId : undefined;
            inputs["targetRecoveryProtectionContainerId"] = state ? state.targetRecoveryProtectionContainerId : undefined;
            inputs["targetResourceGroupId"] = state ? state.targetResourceGroupId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.recoveryReplicationPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryReplicationPolicyId'");
            }
            if ((!args || args.recoveryVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryVaultName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sourceRecoveryFabricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryFabricName'");
            }
            if ((!args || args.sourceRecoveryProtectionContainerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRecoveryProtectionContainerName'");
            }
            if ((!args || args.sourceVmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVmId'");
            }
            if ((!args || args.targetRecoveryFabricId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryFabricId'");
            }
            if ((!args || args.targetRecoveryProtectionContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRecoveryProtectionContainerId'");
            }
            if ((!args || args.targetResourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceGroupId'");
            }
            inputs["managedDisks"] = args ? args.managedDisks : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["recoveryReplicationPolicyId"] = args ? args.recoveryReplicationPolicyId : undefined;
            inputs["recoveryVaultName"] = args ? args.recoveryVaultName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sourceRecoveryFabricName"] = args ? args.sourceRecoveryFabricName : undefined;
            inputs["sourceRecoveryProtectionContainerName"] = args ? args.sourceRecoveryProtectionContainerName : undefined;
            inputs["sourceVmId"] = args ? args.sourceVmId : undefined;
            inputs["targetAvailabilitySetId"] = args ? args.targetAvailabilitySetId : undefined;
            inputs["targetNetworkId"] = args ? args.targetNetworkId : undefined;
            inputs["targetRecoveryFabricId"] = args ? args.targetRecoveryFabricId : undefined;
            inputs["targetRecoveryProtectionContainerId"] = args ? args.targetRecoveryProtectionContainerId : undefined;
            inputs["targetResourceGroupId"] = args ? args.targetResourceGroupId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ReplicatedVM.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ReplicatedVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReplicatedVM(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicatedVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicatedVM.__pulumiType;
    }
}
exports.ReplicatedVM = ReplicatedVM;
/** @internal */
ReplicatedVM.__pulumiType = 'azure:siterecovery/replicatedVM:ReplicatedVM';
//# sourceMappingURL=replicatedVM.js.map