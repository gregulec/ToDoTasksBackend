"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./account"));
__export(require("./cassandraKeyspace"));
__export(require("./cassandraTable"));
__export(require("./getAccount"));
__export(require("./gremlinDatabase"));
__export(require("./gremlinGraph"));
__export(require("./mongoCollection"));
__export(require("./mongoDatabase"));
__export(require("./notebookWorkspace"));
__export(require("./sqlContainer"));
__export(require("./sqlDatabase"));
__export(require("./sqlFunction"));
__export(require("./sqlStoredProcedure"));
__export(require("./sqlTrigger"));
__export(require("./table"));
__export(require("./zMixins"));
// Import resources to register:
const account_1 = require("./account");
const cassandraKeyspace_1 = require("./cassandraKeyspace");
const cassandraTable_1 = require("./cassandraTable");
const gremlinDatabase_1 = require("./gremlinDatabase");
const gremlinGraph_1 = require("./gremlinGraph");
const mongoCollection_1 = require("./mongoCollection");
const mongoDatabase_1 = require("./mongoDatabase");
const notebookWorkspace_1 = require("./notebookWorkspace");
const sqlContainer_1 = require("./sqlContainer");
const sqlDatabase_1 = require("./sqlDatabase");
const sqlFunction_1 = require("./sqlFunction");
const sqlStoredProcedure_1 = require("./sqlStoredProcedure");
const sqlTrigger_1 = require("./sqlTrigger");
const table_1 = require("./table");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:cosmosdb/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure:cosmosdb/cassandraKeyspace:CassandraKeyspace":
                return new cassandraKeyspace_1.CassandraKeyspace(name, undefined, { urn });
            case "azure:cosmosdb/cassandraTable:CassandraTable":
                return new cassandraTable_1.CassandraTable(name, undefined, { urn });
            case "azure:cosmosdb/gremlinDatabase:GremlinDatabase":
                return new gremlinDatabase_1.GremlinDatabase(name, undefined, { urn });
            case "azure:cosmosdb/gremlinGraph:GremlinGraph":
                return new gremlinGraph_1.GremlinGraph(name, undefined, { urn });
            case "azure:cosmosdb/mongoCollection:MongoCollection":
                return new mongoCollection_1.MongoCollection(name, undefined, { urn });
            case "azure:cosmosdb/mongoDatabase:MongoDatabase":
                return new mongoDatabase_1.MongoDatabase(name, undefined, { urn });
            case "azure:cosmosdb/notebookWorkspace:NotebookWorkspace":
                return new notebookWorkspace_1.NotebookWorkspace(name, undefined, { urn });
            case "azure:cosmosdb/sqlContainer:SqlContainer":
                return new sqlContainer_1.SqlContainer(name, undefined, { urn });
            case "azure:cosmosdb/sqlDatabase:SqlDatabase":
                return new sqlDatabase_1.SqlDatabase(name, undefined, { urn });
            case "azure:cosmosdb/sqlFunction:SqlFunction":
                return new sqlFunction_1.SqlFunction(name, undefined, { urn });
            case "azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure":
                return new sqlStoredProcedure_1.SqlStoredProcedure(name, undefined, { urn });
            case "azure:cosmosdb/sqlTrigger:SqlTrigger":
                return new sqlTrigger_1.SqlTrigger(name, undefined, { urn });
            case "azure:cosmosdb/table:Table":
                return new table_1.Table(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "cosmosdb/account", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraKeyspace", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraTable", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinGraph", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoCollection", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/notebookWorkspace", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlContainer", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlFunction", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlStoredProcedure", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlTrigger", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/table", _module);
//# sourceMappingURL=index.js.map