"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./activeDirectoryAdministrator"));
__export(require("./configuration"));
__export(require("./database"));
__export(require("./firewallRule"));
__export(require("./getServer"));
__export(require("./server"));
__export(require("./serverKey"));
__export(require("./virtualNetworkRule"));
// Import resources to register:
const activeDirectoryAdministrator_1 = require("./activeDirectoryAdministrator");
const configuration_1 = require("./configuration");
const database_1 = require("./database");
const firewallRule_1 = require("./firewallRule");
const server_1 = require("./server");
const serverKey_1 = require("./serverKey");
const virtualNetworkRule_1 = require("./virtualNetworkRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:mysql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new activeDirectoryAdministrator_1.ActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:mysql/configuration:Configuration":
                return new configuration_1.Configuration(name, undefined, { urn });
            case "azure:mysql/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure:mysql/firewallRule:FirewallRule":
                return new firewallRule_1.FirewallRule(name, undefined, { urn });
            case "azure:mysql/server:Server":
                return new server_1.Server(name, undefined, { urn });
            case "azure:mysql/serverKey:ServerKey":
                return new serverKey_1.ServerKey(name, undefined, { urn });
            case "azure:mysql/virtualNetworkRule:VirtualNetworkRule":
                return new virtualNetworkRule_1.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "mysql/activeDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/configuration", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/database", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/server", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/serverKey", _module);
pulumi.runtime.registerResourceModule("azure", "mysql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map