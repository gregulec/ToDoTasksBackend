"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./backendAddressPool"));
__export(require("./backendAddressPoolAddress"));
__export(require("./getBackendAddressPool"));
__export(require("./getLB"));
__export(require("./getLBRule"));
__export(require("./loadBalancer"));
__export(require("./natPool"));
__export(require("./natRule"));
__export(require("./outboundRule"));
__export(require("./probe"));
__export(require("./rule"));
// Import resources to register:
const backendAddressPool_1 = require("./backendAddressPool");
const backendAddressPoolAddress_1 = require("./backendAddressPoolAddress");
const loadBalancer_1 = require("./loadBalancer");
const natPool_1 = require("./natPool");
const natRule_1 = require("./natRule");
const outboundRule_1 = require("./outboundRule");
const probe_1 = require("./probe");
const rule_1 = require("./rule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:lb/backendAddressPool:BackendAddressPool":
                return new backendAddressPool_1.BackendAddressPool(name, undefined, { urn });
            case "azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress":
                return new backendAddressPoolAddress_1.BackendAddressPoolAddress(name, undefined, { urn });
            case "azure:lb/loadBalancer:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "azure:lb/natPool:NatPool":
                return new natPool_1.NatPool(name, undefined, { urn });
            case "azure:lb/natRule:NatRule":
                return new natRule_1.NatRule(name, undefined, { urn });
            case "azure:lb/outboundRule:OutboundRule":
                return new outboundRule_1.OutboundRule(name, undefined, { urn });
            case "azure:lb/probe:Probe":
                return new probe_1.Probe(name, undefined, { urn });
            case "azure:lb/rule:Rule":
                return new rule_1.Rule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPool", _module);
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPoolAddress", _module);
pulumi.runtime.registerResourceModule("azure", "lb/loadBalancer", _module);
pulumi.runtime.registerResourceModule("azure", "lb/natPool", _module);
pulumi.runtime.registerResourceModule("azure", "lb/natRule", _module);
pulumi.runtime.registerResourceModule("azure", "lb/outboundRule", _module);
pulumi.runtime.registerResourceModule("azure", "lb/probe", _module);
pulumi.runtime.registerResourceModule("azure", "lb/rule", _module);
//# sourceMappingURL=index.js.map