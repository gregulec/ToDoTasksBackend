"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getGroup"));
__export(require("./group"));
__export(require("./groupPolicyAssignment"));
__export(require("./groupSubscriptionAssociation"));
__export(require("./groupTemplateDeployment"));
__export(require("./lock"));
// Import resources to register:
const group_1 = require("./group");
const groupPolicyAssignment_1 = require("./groupPolicyAssignment");
const groupSubscriptionAssociation_1 = require("./groupSubscriptionAssociation");
const groupTemplateDeployment_1 = require("./groupTemplateDeployment");
const lock_1 = require("./lock");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:management/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azure:management/groupPolicyAssignment:GroupPolicyAssignment":
                return new groupPolicyAssignment_1.GroupPolicyAssignment(name, undefined, { urn });
            case "azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation":
                return new groupSubscriptionAssociation_1.GroupSubscriptionAssociation(name, undefined, { urn });
            case "azure:management/groupTemplateDeployment:GroupTemplateDeployment":
                return new groupTemplateDeployment_1.GroupTemplateDeployment(name, undefined, { urn });
            case "azure:management/lock:Lock":
                return new lock_1.Lock(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "management/group", _module);
pulumi.runtime.registerResourceModule("azure", "management/groupPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "management/groupSubscriptionAssociation", _module);
pulumi.runtime.registerResourceModule("azure", "management/groupTemplateDeployment", _module);
pulumi.runtime.registerResourceModule("azure", "management/lock", _module);
//# sourceMappingURL=index.js.map