"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./authorizationRule"));
__export(require("./cluster"));
__export(require("./consumerGroup"));
__export(require("./domain"));
__export(require("./eventGridTopic"));
__export(require("./eventHub"));
__export(require("./eventHubAuthorizationRule"));
__export(require("./eventHubConsumerGroup"));
__export(require("./eventHubNamespace"));
__export(require("./eventHubNamespaceAuthorizationRule"));
__export(require("./eventSubscription"));
__export(require("./eventhubNamespaceDisasterRecoveryConfig"));
__export(require("./getAuthorizationRule"));
__export(require("./getCluster"));
__export(require("./getConsumeGroup"));
__export(require("./getEventHub"));
__export(require("./getEventhubNamespace"));
__export(require("./getNamespace"));
__export(require("./getNamespaceAuthorizationRule"));
__export(require("./getServiceBusNamespace"));
__export(require("./namespace"));
__export(require("./namespaceAuthorizationRule"));
__export(require("./namespaceCustomerManagedKey"));
__export(require("./queue"));
__export(require("./queueAuthorizationRule"));
__export(require("./subscription"));
__export(require("./subscriptionRule"));
__export(require("./topic"));
__export(require("./topicAuthorizationRule"));
__export(require("./zMixins"));
// Import resources to register:
const authorizationRule_1 = require("./authorizationRule");
const cluster_1 = require("./cluster");
const consumerGroup_1 = require("./consumerGroup");
const domain_1 = require("./domain");
const eventGridTopic_1 = require("./eventGridTopic");
const eventHub_1 = require("./eventHub");
const eventHubAuthorizationRule_1 = require("./eventHubAuthorizationRule");
const eventHubConsumerGroup_1 = require("./eventHubConsumerGroup");
const eventHubNamespace_1 = require("./eventHubNamespace");
const eventHubNamespaceAuthorizationRule_1 = require("./eventHubNamespaceAuthorizationRule");
const eventSubscription_1 = require("./eventSubscription");
const eventhubNamespaceDisasterRecoveryConfig_1 = require("./eventhubNamespaceDisasterRecoveryConfig");
const namespace_1 = require("./namespace");
const namespaceAuthorizationRule_1 = require("./namespaceAuthorizationRule");
const namespaceCustomerManagedKey_1 = require("./namespaceCustomerManagedKey");
const queue_1 = require("./queue");
const queueAuthorizationRule_1 = require("./queueAuthorizationRule");
const subscription_1 = require("./subscription");
const subscriptionRule_1 = require("./subscriptionRule");
const topic_1 = require("./topic");
const topicAuthorizationRule_1 = require("./topicAuthorizationRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:eventhub/authorizationRule:AuthorizationRule":
                return new authorizationRule_1.AuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure:eventhub/consumerGroup:ConsumerGroup":
                return new consumerGroup_1.ConsumerGroup(name, undefined, { urn });
            case "azure:eventhub/domain:Domain":
                return new domain_1.Domain(name, undefined, { urn });
            case "azure:eventhub/eventGridTopic:EventGridTopic":
                return new eventGridTopic_1.EventGridTopic(name, undefined, { urn });
            case "azure:eventhub/eventHub:EventHub":
                return new eventHub_1.EventHub(name, undefined, { urn });
            case "azure:eventhub/eventHubAuthorizationRule:EventHubAuthorizationRule":
                return new eventHubAuthorizationRule_1.EventHubAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/eventHubConsumerGroup:EventHubConsumerGroup":
                return new eventHubConsumerGroup_1.EventHubConsumerGroup(name, undefined, { urn });
            case "azure:eventhub/eventHubNamespace:EventHubNamespace":
                return new eventHubNamespace_1.EventHubNamespace(name, undefined, { urn });
            case "azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule":
                return new eventHubNamespaceAuthorizationRule_1.EventHubNamespaceAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "azure:eventhub/eventhubNamespaceDisasterRecoveryConfig:EventhubNamespaceDisasterRecoveryConfig":
                return new eventhubNamespaceDisasterRecoveryConfig_1.EventhubNamespaceDisasterRecoveryConfig(name, undefined, { urn });
            case "azure:eventhub/namespace:Namespace":
                return new namespace_1.Namespace(name, undefined, { urn });
            case "azure:eventhub/namespaceAuthorizationRule:NamespaceAuthorizationRule":
                return new namespaceAuthorizationRule_1.NamespaceAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey":
                return new namespaceCustomerManagedKey_1.NamespaceCustomerManagedKey(name, undefined, { urn });
            case "azure:eventhub/queue:Queue":
                return new queue_1.Queue(name, undefined, { urn });
            case "azure:eventhub/queueAuthorizationRule:QueueAuthorizationRule":
                return new queueAuthorizationRule_1.QueueAuthorizationRule(name, undefined, { urn });
            case "azure:eventhub/subscription:Subscription":
                return new subscription_1.Subscription(name, undefined, { urn });
            case "azure:eventhub/subscriptionRule:SubscriptionRule":
                return new subscriptionRule_1.SubscriptionRule(name, undefined, { urn });
            case "azure:eventhub/topic:Topic":
                return new topic_1.Topic(name, undefined, { urn });
            case "azure:eventhub/topicAuthorizationRule:TopicAuthorizationRule":
                return new topicAuthorizationRule_1.TopicAuthorizationRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "eventhub/authorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/cluster", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/consumerGroup", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/domain", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventGridTopic", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHub", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubConsumerGroup", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespace", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventHubNamespaceAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventSubscription", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/eventhubNamespaceDisasterRecoveryConfig", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespace", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/namespaceCustomerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/queue", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/queueAuthorizationRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/subscription", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/subscriptionRule", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/topic", _module);
pulumi.runtime.registerResourceModule("azure", "eventhub/topicAuthorizationRule", _module);
//# sourceMappingURL=index.js.map