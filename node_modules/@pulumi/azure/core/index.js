"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./customProvider"));
__export(require("./getClientConfig"));
__export(require("./getResourceGroup"));
__export(require("./getResources"));
__export(require("./getSubscription"));
__export(require("./getSubscriptions"));
__export(require("./getTemplateSpecVersion"));
__export(require("./getUserAssignedIdentity"));
__export(require("./portalTenantConfiguration"));
__export(require("./resourceGroup"));
__export(require("./resourceGroupPolicyAssignment"));
__export(require("./resourceGroupTemplateDeployment"));
__export(require("./resourcePolicyAssignment"));
__export(require("./resourceProviderRegistration"));
__export(require("./subscription"));
__export(require("./subscriptionPolicyAssignment"));
__export(require("./subscriptionTemplateDeployment"));
__export(require("./templateDeployment"));
__export(require("./tenantTemplateDeployment"));
__export(require("./zMixins"));
// Import resources to register:
const customProvider_1 = require("./customProvider");
const portalTenantConfiguration_1 = require("./portalTenantConfiguration");
const resourceGroup_1 = require("./resourceGroup");
const resourceGroupPolicyAssignment_1 = require("./resourceGroupPolicyAssignment");
const resourceGroupTemplateDeployment_1 = require("./resourceGroupTemplateDeployment");
const resourcePolicyAssignment_1 = require("./resourcePolicyAssignment");
const resourceProviderRegistration_1 = require("./resourceProviderRegistration");
const subscription_1 = require("./subscription");
const subscriptionPolicyAssignment_1 = require("./subscriptionPolicyAssignment");
const subscriptionTemplateDeployment_1 = require("./subscriptionTemplateDeployment");
const templateDeployment_1 = require("./templateDeployment");
const tenantTemplateDeployment_1 = require("./tenantTemplateDeployment");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:core/customProvider:CustomProvider":
                return new customProvider_1.CustomProvider(name, undefined, { urn });
            case "azure:core/portalTenantConfiguration:PortalTenantConfiguration":
                return new portalTenantConfiguration_1.PortalTenantConfiguration(name, undefined, { urn });
            case "azure:core/resourceGroup:ResourceGroup":
                return new resourceGroup_1.ResourceGroup(name, undefined, { urn });
            case "azure:core/resourceGroupPolicyAssignment:ResourceGroupPolicyAssignment":
                return new resourceGroupPolicyAssignment_1.ResourceGroupPolicyAssignment(name, undefined, { urn });
            case "azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment":
                return new resourceGroupTemplateDeployment_1.ResourceGroupTemplateDeployment(name, undefined, { urn });
            case "azure:core/resourcePolicyAssignment:ResourcePolicyAssignment":
                return new resourcePolicyAssignment_1.ResourcePolicyAssignment(name, undefined, { urn });
            case "azure:core/resourceProviderRegistration:ResourceProviderRegistration":
                return new resourceProviderRegistration_1.ResourceProviderRegistration(name, undefined, { urn });
            case "azure:core/subscription:Subscription":
                return new subscription_1.Subscription(name, undefined, { urn });
            case "azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment":
                return new subscriptionPolicyAssignment_1.SubscriptionPolicyAssignment(name, undefined, { urn });
            case "azure:core/subscriptionTemplateDeployment:SubscriptionTemplateDeployment":
                return new subscriptionTemplateDeployment_1.SubscriptionTemplateDeployment(name, undefined, { urn });
            case "azure:core/templateDeployment:TemplateDeployment":
                return new templateDeployment_1.TemplateDeployment(name, undefined, { urn });
            case "azure:core/tenantTemplateDeployment:TenantTemplateDeployment":
                return new tenantTemplateDeployment_1.TenantTemplateDeployment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "core/customProvider", _module);
pulumi.runtime.registerResourceModule("azure", "core/portalTenantConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "core/resourceGroup", _module);
pulumi.runtime.registerResourceModule("azure", "core/resourceGroupPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "core/resourceGroupTemplateDeployment", _module);
pulumi.runtime.registerResourceModule("azure", "core/resourcePolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "core/resourceProviderRegistration", _module);
pulumi.runtime.registerResourceModule("azure", "core/subscription", _module);
pulumi.runtime.registerResourceModule("azure", "core/subscriptionPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "core/subscriptionTemplateDeployment", _module);
pulumi.runtime.registerResourceModule("azure", "core/templateDeployment", _module);
pulumi.runtime.registerResourceModule("azure", "core/tenantTemplateDeployment", _module);
//# sourceMappingURL=index.js.map