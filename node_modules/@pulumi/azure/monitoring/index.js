"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./aadDiagnosticSetting"));
__export(require("./actionGroup"));
__export(require("./actionRuleActionGroup"));
__export(require("./actionRuleSuppression"));
__export(require("./activityLogAlert"));
__export(require("./autoscaleSetting"));
__export(require("./diagnosticSetting"));
__export(require("./getActionGroup"));
__export(require("./getDiagnosticCategories"));
__export(require("./getLogProfile"));
__export(require("./getScheduledQueryRulesAlert"));
__export(require("./getScheduledQueryRulesLog"));
__export(require("./logProfile"));
__export(require("./metricAlert"));
__export(require("./scheduledQueryRulesAlert"));
__export(require("./scheduledQueryRulesLog"));
__export(require("./smartDetectorAlertRule"));
// Import resources to register:
const aadDiagnosticSetting_1 = require("./aadDiagnosticSetting");
const actionGroup_1 = require("./actionGroup");
const actionRuleActionGroup_1 = require("./actionRuleActionGroup");
const actionRuleSuppression_1 = require("./actionRuleSuppression");
const activityLogAlert_1 = require("./activityLogAlert");
const autoscaleSetting_1 = require("./autoscaleSetting");
const diagnosticSetting_1 = require("./diagnosticSetting");
const logProfile_1 = require("./logProfile");
const metricAlert_1 = require("./metricAlert");
const scheduledQueryRulesAlert_1 = require("./scheduledQueryRulesAlert");
const scheduledQueryRulesLog_1 = require("./scheduledQueryRulesLog");
const smartDetectorAlertRule_1 = require("./smartDetectorAlertRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:monitoring/aadDiagnosticSetting:AadDiagnosticSetting":
                return new aadDiagnosticSetting_1.AadDiagnosticSetting(name, undefined, { urn });
            case "azure:monitoring/actionGroup:ActionGroup":
                return new actionGroup_1.ActionGroup(name, undefined, { urn });
            case "azure:monitoring/actionRuleActionGroup:ActionRuleActionGroup":
                return new actionRuleActionGroup_1.ActionRuleActionGroup(name, undefined, { urn });
            case "azure:monitoring/actionRuleSuppression:ActionRuleSuppression":
                return new actionRuleSuppression_1.ActionRuleSuppression(name, undefined, { urn });
            case "azure:monitoring/activityLogAlert:ActivityLogAlert":
                return new activityLogAlert_1.ActivityLogAlert(name, undefined, { urn });
            case "azure:monitoring/autoscaleSetting:AutoscaleSetting":
                return new autoscaleSetting_1.AutoscaleSetting(name, undefined, { urn });
            case "azure:monitoring/diagnosticSetting:DiagnosticSetting":
                return new diagnosticSetting_1.DiagnosticSetting(name, undefined, { urn });
            case "azure:monitoring/logProfile:LogProfile":
                return new logProfile_1.LogProfile(name, undefined, { urn });
            case "azure:monitoring/metricAlert:MetricAlert":
                return new metricAlert_1.MetricAlert(name, undefined, { urn });
            case "azure:monitoring/scheduledQueryRulesAlert:ScheduledQueryRulesAlert":
                return new scheduledQueryRulesAlert_1.ScheduledQueryRulesAlert(name, undefined, { urn });
            case "azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog":
                return new scheduledQueryRulesLog_1.ScheduledQueryRulesLog(name, undefined, { urn });
            case "azure:monitoring/smartDetectorAlertRule:SmartDetectorAlertRule":
                return new smartDetectorAlertRule_1.SmartDetectorAlertRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "monitoring/aadDiagnosticSetting", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/actionGroup", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/actionRuleActionGroup", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/actionRuleSuppression", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/activityLogAlert", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/autoscaleSetting", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/diagnosticSetting", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/logProfile", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/metricAlert", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/scheduledQueryRulesAlert", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/scheduledQueryRulesLog", _module);
pulumi.runtime.registerResourceModule("azure", "monitoring/smartDetectorAlertRule", _module);
//# sourceMappingURL=index.js.map