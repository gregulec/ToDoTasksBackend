"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./getCluster"));
__export(require("./hadoopCluster"));
__export(require("./hbaseCluster"));
__export(require("./interactiveQueryCluster"));
__export(require("./kafkaCluster"));
__export(require("./mlservicesCluster"));
__export(require("./rserverCluster"));
__export(require("./sparkCluster"));
__export(require("./stormCluster"));
// Import resources to register:
const hbaseCluster_1 = require("./hbaseCluster");
const hadoopCluster_1 = require("./hadoopCluster");
const interactiveQueryCluster_1 = require("./interactiveQueryCluster");
const kafkaCluster_1 = require("./kafkaCluster");
const mlservicesCluster_1 = require("./mlservicesCluster");
const rserverCluster_1 = require("./rserverCluster");
const sparkCluster_1 = require("./sparkCluster");
const stormCluster_1 = require("./stormCluster");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:hdinsight/hBaseCluster:HBaseCluster":
                return new hbaseCluster_1.HBaseCluster(name, undefined, { urn });
            case "azure:hdinsight/hadoopCluster:HadoopCluster":
                return new hadoopCluster_1.HadoopCluster(name, undefined, { urn });
            case "azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster":
                return new interactiveQueryCluster_1.InteractiveQueryCluster(name, undefined, { urn });
            case "azure:hdinsight/kafkaCluster:KafkaCluster":
                return new kafkaCluster_1.KafkaCluster(name, undefined, { urn });
            case "azure:hdinsight/mLServicesCluster:MLServicesCluster":
                return new mlservicesCluster_1.MLServicesCluster(name, undefined, { urn });
            case "azure:hdinsight/rServerCluster:RServerCluster":
                return new rserverCluster_1.RServerCluster(name, undefined, { urn });
            case "azure:hdinsight/sparkCluster:SparkCluster":
                return new sparkCluster_1.SparkCluster(name, undefined, { urn });
            case "azure:hdinsight/stormCluster:StormCluster":
                return new stormCluster_1.StormCluster(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "hdinsight/hBaseCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/hadoopCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/interactiveQueryCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/kafkaCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/mLServicesCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/rServerCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/sparkCluster", _module);
pulumi.runtime.registerResourceModule("azure", "hdinsight/stormCluster", _module);
//# sourceMappingURL=index.js.map