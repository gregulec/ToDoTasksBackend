"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./activeDirectoryAdministrator"));
__export(require("./database"));
__export(require("./elasticPool"));
__export(require("./failoverGroup"));
__export(require("./firewallRule"));
__export(require("./getDatabase"));
__export(require("./getServer"));
__export(require("./sqlServer"));
__export(require("./virtualNetworkRule"));
// Import resources to register:
const activeDirectoryAdministrator_1 = require("./activeDirectoryAdministrator");
const database_1 = require("./database");
const elasticPool_1 = require("./elasticPool");
const failoverGroup_1 = require("./failoverGroup");
const firewallRule_1 = require("./firewallRule");
const sqlServer_1 = require("./sqlServer");
const virtualNetworkRule_1 = require("./virtualNetworkRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:sql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new activeDirectoryAdministrator_1.ActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:sql/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure:sql/elasticPool:ElasticPool":
                return new elasticPool_1.ElasticPool(name, undefined, { urn });
            case "azure:sql/failoverGroup:FailoverGroup":
                return new failoverGroup_1.FailoverGroup(name, undefined, { urn });
            case "azure:sql/firewallRule:FirewallRule":
                return new firewallRule_1.FirewallRule(name, undefined, { urn });
            case "azure:sql/sqlServer:SqlServer":
                return new sqlServer_1.SqlServer(name, undefined, { urn });
            case "azure:sql/virtualNetworkRule:VirtualNetworkRule":
                return new virtualNetworkRule_1.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "sql/activeDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "sql/database", _module);
pulumi.runtime.registerResourceModule("azure", "sql/elasticPool", _module);
pulumi.runtime.registerResourceModule("azure", "sql/failoverGroup", _module);
pulumi.runtime.registerResourceModule("azure", "sql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "sql/sqlServer", _module);
pulumi.runtime.registerResourceModule("azure", "sql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map