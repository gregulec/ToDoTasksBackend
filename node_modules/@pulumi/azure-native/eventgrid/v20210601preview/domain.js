"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * EventGrid Domain.
 */
class Domain extends pulumi.CustomResource {
    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b, _c, _d, _e;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["autoCreateTopicWithFirstSubscription"] = (_a = (args ? args.autoCreateTopicWithFirstSubscription : undefined)) !== null && _a !== void 0 ? _a : true;
            inputs["autoDeleteTopicWithLastSubscription"] = (_b = (args ? args.autoDeleteTopicWithLastSubscription : undefined)) !== null && _b !== void 0 ? _b : true;
            inputs["disableLocalAuth"] = (_c = (args ? args.disableLocalAuth : undefined)) !== null && _c !== void 0 ? _c : false;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["inboundIpRules"] = args ? args.inboundIpRules : undefined;
            inputs["inputSchema"] = (_d = (args ? args.inputSchema : undefined)) !== null && _d !== void 0 ? _d : "EventGridSchema";
            inputs["inputSchemaMapping"] = args ? args.inputSchemaMapping : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["publicNetworkAccess"] = (_e = (args ? args.publicNetworkAccess : undefined)) !== null && _e !== void 0 ? _e : "Enabled";
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["endpoint"] = undefined /*out*/;
            inputs["metricResourceId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["autoCreateTopicWithFirstSubscription"] = undefined /*out*/;
            inputs["autoDeleteTopicWithLastSubscription"] = undefined /*out*/;
            inputs["disableLocalAuth"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["inboundIpRules"] = undefined /*out*/;
            inputs["inputSchema"] = undefined /*out*/;
            inputs["inputSchemaMapping"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["metricResourceId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicNetworkAccess"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:eventgrid/v20210601preview:Domain" }, { type: "azure-native:eventgrid:Domain" }, { type: "azure-nextgen:eventgrid:Domain" }, { type: "azure-native:eventgrid/v20180915preview:Domain" }, { type: "azure-nextgen:eventgrid/v20180915preview:Domain" }, { type: "azure-native:eventgrid/v20190201preview:Domain" }, { type: "azure-nextgen:eventgrid/v20190201preview:Domain" }, { type: "azure-native:eventgrid/v20190601:Domain" }, { type: "azure-nextgen:eventgrid/v20190601:Domain" }, { type: "azure-native:eventgrid/v20200101preview:Domain" }, { type: "azure-nextgen:eventgrid/v20200101preview:Domain" }, { type: "azure-native:eventgrid/v20200401preview:Domain" }, { type: "azure-nextgen:eventgrid/v20200401preview:Domain" }, { type: "azure-native:eventgrid/v20200601:Domain" }, { type: "azure-nextgen:eventgrid/v20200601:Domain" }, { type: "azure-native:eventgrid/v20201015preview:Domain" }, { type: "azure-nextgen:eventgrid/v20201015preview:Domain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Domain.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Domain(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'azure-native:eventgrid/v20210601preview:Domain';
//# sourceMappingURL=domain.js.map