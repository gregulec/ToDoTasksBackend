"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartnerTopicEventSubscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Event Subscription
 * API Version: 2020-04-01-preview.
 */
class PartnerTopicEventSubscription extends pulumi.CustomResource {
    /**
     * Create a PartnerTopicEventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.partnerTopicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partnerTopicName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["deadLetterDestination"] = args ? args.deadLetterDestination : undefined;
            inputs["deadLetterWithResourceIdentity"] = args ? args.deadLetterWithResourceIdentity : undefined;
            inputs["deliveryWithResourceIdentity"] = args ? args.deliveryWithResourceIdentity : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["eventDeliverySchema"] = (_a = (args ? args.eventDeliverySchema : undefined)) !== null && _a !== void 0 ? _a : "EventGridSchema";
            inputs["eventSubscriptionName"] = args ? args.eventSubscriptionName : undefined;
            inputs["expirationTimeUtc"] = args ? args.expirationTimeUtc : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["partnerTopicName"] = args ? args.partnerTopicName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retryPolicy"] = args ? args.retryPolicy : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["topic"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["deadLetterDestination"] = undefined /*out*/;
            inputs["deadLetterWithResourceIdentity"] = undefined /*out*/;
            inputs["deliveryWithResourceIdentity"] = undefined /*out*/;
            inputs["destination"] = undefined /*out*/;
            inputs["eventDeliverySchema"] = undefined /*out*/;
            inputs["expirationTimeUtc"] = undefined /*out*/;
            inputs["filter"] = undefined /*out*/;
            inputs["labels"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["retryPolicy"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["topic"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:eventgrid:PartnerTopicEventSubscription" }, { type: "azure-native:eventgrid/v20200401preview:PartnerTopicEventSubscription" }, { type: "azure-nextgen:eventgrid/v20200401preview:PartnerTopicEventSubscription" }, { type: "azure-native:eventgrid/v20201015preview:PartnerTopicEventSubscription" }, { type: "azure-nextgen:eventgrid/v20201015preview:PartnerTopicEventSubscription" }, { type: "azure-native:eventgrid/v20210601preview:PartnerTopicEventSubscription" }, { type: "azure-nextgen:eventgrid/v20210601preview:PartnerTopicEventSubscription" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PartnerTopicEventSubscription.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing PartnerTopicEventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new PartnerTopicEventSubscription(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PartnerTopicEventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerTopicEventSubscription.__pulumiType;
    }
}
exports.PartnerTopicEventSubscription = PartnerTopicEventSubscription;
/** @internal */
PartnerTopicEventSubscription.__pulumiType = 'azure-native:eventgrid:PartnerTopicEventSubscription';
//# sourceMappingURL=partnerTopicEventSubscription.js.map