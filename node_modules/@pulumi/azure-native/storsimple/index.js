"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170601 = exports.v20161001 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./accessControlRecord"), exports);
__exportStar(require("./backupPolicy"), exports);
__exportStar(require("./backupSchedule"), exports);
__exportStar(require("./bandwidthSetting"), exports);
__exportStar(require("./getAccessControlRecord"), exports);
__exportStar(require("./getBackupPolicy"), exports);
__exportStar(require("./getBackupSchedule"), exports);
__exportStar(require("./getBandwidthSetting"), exports);
__exportStar(require("./getManager"), exports);
__exportStar(require("./getManagerDevicePublicEncryptionKey"), exports);
__exportStar(require("./getManagerExtendedInfo"), exports);
__exportStar(require("./getStorageAccountCredential"), exports);
__exportStar(require("./getVolume"), exports);
__exportStar(require("./getVolumeContainer"), exports);
__exportStar(require("./listDeviceFailoverSets"), exports);
__exportStar(require("./listDeviceFailoverTars"), exports);
__exportStar(require("./listManagerActivationKey"), exports);
__exportStar(require("./listManagerPublicEncryptionKey"), exports);
__exportStar(require("./manager"), exports);
__exportStar(require("./managerExtendedInfo"), exports);
__exportStar(require("./storageAccountCredential"), exports);
__exportStar(require("./volume"), exports);
__exportStar(require("./volumeContainer"), exports);
// Export enums:
__exportStar(require("../types/enums/storsimple"), exports);
// Export sub-modules:
const v20161001 = require("./v20161001");
exports.v20161001 = v20161001;
const v20170601 = require("./v20170601");
exports.v20170601 = v20170601;
// Import resources to register:
const accessControlRecord_1 = require("./accessControlRecord");
const backupPolicy_1 = require("./backupPolicy");
const backupSchedule_1 = require("./backupSchedule");
const bandwidthSetting_1 = require("./bandwidthSetting");
const manager_1 = require("./manager");
const managerExtendedInfo_1 = require("./managerExtendedInfo");
const storageAccountCredential_1 = require("./storageAccountCredential");
const volume_1 = require("./volume");
const volumeContainer_1 = require("./volumeContainer");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:storsimple:AccessControlRecord":
                return new accessControlRecord_1.AccessControlRecord(name, undefined, { urn });
            case "azure-native:storsimple:BackupPolicy":
                return new backupPolicy_1.BackupPolicy(name, undefined, { urn });
            case "azure-native:storsimple:BackupSchedule":
                return new backupSchedule_1.BackupSchedule(name, undefined, { urn });
            case "azure-native:storsimple:BandwidthSetting":
                return new bandwidthSetting_1.BandwidthSetting(name, undefined, { urn });
            case "azure-native:storsimple:Manager":
                return new manager_1.Manager(name, undefined, { urn });
            case "azure-native:storsimple:ManagerExtendedInfo":
                return new managerExtendedInfo_1.ManagerExtendedInfo(name, undefined, { urn });
            case "azure-native:storsimple:StorageAccountCredential":
                return new storageAccountCredential_1.StorageAccountCredential(name, undefined, { urn });
            case "azure-native:storsimple:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            case "azure-native:storsimple:VolumeContainer":
                return new volumeContainer_1.VolumeContainer(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "storsimple", _module);
//# sourceMappingURL=index.js.map