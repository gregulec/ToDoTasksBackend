"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./accessControlRecord"), exports);
__exportStar(require("./backupScheduleGroup"), exports);
__exportStar(require("./chapSetting"), exports);
__exportStar(require("./fileServer"), exports);
__exportStar(require("./fileShare"), exports);
__exportStar(require("./getAccessControlRecord"), exports);
__exportStar(require("./getBackupScheduleGroup"), exports);
__exportStar(require("./getChapSetting"), exports);
__exportStar(require("./getFileServer"), exports);
__exportStar(require("./getFileShare"), exports);
__exportStar(require("./getIscsiDisk"), exports);
__exportStar(require("./getIscsiServer"), exports);
__exportStar(require("./getManager"), exports);
__exportStar(require("./getManagerEncryptionKey"), exports);
__exportStar(require("./getManagerExtendedInfo"), exports);
__exportStar(require("./getStorageAccountCredential"), exports);
__exportStar(require("./getStorageDomain"), exports);
__exportStar(require("./iscsiDisk"), exports);
__exportStar(require("./iscsiServer"), exports);
__exportStar(require("./manager"), exports);
__exportStar(require("./managerExtendedInfo"), exports);
__exportStar(require("./storageAccountCredential"), exports);
__exportStar(require("./storageDomain"), exports);
// Export enums:
__exportStar(require("../../types/enums/storsimple/v20161001"), exports);
// Import resources to register:
const accessControlRecord_1 = require("./accessControlRecord");
const backupScheduleGroup_1 = require("./backupScheduleGroup");
const chapSetting_1 = require("./chapSetting");
const fileServer_1 = require("./fileServer");
const fileShare_1 = require("./fileShare");
const iscsiDisk_1 = require("./iscsiDisk");
const iscsiServer_1 = require("./iscsiServer");
const manager_1 = require("./manager");
const managerExtendedInfo_1 = require("./managerExtendedInfo");
const storageAccountCredential_1 = require("./storageAccountCredential");
const storageDomain_1 = require("./storageDomain");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:storsimple/v20161001:AccessControlRecord":
                return new accessControlRecord_1.AccessControlRecord(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:BackupScheduleGroup":
                return new backupScheduleGroup_1.BackupScheduleGroup(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:ChapSetting":
                return new chapSetting_1.ChapSetting(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:FileServer":
                return new fileServer_1.FileServer(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:FileShare":
                return new fileShare_1.FileShare(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:IscsiDisk":
                return new iscsiDisk_1.IscsiDisk(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:IscsiServer":
                return new iscsiServer_1.IscsiServer(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:Manager":
                return new manager_1.Manager(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:ManagerExtendedInfo":
                return new managerExtendedInfo_1.ManagerExtendedInfo(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:StorageAccountCredential":
                return new storageAccountCredential_1.StorageAccountCredential(name, undefined, { urn });
            case "azure-native:storsimple/v20161001:StorageDomain":
                return new storageDomain_1.StorageDomain(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "storsimple/v20161001", _module);
//# sourceMappingURL=index.js.map