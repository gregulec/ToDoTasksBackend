"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MachineLearningDatastore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Machine Learning datastore object wrapped into ARM resource envelope.
 */
class MachineLearningDatastore extends pulumi.CustomResource {
    /**
     * Create a MachineLearningDatastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dataStoreType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStoreType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["accountKey"] = args ? args.accountKey : undefined;
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["adlsResourceGroup"] = args ? args.adlsResourceGroup : undefined;
            inputs["adlsSubscriptionId"] = args ? args.adlsSubscriptionId : undefined;
            inputs["authorityUrl"] = args ? args.authorityUrl : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["dataStoreType"] = args ? args.dataStoreType : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["datastoreName"] = args ? args.datastoreName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["enforceSSL"] = (_a = (args ? args.enforceSSL : undefined)) !== null && _a !== void 0 ? _a : true;
            inputs["fileSystem"] = args ? args.fileSystem : undefined;
            inputs["includeSecret"] = (_b = (args ? args.includeSecret : undefined)) !== null && _b !== void 0 ? _b : true;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceUrl"] = args ? args.resourceUrl : undefined;
            inputs["sasToken"] = args ? args.sasToken : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["shareName"] = args ? args.shareName : undefined;
            inputs["skipValidation"] = args ? args.skipValidation : undefined;
            inputs["storageAccountResourceGroup"] = args ? args.storageAccountResourceGroup : undefined;
            inputs["storageAccountSubscriptionId"] = args ? args.storageAccountSubscriptionId : undefined;
            inputs["storeName"] = args ? args.storeName : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["userId"] = args ? args.userId : undefined;
            inputs["userName"] = args ? args.userName : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["workspaceSystemAssignedIdentity"] = args ? args.workspaceSystemAssignedIdentity : undefined;
            inputs["identity"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["properties"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["identity"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["properties"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:machinelearningservices/v20200501preview:MachineLearningDatastore" }, { type: "azure-native:machinelearningservices:MachineLearningDatastore" }, { type: "azure-nextgen:machinelearningservices:MachineLearningDatastore" }, { type: "azure-native:machinelearningservices/v20210301preview:MachineLearningDatastore" }, { type: "azure-nextgen:machinelearningservices/v20210301preview:MachineLearningDatastore" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MachineLearningDatastore.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MachineLearningDatastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new MachineLearningDatastore(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MachineLearningDatastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineLearningDatastore.__pulumiType;
    }
}
exports.MachineLearningDatastore = MachineLearningDatastore;
/** @internal */
MachineLearningDatastore.__pulumiType = 'azure-native:machinelearningservices/v20200501preview:MachineLearningDatastore';
//# sourceMappingURL=machineLearningDatastore.js.map