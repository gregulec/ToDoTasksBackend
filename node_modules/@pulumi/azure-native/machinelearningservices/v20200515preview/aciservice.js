"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACIService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Machine Learning service object wrapped into ARM resource envelope.
 */
class ACIService extends pulumi.CustomResource {
    /**
     * Create a ACIService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b, _c;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.computeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            inputs["appInsightsEnabled"] = (_a = (args ? args.appInsightsEnabled : undefined)) !== null && _a !== void 0 ? _a : false;
            inputs["authEnabled"] = (_b = (args ? args.authEnabled : undefined)) !== null && _b !== void 0 ? _b : false;
            inputs["cname"] = args ? args.cname : undefined;
            inputs["computeType"] = "ACI";
            inputs["containerResourceRequirements"] = args ? args.containerResourceRequirements : undefined;
            inputs["dataCollection"] = args ? args.dataCollection : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsNameLabel"] = args ? args.dnsNameLabel : undefined;
            inputs["encryptionProperties"] = args ? args.encryptionProperties : undefined;
            inputs["environmentImageRequest"] = args ? args.environmentImageRequest : undefined;
            inputs["keys"] = args ? args.keys : undefined;
            inputs["kvTags"] = args ? args.kvTags : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["properties"] = args ? args.properties : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            inputs["sslEnabled"] = (_c = (args ? args.sslEnabled : undefined)) !== null && _c !== void 0 ? _c : false;
            inputs["sslKey"] = args ? args.sslKey : undefined;
            inputs["vnetConfiguration"] = args ? args.vnetConfiguration : undefined;
            inputs["workspaceName"] = args ? args.workspaceName : undefined;
            inputs["identity"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["identity"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["properties"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:machinelearningservices/v20200515preview:ACIService" }, { type: "azure-native:machinelearningservices:ACIService" }, { type: "azure-nextgen:machinelearningservices:ACIService" }, { type: "azure-native:machinelearningservices/v20200501preview:ACIService" }, { type: "azure-nextgen:machinelearningservices/v20200501preview:ACIService" }, { type: "azure-native:machinelearningservices/v20200901preview:ACIService" }, { type: "azure-nextgen:machinelearningservices/v20200901preview:ACIService" }, { type: "azure-native:machinelearningservices/v20210101:ACIService" }, { type: "azure-nextgen:machinelearningservices/v20210101:ACIService" }, { type: "azure-native:machinelearningservices/v20210401:ACIService" }, { type: "azure-nextgen:machinelearningservices/v20210401:ACIService" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ACIService.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ACIService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ACIService(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ACIService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ACIService.__pulumiType;
    }
}
exports.ACIService = ACIService;
/** @internal */
ACIService.__pulumiType = 'azure-native:machinelearningservices/v20200515preview:ACIService';
//# sourceMappingURL=aciservice.js.map