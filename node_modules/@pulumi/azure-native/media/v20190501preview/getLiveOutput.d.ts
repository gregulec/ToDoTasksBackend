import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * The Live Output.
 */
export declare function getLiveOutput(args: GetLiveOutputArgs, opts?: pulumi.InvokeOptions): Promise<GetLiveOutputResult>;
export interface GetLiveOutputArgs {
    /**
     * The Media Services account name.
     */
    accountName: string;
    /**
     * The name of the Live Event.
     */
    liveEventName: string;
    /**
     * The name of the Live Output.
     */
    liveOutputName: string;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: string;
}
/**
 * The Live Output.
 */
export interface GetLiveOutputResult {
    /**
     * ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
     */
    readonly archiveWindowLength: string;
    /**
     * The asset name.
     */
    readonly assetName: string;
    /**
     * The exact time the Live Output was created.
     */
    readonly created: string;
    /**
     * The description of the Live Output.
     */
    readonly description?: string;
    /**
     * The HLS configuration.
     */
    readonly hls?: outputs.media.v20190501preview.HlsResponse;
    /**
     * Fully qualified resource ID for the resource.
     */
    readonly id: string;
    /**
     * The exact time the Live Output was last modified.
     */
    readonly lastModified: string;
    /**
     * The manifest file name.  If not provided, the service will generate one automatically.
     */
    readonly manifestName?: string;
    /**
     * The name of the resource.
     */
    readonly name: string;
    /**
     * The output snapshot time.
     */
    readonly outputSnapTime?: number;
    /**
     * The provisioning state of the Live Output.
     */
    readonly provisioningState: string;
    /**
     * The resource state of the Live Output.
     */
    readonly resourceState: string;
    /**
     * The type of the resource.
     */
    readonly type: string;
}
