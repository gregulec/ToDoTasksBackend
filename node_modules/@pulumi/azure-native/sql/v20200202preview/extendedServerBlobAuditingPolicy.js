"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendedServerBlobAuditingPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * An extended server blob auditing policy.
 */
class ExtendedServerBlobAuditingPolicy extends pulumi.CustomResource {
    /**
     * Create a ExtendedServerBlobAuditingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            inputs["auditActionsAndGroups"] = args ? args.auditActionsAndGroups : undefined;
            inputs["blobAuditingPolicyName"] = args ? args.blobAuditingPolicyName : undefined;
            inputs["isAzureMonitorTargetEnabled"] = args ? args.isAzureMonitorTargetEnabled : undefined;
            inputs["isDevopsAuditEnabled"] = args ? args.isDevopsAuditEnabled : undefined;
            inputs["isStorageSecondaryKeyInUse"] = args ? args.isStorageSecondaryKeyInUse : undefined;
            inputs["predicateExpression"] = args ? args.predicateExpression : undefined;
            inputs["queueDelayMs"] = args ? args.queueDelayMs : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["retentionDays"] = args ? args.retentionDays : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["storageAccountAccessKey"] = args ? args.storageAccountAccessKey : undefined;
            inputs["storageAccountSubscriptionId"] = args ? args.storageAccountSubscriptionId : undefined;
            inputs["storageEndpoint"] = args ? args.storageEndpoint : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["auditActionsAndGroups"] = undefined /*out*/;
            inputs["isAzureMonitorTargetEnabled"] = undefined /*out*/;
            inputs["isDevopsAuditEnabled"] = undefined /*out*/;
            inputs["isStorageSecondaryKeyInUse"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["predicateExpression"] = undefined /*out*/;
            inputs["queueDelayMs"] = undefined /*out*/;
            inputs["retentionDays"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["storageAccountSubscriptionId"] = undefined /*out*/;
            inputs["storageEndpoint"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:sql/v20200202preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-native:sql:ExtendedServerBlobAuditingPolicy" }, { type: "azure-nextgen:sql:ExtendedServerBlobAuditingPolicy" }, { type: "azure-native:sql/v20170301preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20170301preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-native:sql/v20200801preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20200801preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-native:sql/v20201101preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20201101preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-native:sql/v20210201preview:ExtendedServerBlobAuditingPolicy" }, { type: "azure-nextgen:sql/v20210201preview:ExtendedServerBlobAuditingPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ExtendedServerBlobAuditingPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ExtendedServerBlobAuditingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ExtendedServerBlobAuditingPolicy(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ExtendedServerBlobAuditingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtendedServerBlobAuditingPolicy.__pulumiType;
    }
}
exports.ExtendedServerBlobAuditingPolicy = ExtendedServerBlobAuditingPolicy;
/** @internal */
ExtendedServerBlobAuditingPolicy.__pulumiType = 'azure-native:sql/v20200202preview:ExtendedServerBlobAuditingPolicy';
//# sourceMappingURL=extendedServerBlobAuditingPolicy.js.map