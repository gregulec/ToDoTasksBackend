"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * A database resource.
 */
class Database extends pulumi.CustomResource {
    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            inputs["autoPauseDelay"] = args ? args.autoPauseDelay : undefined;
            inputs["catalogCollation"] = args ? args.catalogCollation : undefined;
            inputs["collation"] = args ? args.collation : undefined;
            inputs["createMode"] = args ? args.createMode : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["elasticPoolId"] = args ? args.elasticPoolId : undefined;
            inputs["licenseType"] = args ? args.licenseType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["longTermRetentionBackupResourceId"] = args ? args.longTermRetentionBackupResourceId : undefined;
            inputs["maxSizeBytes"] = args ? args.maxSizeBytes : undefined;
            inputs["minCapacity"] = args ? args.minCapacity : undefined;
            inputs["readReplicaCount"] = args ? args.readReplicaCount : undefined;
            inputs["readScale"] = args ? args.readScale : undefined;
            inputs["recoverableDatabaseId"] = args ? args.recoverableDatabaseId : undefined;
            inputs["recoveryServicesRecoveryPointId"] = args ? args.recoveryServicesRecoveryPointId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["restorableDroppedDatabaseId"] = args ? args.restorableDroppedDatabaseId : undefined;
            inputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            inputs["sampleName"] = args ? args.sampleName : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["sourceDatabaseDeletionDate"] = args ? args.sourceDatabaseDeletionDate : undefined;
            inputs["sourceDatabaseId"] = args ? args.sourceDatabaseId : undefined;
            inputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
            inputs["creationDate"] = undefined /*out*/;
            inputs["currentServiceObjectiveName"] = undefined /*out*/;
            inputs["currentSku"] = undefined /*out*/;
            inputs["databaseId"] = undefined /*out*/;
            inputs["defaultSecondaryLocation"] = undefined /*out*/;
            inputs["earliestRestoreDate"] = undefined /*out*/;
            inputs["failoverGroupId"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["managedBy"] = undefined /*out*/;
            inputs["maxLogSizeBytes"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pausedDate"] = undefined /*out*/;
            inputs["requestedServiceObjectiveName"] = undefined /*out*/;
            inputs["resumedDate"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["autoPauseDelay"] = undefined /*out*/;
            inputs["catalogCollation"] = undefined /*out*/;
            inputs["collation"] = undefined /*out*/;
            inputs["creationDate"] = undefined /*out*/;
            inputs["currentServiceObjectiveName"] = undefined /*out*/;
            inputs["currentSku"] = undefined /*out*/;
            inputs["databaseId"] = undefined /*out*/;
            inputs["defaultSecondaryLocation"] = undefined /*out*/;
            inputs["earliestRestoreDate"] = undefined /*out*/;
            inputs["elasticPoolId"] = undefined /*out*/;
            inputs["failoverGroupId"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["licenseType"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["managedBy"] = undefined /*out*/;
            inputs["maxLogSizeBytes"] = undefined /*out*/;
            inputs["maxSizeBytes"] = undefined /*out*/;
            inputs["minCapacity"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pausedDate"] = undefined /*out*/;
            inputs["readReplicaCount"] = undefined /*out*/;
            inputs["readScale"] = undefined /*out*/;
            inputs["requestedServiceObjectiveName"] = undefined /*out*/;
            inputs["resumedDate"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["storageAccountType"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["zoneRedundant"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:sql/v20200202preview:Database" }, { type: "azure-native:sql:Database" }, { type: "azure-nextgen:sql:Database" }, { type: "azure-native:sql/v20140401:Database" }, { type: "azure-nextgen:sql/v20140401:Database" }, { type: "azure-native:sql/v20170301preview:Database" }, { type: "azure-nextgen:sql/v20170301preview:Database" }, { type: "azure-native:sql/v20171001preview:Database" }, { type: "azure-nextgen:sql/v20171001preview:Database" }, { type: "azure-native:sql/v20190601preview:Database" }, { type: "azure-nextgen:sql/v20190601preview:Database" }, { type: "azure-native:sql/v20200801preview:Database" }, { type: "azure-nextgen:sql/v20200801preview:Database" }, { type: "azure-native:sql/v20201101preview:Database" }, { type: "azure-nextgen:sql/v20201101preview:Database" }, { type: "azure-native:sql/v20210201preview:Database" }, { type: "azure-nextgen:sql/v20210201preview:Database" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Database.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Database(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }
}
exports.Database = Database;
/** @internal */
Database.__pulumiType = 'azure-native:sql/v20200202preview:Database';
//# sourceMappingURL=database.js.map