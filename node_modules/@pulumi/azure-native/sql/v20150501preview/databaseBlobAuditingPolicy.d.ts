import * as pulumi from "@pulumi/pulumi";
import { enums } from "../../types";
/**
 * A database blob auditing policy.
 */
export declare class DatabaseBlobAuditingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseBlobAuditingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatabaseBlobAuditingPolicy;
    /**
     * Returns true if the given object is an instance of DatabaseBlobAuditingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DatabaseBlobAuditingPolicy;
    /**
     * Specifies the Actions and Actions-Groups to audit.
     */
    readonly auditActionsAndGroups: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether storageAccountAccessKey value is the storage’s secondary key.
     */
    readonly isStorageSecondaryKeyInUse: pulumi.Output<boolean | undefined>;
    /**
     * Resource kind.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * Resource name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Specifies the number of days to keep in the audit logs.
     */
    readonly retentionDays: pulumi.Output<number | undefined>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    readonly state: pulumi.Output<string>;
    /**
     * Specifies the blob storage subscription Id.
     */
    readonly storageAccountSubscriptionId: pulumi.Output<string | undefined>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
     */
    readonly storageEndpoint: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a DatabaseBlobAuditingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseBlobAuditingPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DatabaseBlobAuditingPolicy resource.
 */
export interface DatabaseBlobAuditingPolicyArgs {
    /**
     * Specifies the Actions and Actions-Groups to audit.
     */
    auditActionsAndGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the blob auditing policy.
     */
    blobAuditingPolicyName?: pulumi.Input<string>;
    /**
     * The name of the database for which the blob auditing policy will be defined.
     */
    databaseName: pulumi.Input<string>;
    /**
     * Specifies whether storageAccountAccessKey value is the storage’s secondary key.
     */
    isStorageSecondaryKeyInUse?: pulumi.Input<boolean>;
    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Specifies the number of days to keep in the audit logs.
     */
    retentionDays?: pulumi.Input<number>;
    /**
     * The name of the server.
     */
    serverName: pulumi.Input<string>;
    /**
     * Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.
     */
    state: pulumi.Input<enums.sql.v20150501preview.BlobAuditingPolicyState>;
    /**
     * Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * Specifies the blob storage subscription Id.
     */
    storageAccountSubscriptionId?: pulumi.Input<string>;
    /**
     * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
     */
    storageEndpoint?: pulumi.Input<string>;
}
