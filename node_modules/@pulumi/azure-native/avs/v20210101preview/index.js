"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./addon"), exports);
__exportStar(require("./authorization"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./datastore"), exports);
__exportStar(require("./getAddon"), exports);
__exportStar(require("./getAuthorization"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getDatastore"), exports);
__exportStar(require("./getGlobalReachConnection"), exports);
__exportStar(require("./getHcxEnterpriseSite"), exports);
__exportStar(require("./getPrivateCloud"), exports);
__exportStar(require("./getWorkloadNetworkDhcp"), exports);
__exportStar(require("./getWorkloadNetworkDnsService"), exports);
__exportStar(require("./getWorkloadNetworkDnsZone"), exports);
__exportStar(require("./getWorkloadNetworkPortMirroring"), exports);
__exportStar(require("./getWorkloadNetworkSegment"), exports);
__exportStar(require("./getWorkloadNetworkVMGroup"), exports);
__exportStar(require("./globalReachConnection"), exports);
__exportStar(require("./hcxEnterpriseSite"), exports);
__exportStar(require("./listPrivateCloudAdminCredentials"), exports);
__exportStar(require("./privateCloud"), exports);
__exportStar(require("./workloadNetworkDhcp"), exports);
__exportStar(require("./workloadNetworkDnsService"), exports);
__exportStar(require("./workloadNetworkDnsZone"), exports);
__exportStar(require("./workloadNetworkPortMirroring"), exports);
__exportStar(require("./workloadNetworkSegment"), exports);
__exportStar(require("./workloadNetworkVMGroup"), exports);
// Export enums:
__exportStar(require("../../types/enums/avs/v20210101preview"), exports);
// Import resources to register:
const addon_1 = require("./addon");
const authorization_1 = require("./authorization");
const cluster_1 = require("./cluster");
const datastore_1 = require("./datastore");
const globalReachConnection_1 = require("./globalReachConnection");
const hcxEnterpriseSite_1 = require("./hcxEnterpriseSite");
const privateCloud_1 = require("./privateCloud");
const workloadNetworkDhcp_1 = require("./workloadNetworkDhcp");
const workloadNetworkDnsService_1 = require("./workloadNetworkDnsService");
const workloadNetworkDnsZone_1 = require("./workloadNetworkDnsZone");
const workloadNetworkPortMirroring_1 = require("./workloadNetworkPortMirroring");
const workloadNetworkSegment_1 = require("./workloadNetworkSegment");
const workloadNetworkVMGroup_1 = require("./workloadNetworkVMGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:avs/v20210101preview:Addon":
                return new addon_1.Addon(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:Authorization":
                return new authorization_1.Authorization(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:Datastore":
                return new datastore_1.Datastore(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:GlobalReachConnection":
                return new globalReachConnection_1.GlobalReachConnection(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:HcxEnterpriseSite":
                return new hcxEnterpriseSite_1.HcxEnterpriseSite(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:PrivateCloud":
                return new privateCloud_1.PrivateCloud(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkDhcp":
                return new workloadNetworkDhcp_1.WorkloadNetworkDhcp(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkDnsService":
                return new workloadNetworkDnsService_1.WorkloadNetworkDnsService(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkDnsZone":
                return new workloadNetworkDnsZone_1.WorkloadNetworkDnsZone(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkPortMirroring":
                return new workloadNetworkPortMirroring_1.WorkloadNetworkPortMirroring(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkSegment":
                return new workloadNetworkSegment_1.WorkloadNetworkSegment(name, undefined, { urn });
            case "azure-native:avs/v20210101preview:WorkloadNetworkVMGroup":
                return new workloadNetworkVMGroup_1.WorkloadNetworkVMGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "avs/v20210101preview", _module);
//# sourceMappingURL=index.js.map