"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyAssignmentArtifact = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Blueprint artifact that applies a Policy assignment.
 * API Version: 2018-11-01-preview.
 */
class PolicyAssignmentArtifact extends pulumi.CustomResource {
    /**
     * Create a PolicyAssignmentArtifact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.blueprintName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintName'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.policyDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDefinitionId'");
            }
            if ((!args || args.resourceScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceScope'");
            }
            inputs["artifactName"] = args ? args.artifactName : undefined;
            inputs["blueprintName"] = args ? args.blueprintName : undefined;
            inputs["dependsOn"] = args ? args.dependsOn : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["kind"] = "policyAssignment";
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["policyDefinitionId"] = args ? args.policyDefinitionId : undefined;
            inputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            inputs["resourceScope"] = args ? args.resourceScope : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["dependsOn"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["parameters"] = undefined /*out*/;
            inputs["policyDefinitionId"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:blueprint:PolicyAssignmentArtifact" }, { type: "azure-native:blueprint/v20181101preview:PolicyAssignmentArtifact" }, { type: "azure-nextgen:blueprint/v20181101preview:PolicyAssignmentArtifact" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PolicyAssignmentArtifact.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing PolicyAssignmentArtifact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new PolicyAssignmentArtifact(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PolicyAssignmentArtifact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyAssignmentArtifact.__pulumiType;
    }
}
exports.PolicyAssignmentArtifact = PolicyAssignmentArtifact;
/** @internal */
PolicyAssignmentArtifact.__pulumiType = 'azure-native:blueprint:PolicyAssignmentArtifact';
//# sourceMappingURL=policyAssignmentArtifact.js.map