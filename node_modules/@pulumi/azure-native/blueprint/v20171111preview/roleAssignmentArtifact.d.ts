import * as pulumi from "@pulumi/pulumi";
/**
 * Blueprint artifact applies Azure role assignment.
 */
export declare class RoleAssignmentArtifact extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignmentArtifact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleAssignmentArtifact;
    /**
     * Returns true if the given object is an instance of RoleAssignmentArtifact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RoleAssignmentArtifact;
    /**
     * Artifacts which need to be deployed before the specified artifact.
     */
    readonly dependsOn: pulumi.Output<string[] | undefined>;
    /**
     * Multi-line explain this resource.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * One-liner string explain this resource.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Specifies the kind of Blueprint artifact.
     * Expected value is 'roleAssignment'.
     */
    readonly kind: pulumi.Output<"roleAssignment">;
    /**
     * Name of this resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Array of user or group identities in Azure Active Directory. The roleDefinition will apply to these identity.
     */
    readonly principalIds: pulumi.Output<any>;
    /**
     * RoleAssignment will be scope to this resourceGroup, if left empty, it would scope to the subscription.
     */
    readonly resourceGroup: pulumi.Output<string | undefined>;
    /**
     * Azure resource ID of the RoleDefinition.
     */
    readonly roleDefinitionId: pulumi.Output<string>;
    /**
     * Type of this resource.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a RoleAssignmentArtifact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArtifactArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RoleAssignmentArtifact resource.
 */
export interface RoleAssignmentArtifactArgs {
    /**
     * name of the artifact.
     */
    artifactName?: pulumi.Input<string>;
    /**
     * name of the blueprint.
     */
    blueprintName: pulumi.Input<string>;
    /**
     * Artifacts which need to be deployed before the specified artifact.
     */
    dependsOn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Multi-line explain this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * One-liner string explain this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies the kind of Blueprint artifact.
     * Expected value is 'roleAssignment'.
     */
    kind: pulumi.Input<"roleAssignment">;
    /**
     * ManagementGroup where blueprint stores.
     */
    managementGroupName: pulumi.Input<string>;
    /**
     * Array of user or group identities in Azure Active Directory. The roleDefinition will apply to these identity.
     */
    principalIds: any;
    /**
     * RoleAssignment will be scope to this resourceGroup, if left empty, it would scope to the subscription.
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * Azure resource ID of the RoleDefinition.
     */
    roleDefinitionId: pulumi.Input<string>;
}
