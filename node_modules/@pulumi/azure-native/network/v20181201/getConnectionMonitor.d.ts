import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * Information about the connection monitor.
 */
export declare function getConnectionMonitor(args: GetConnectionMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionMonitorResult>;
export interface GetConnectionMonitorArgs {
    /**
     * The name of the connection monitor.
     */
    connectionMonitorName: string;
    /**
     * The name of the Network Watcher resource.
     */
    networkWatcherName: string;
    /**
     * The name of the resource group containing Network Watcher.
     */
    resourceGroupName: string;
}
/**
 * Information about the connection monitor.
 */
export interface GetConnectionMonitorResult {
    /**
     * Determines if the connection monitor will start automatically once created.
     */
    readonly autoStart?: boolean;
    /**
     * Describes the destination of connection monitor.
     */
    readonly destination: outputs.network.v20181201.ConnectionMonitorDestinationResponse;
    readonly etag?: string;
    /**
     * ID of the connection monitor.
     */
    readonly id: string;
    /**
     * Connection monitor location.
     */
    readonly location?: string;
    /**
     * Monitoring interval in seconds.
     */
    readonly monitoringIntervalInSeconds?: number;
    /**
     * The monitoring status of the connection monitor.
     */
    readonly monitoringStatus?: string;
    /**
     * Name of the connection monitor.
     */
    readonly name: string;
    /**
     * The provisioning state of the connection monitor.
     */
    readonly provisioningState?: string;
    /**
     * Describes the source of connection monitor.
     */
    readonly source: outputs.network.v20181201.ConnectionMonitorSourceResponse;
    /**
     * The date and time when the connection monitor was started.
     */
    readonly startTime?: string;
    /**
     * Connection monitor tags.
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Connection monitor type.
     */
    readonly type: string;
}
