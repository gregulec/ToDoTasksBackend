"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./applicationGateway"), exports);
__exportStar(require("./applicationSecurityGroup"), exports);
__exportStar(require("./expressRouteCircuit"), exports);
__exportStar(require("./expressRouteCircuitAuthorization"), exports);
__exportStar(require("./expressRouteCircuitPeering"), exports);
__exportStar(require("./getApplicationGateway"), exports);
__exportStar(require("./getApplicationSecurityGroup"), exports);
__exportStar(require("./getExpressRouteCircuit"), exports);
__exportStar(require("./getExpressRouteCircuitAuthorization"), exports);
__exportStar(require("./getExpressRouteCircuitPeering"), exports);
__exportStar(require("./getInboundNatRule"), exports);
__exportStar(require("./getLoadBalancer"), exports);
__exportStar(require("./getLocalNetworkGateway"), exports);
__exportStar(require("./getNetworkInterface"), exports);
__exportStar(require("./getNetworkSecurityGroup"), exports);
__exportStar(require("./getNetworkWatcher"), exports);
__exportStar(require("./getPacketCapture"), exports);
__exportStar(require("./getPublicIPAddress"), exports);
__exportStar(require("./getRecordSet"), exports);
__exportStar(require("./getRoute"), exports);
__exportStar(require("./getRouteFilter"), exports);
__exportStar(require("./getRouteFilterRule"), exports);
__exportStar(require("./getRouteTable"), exports);
__exportStar(require("./getSecurityRule"), exports);
__exportStar(require("./getSubnet"), exports);
__exportStar(require("./getVirtualNetwork"), exports);
__exportStar(require("./getVirtualNetworkGateway"), exports);
__exportStar(require("./getVirtualNetworkGatewayAdvertisedRoutes"), exports);
__exportStar(require("./getVirtualNetworkGatewayBgpPeerStatus"), exports);
__exportStar(require("./getVirtualNetworkGatewayConnection"), exports);
__exportStar(require("./getVirtualNetworkGatewayLearnedRoutes"), exports);
__exportStar(require("./getVirtualNetworkPeering"), exports);
__exportStar(require("./getZone"), exports);
__exportStar(require("./inboundNatRule"), exports);
__exportStar(require("./loadBalancer"), exports);
__exportStar(require("./localNetworkGateway"), exports);
__exportStar(require("./networkInterface"), exports);
__exportStar(require("./networkSecurityGroup"), exports);
__exportStar(require("./networkWatcher"), exports);
__exportStar(require("./packetCapture"), exports);
__exportStar(require("./publicIPAddress"), exports);
__exportStar(require("./recordSet"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeFilter"), exports);
__exportStar(require("./routeFilterRule"), exports);
__exportStar(require("./routeTable"), exports);
__exportStar(require("./securityRule"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./virtualNetwork"), exports);
__exportStar(require("./virtualNetworkGateway"), exports);
__exportStar(require("./virtualNetworkGatewayConnection"), exports);
__exportStar(require("./virtualNetworkPeering"), exports);
__exportStar(require("./zone"), exports);
// Export enums:
__exportStar(require("../../types/enums/network/v20170901"), exports);
// Import resources to register:
const applicationGateway_1 = require("./applicationGateway");
const applicationSecurityGroup_1 = require("./applicationSecurityGroup");
const expressRouteCircuit_1 = require("./expressRouteCircuit");
const expressRouteCircuitAuthorization_1 = require("./expressRouteCircuitAuthorization");
const expressRouteCircuitPeering_1 = require("./expressRouteCircuitPeering");
const inboundNatRule_1 = require("./inboundNatRule");
const loadBalancer_1 = require("./loadBalancer");
const localNetworkGateway_1 = require("./localNetworkGateway");
const networkInterface_1 = require("./networkInterface");
const networkSecurityGroup_1 = require("./networkSecurityGroup");
const networkWatcher_1 = require("./networkWatcher");
const packetCapture_1 = require("./packetCapture");
const publicIPAddress_1 = require("./publicIPAddress");
const recordSet_1 = require("./recordSet");
const route_1 = require("./route");
const routeFilter_1 = require("./routeFilter");
const routeFilterRule_1 = require("./routeFilterRule");
const routeTable_1 = require("./routeTable");
const securityRule_1 = require("./securityRule");
const subnet_1 = require("./subnet");
const virtualNetwork_1 = require("./virtualNetwork");
const virtualNetworkGateway_1 = require("./virtualNetworkGateway");
const virtualNetworkGatewayConnection_1 = require("./virtualNetworkGatewayConnection");
const virtualNetworkPeering_1 = require("./virtualNetworkPeering");
const zone_1 = require("./zone");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network/v20170901:ApplicationGateway":
                return new applicationGateway_1.ApplicationGateway(name, undefined, { urn });
            case "azure-native:network/v20170901:ApplicationSecurityGroup":
                return new applicationSecurityGroup_1.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure-native:network/v20170901:ExpressRouteCircuit":
                return new expressRouteCircuit_1.ExpressRouteCircuit(name, undefined, { urn });
            case "azure-native:network/v20170901:ExpressRouteCircuitAuthorization":
                return new expressRouteCircuitAuthorization_1.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure-native:network/v20170901:ExpressRouteCircuitPeering":
                return new expressRouteCircuitPeering_1.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure-native:network/v20170901:InboundNatRule":
                return new inboundNatRule_1.InboundNatRule(name, undefined, { urn });
            case "azure-native:network/v20170901:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "azure-native:network/v20170901:LocalNetworkGateway":
                return new localNetworkGateway_1.LocalNetworkGateway(name, undefined, { urn });
            case "azure-native:network/v20170901:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "azure-native:network/v20170901:NetworkSecurityGroup":
                return new networkSecurityGroup_1.NetworkSecurityGroup(name, undefined, { urn });
            case "azure-native:network/v20170901:NetworkWatcher":
                return new networkWatcher_1.NetworkWatcher(name, undefined, { urn });
            case "azure-native:network/v20170901:PacketCapture":
                return new packetCapture_1.PacketCapture(name, undefined, { urn });
            case "azure-native:network/v20170901:PublicIPAddress":
                return new publicIPAddress_1.PublicIPAddress(name, undefined, { urn });
            case "azure-native:network/v20170901:RecordSet":
                return new recordSet_1.RecordSet(name, undefined, { urn });
            case "azure-native:network/v20170901:Route":
                return new route_1.Route(name, undefined, { urn });
            case "azure-native:network/v20170901:RouteFilter":
                return new routeFilter_1.RouteFilter(name, undefined, { urn });
            case "azure-native:network/v20170901:RouteFilterRule":
                return new routeFilterRule_1.RouteFilterRule(name, undefined, { urn });
            case "azure-native:network/v20170901:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "azure-native:network/v20170901:SecurityRule":
                return new securityRule_1.SecurityRule(name, undefined, { urn });
            case "azure-native:network/v20170901:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "azure-native:network/v20170901:VirtualNetwork":
                return new virtualNetwork_1.VirtualNetwork(name, undefined, { urn });
            case "azure-native:network/v20170901:VirtualNetworkGateway":
                return new virtualNetworkGateway_1.VirtualNetworkGateway(name, undefined, { urn });
            case "azure-native:network/v20170901:VirtualNetworkGatewayConnection":
                return new virtualNetworkGatewayConnection_1.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure-native:network/v20170901:VirtualNetworkPeering":
                return new virtualNetworkPeering_1.VirtualNetworkPeering(name, undefined, { urn });
            case "azure-native:network/v20170901:Zone":
                return new zone_1.Zone(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20170901", _module);
//# sourceMappingURL=index.js.map