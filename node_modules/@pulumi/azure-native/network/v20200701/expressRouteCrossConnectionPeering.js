"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressRouteCrossConnectionPeering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Peering in an ExpressRoute Cross Connection resource.
 */
class ExpressRouteCrossConnectionPeering extends pulumi.CustomResource {
    /**
     * Create a ExpressRouteCrossConnectionPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.crossConnectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crossConnectionName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["crossConnectionName"] = args ? args.crossConnectionName : undefined;
            inputs["gatewayManagerEtag"] = args ? args.gatewayManagerEtag : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["ipv6PeeringConfig"] = args ? args.ipv6PeeringConfig : undefined;
            inputs["microsoftPeeringConfig"] = args ? args.microsoftPeeringConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peerASN"] = args ? args.peerASN : undefined;
            inputs["peeringName"] = args ? args.peeringName : undefined;
            inputs["peeringType"] = args ? args.peeringType : undefined;
            inputs["primaryPeerAddressPrefix"] = args ? args.primaryPeerAddressPrefix : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["secondaryPeerAddressPrefix"] = args ? args.secondaryPeerAddressPrefix : undefined;
            inputs["sharedKey"] = args ? args.sharedKey : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["vlanId"] = args ? args.vlanId : undefined;
            inputs["azureASN"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["lastModifiedBy"] = undefined /*out*/;
            inputs["primaryAzurePort"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["secondaryAzurePort"] = undefined /*out*/;
        }
        else {
            inputs["azureASN"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["gatewayManagerEtag"] = undefined /*out*/;
            inputs["ipv6PeeringConfig"] = undefined /*out*/;
            inputs["lastModifiedBy"] = undefined /*out*/;
            inputs["microsoftPeeringConfig"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["peerASN"] = undefined /*out*/;
            inputs["peeringType"] = undefined /*out*/;
            inputs["primaryAzurePort"] = undefined /*out*/;
            inputs["primaryPeerAddressPrefix"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["secondaryAzurePort"] = undefined /*out*/;
            inputs["secondaryPeerAddressPrefix"] = undefined /*out*/;
            inputs["sharedKey"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["vlanId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:network/v20200701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180201:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20180201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180401:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20180401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180601:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20180601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180701:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20180701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20180801:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20180801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181001:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20181001:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181101:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20181101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20181201:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20181201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190201:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190401:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190601:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190701:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190701:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190801:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20190901:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20190901:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20191101:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20191101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20191201:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20191201:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200301:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20200301:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200401:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20200401:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200501:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20200501:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200601:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20200601:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20200801:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20200801:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20201101:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20201101:ExpressRouteCrossConnectionPeering" }, { type: "azure-native:network/v20210201:ExpressRouteCrossConnectionPeering" }, { type: "azure-nextgen:network/v20210201:ExpressRouteCrossConnectionPeering" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ExpressRouteCrossConnectionPeering.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ExpressRouteCrossConnectionPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ExpressRouteCrossConnectionPeering(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ExpressRouteCrossConnectionPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteCrossConnectionPeering.__pulumiType;
    }
}
exports.ExpressRouteCrossConnectionPeering = ExpressRouteCrossConnectionPeering;
/** @internal */
ExpressRouteCrossConnectionPeering.__pulumiType = 'azure-native:network/v20200701:ExpressRouteCrossConnectionPeering';
//# sourceMappingURL=expressRouteCrossConnectionPeering.js.map