"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210801 = exports.v20210301 = exports.v20210201preview = exports.v20201201 = exports.v20201001preview = exports.v20200601 = exports.v20190701 = exports.v20180301 = exports.v20171001 = exports.v20170201 = exports.v20160401 = exports.v20150801 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./database"), exports);
__exportStar(require("./firewallRule"), exports);
__exportStar(require("./getDatabase"), exports);
__exportStar(require("./getFirewallRule"), exports);
__exportStar(require("./getLinkedServer"), exports);
__exportStar(require("./getPatchSchedule"), exports);
__exportStar(require("./getPrivateEndpointConnection"), exports);
__exportStar(require("./getRedis"), exports);
__exportStar(require("./getRedisEnterprise"), exports);
__exportStar(require("./linkedServer"), exports);
__exportStar(require("./listDatabaseKeys"), exports);
__exportStar(require("./listRedisKeys"), exports);
__exportStar(require("./patchSchedule"), exports);
__exportStar(require("./privateEndpointConnection"), exports);
__exportStar(require("./redis"), exports);
__exportStar(require("./redisEnterprise"), exports);
// Export enums:
__exportStar(require("../types/enums/cache"), exports);
// Export sub-modules:
const v20150801 = require("./v20150801");
exports.v20150801 = v20150801;
const v20160401 = require("./v20160401");
exports.v20160401 = v20160401;
const v20170201 = require("./v20170201");
exports.v20170201 = v20170201;
const v20171001 = require("./v20171001");
exports.v20171001 = v20171001;
const v20180301 = require("./v20180301");
exports.v20180301 = v20180301;
const v20190701 = require("./v20190701");
exports.v20190701 = v20190701;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20201001preview = require("./v20201001preview");
exports.v20201001preview = v20201001preview;
const v20201201 = require("./v20201201");
exports.v20201201 = v20201201;
const v20210201preview = require("./v20210201preview");
exports.v20210201preview = v20210201preview;
const v20210301 = require("./v20210301");
exports.v20210301 = v20210301;
const v20210801 = require("./v20210801");
exports.v20210801 = v20210801;
// Import resources to register:
const database_1 = require("./database");
const firewallRule_1 = require("./firewallRule");
const linkedServer_1 = require("./linkedServer");
const patchSchedule_1 = require("./patchSchedule");
const privateEndpointConnection_1 = require("./privateEndpointConnection");
const redis_1 = require("./redis");
const redisEnterprise_1 = require("./redisEnterprise");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:cache:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure-native:cache:FirewallRule":
                return new firewallRule_1.FirewallRule(name, undefined, { urn });
            case "azure-native:cache:LinkedServer":
                return new linkedServer_1.LinkedServer(name, undefined, { urn });
            case "azure-native:cache:PatchSchedule":
                return new patchSchedule_1.PatchSchedule(name, undefined, { urn });
            case "azure-native:cache:PrivateEndpointConnection":
                return new privateEndpointConnection_1.PrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:cache:Redis":
                return new redis_1.Redis(name, undefined, { urn });
            case "azure-native:cache:RedisEnterprise":
                return new redisEnterprise_1.RedisEnterprise(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "cache", _module);
//# sourceMappingURL=index.js.map