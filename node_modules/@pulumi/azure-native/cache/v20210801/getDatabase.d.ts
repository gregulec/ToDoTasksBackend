import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * Describes a database on the RedisEnterprise cluster
 */
export declare function getDatabase(args: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult>;
export interface GetDatabaseArgs {
    /**
     * The name of the RedisEnterprise cluster.
     */
    clusterName: string;
    /**
     * The name of the database.
     */
    databaseName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}
/**
 * Describes a database on the RedisEnterprise cluster
 */
export interface GetDatabaseResult {
    /**
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     */
    readonly clientProtocol?: string;
    /**
     * Clustering policy - default is OSSCluster. Specified at create time.
     */
    readonly clusteringPolicy?: string;
    /**
     * Redis eviction policy - default is VolatileLRU
     */
    readonly evictionPolicy?: string;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     */
    readonly id: string;
    /**
     * Optional set of redis modules to enable in this database - modules can only be added at creation time.
     */
    readonly modules?: outputs.cache.v20210801.ModuleResponse[];
    /**
     * The name of the resource
     */
    readonly name: string;
    /**
     * Persistence settings
     */
    readonly persistence?: outputs.cache.v20210801.PersistenceResponse;
    /**
     * TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     */
    readonly port?: number;
    /**
     * Current provisioning status of the database
     */
    readonly provisioningState: string;
    /**
     * Current resource status of the database
     */
    readonly resourceState: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: string;
}
