"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Account = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * A Data Lake Analytics account object, containing all information associated with the named Data Lake Analytics account.
 */
class Account extends pulumi.CustomResource {
    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b, _c, _d, _e, _f;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dataLakeStoreAccounts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataLakeStoreAccounts'");
            }
            if ((!args || args.defaultDataLakeStoreAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultDataLakeStoreAccount'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["computePolicies"] = args ? args.computePolicies : undefined;
            inputs["dataLakeStoreAccounts"] = args ? args.dataLakeStoreAccounts : undefined;
            inputs["defaultDataLakeStoreAccount"] = args ? args.defaultDataLakeStoreAccount : undefined;
            inputs["firewallAllowAzureIps"] = (_a = (args ? args.firewallAllowAzureIps : undefined)) !== null && _a !== void 0 ? _a : "Disabled";
            inputs["firewallRules"] = args ? args.firewallRules : undefined;
            inputs["firewallState"] = (_b = (args ? args.firewallState : undefined)) !== null && _b !== void 0 ? _b : "Disabled";
            inputs["location"] = args ? args.location : undefined;
            inputs["maxDegreeOfParallelism"] = args ? args.maxDegreeOfParallelism : undefined;
            inputs["maxDegreeOfParallelismPerJob"] = (_c = (args ? args.maxDegreeOfParallelismPerJob : undefined)) !== null && _c !== void 0 ? _c : 32;
            inputs["maxJobCount"] = (_d = (args ? args.maxJobCount : undefined)) !== null && _d !== void 0 ? _d : 20;
            inputs["minPriorityPerJob"] = args ? args.minPriorityPerJob : undefined;
            inputs["newTier"] = (_e = (args ? args.newTier : undefined)) !== null && _e !== void 0 ? _e : "Consumption";
            inputs["queryStoreRetention"] = (_f = (args ? args.queryStoreRetention : undefined)) !== null && _f !== void 0 ? _f : 30;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageAccounts"] = args ? args.storageAccounts : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["accountId"] = undefined /*out*/;
            inputs["creationTime"] = undefined /*out*/;
            inputs["currentTier"] = undefined /*out*/;
            inputs["debugDataAccessLevel"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["hierarchicalQueueState"] = undefined /*out*/;
            inputs["hiveMetastores"] = undefined /*out*/;
            inputs["lastModifiedTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicDataLakeStoreAccounts"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["systemMaxDegreeOfParallelism"] = undefined /*out*/;
            inputs["systemMaxJobCount"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["virtualNetworkRules"] = undefined /*out*/;
        }
        else {
            inputs["accountId"] = undefined /*out*/;
            inputs["computePolicies"] = undefined /*out*/;
            inputs["creationTime"] = undefined /*out*/;
            inputs["currentTier"] = undefined /*out*/;
            inputs["dataLakeStoreAccounts"] = undefined /*out*/;
            inputs["debugDataAccessLevel"] = undefined /*out*/;
            inputs["defaultDataLakeStoreAccount"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["firewallAllowAzureIps"] = undefined /*out*/;
            inputs["firewallRules"] = undefined /*out*/;
            inputs["firewallState"] = undefined /*out*/;
            inputs["hierarchicalQueueState"] = undefined /*out*/;
            inputs["hiveMetastores"] = undefined /*out*/;
            inputs["lastModifiedTime"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["maxDegreeOfParallelism"] = undefined /*out*/;
            inputs["maxDegreeOfParallelismPerJob"] = undefined /*out*/;
            inputs["maxJobCount"] = undefined /*out*/;
            inputs["minPriorityPerJob"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["newTier"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicDataLakeStoreAccounts"] = undefined /*out*/;
            inputs["queryStoreRetention"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["storageAccounts"] = undefined /*out*/;
            inputs["systemMaxDegreeOfParallelism"] = undefined /*out*/;
            inputs["systemMaxJobCount"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["virtualNetworkRules"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:datalakeanalytics/v20151001preview:Account" }, { type: "azure-native:datalakeanalytics:Account" }, { type: "azure-nextgen:datalakeanalytics:Account" }, { type: "azure-native:datalakeanalytics/v20161101:Account" }, { type: "azure-nextgen:datalakeanalytics/v20161101:Account" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Account.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Account(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }
}
exports.Account = Account;
/** @internal */
Account.__pulumiType = 'azure-native:datalakeanalytics/v20151001preview:Account';
//# sourceMappingURL=account.js.map