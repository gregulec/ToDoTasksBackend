"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Contains information about a pool.
 */
class Pool extends pulumi.CustomResource {
    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["applicationLicenses"] = args ? args.applicationLicenses : undefined;
            inputs["applicationPackages"] = args ? args.applicationPackages : undefined;
            inputs["certificates"] = args ? args.certificates : undefined;
            inputs["deploymentConfiguration"] = args ? args.deploymentConfiguration : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["interNodeCommunication"] = args ? args.interNodeCommunication : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["mountConfiguration"] = args ? args.mountConfiguration : undefined;
            inputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            inputs["poolName"] = args ? args.poolName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scaleSettings"] = args ? args.scaleSettings : undefined;
            inputs["startTask"] = args ? args.startTask : undefined;
            inputs["taskSchedulingPolicy"] = args ? args.taskSchedulingPolicy : undefined;
            inputs["taskSlotsPerNode"] = args ? args.taskSlotsPerNode : undefined;
            inputs["userAccounts"] = args ? args.userAccounts : undefined;
            inputs["vmSize"] = args ? args.vmSize : undefined;
            inputs["allocationState"] = undefined /*out*/;
            inputs["allocationStateTransitionTime"] = undefined /*out*/;
            inputs["autoScaleRun"] = undefined /*out*/;
            inputs["creationTime"] = undefined /*out*/;
            inputs["currentDedicatedNodes"] = undefined /*out*/;
            inputs["currentLowPriorityNodes"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["resizeOperationStatus"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["allocationState"] = undefined /*out*/;
            inputs["allocationStateTransitionTime"] = undefined /*out*/;
            inputs["applicationLicenses"] = undefined /*out*/;
            inputs["applicationPackages"] = undefined /*out*/;
            inputs["autoScaleRun"] = undefined /*out*/;
            inputs["certificates"] = undefined /*out*/;
            inputs["creationTime"] = undefined /*out*/;
            inputs["currentDedicatedNodes"] = undefined /*out*/;
            inputs["currentLowPriorityNodes"] = undefined /*out*/;
            inputs["deploymentConfiguration"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["interNodeCommunication"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["mountConfiguration"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkConfiguration"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["provisioningStateTransitionTime"] = undefined /*out*/;
            inputs["resizeOperationStatus"] = undefined /*out*/;
            inputs["scaleSettings"] = undefined /*out*/;
            inputs["startTask"] = undefined /*out*/;
            inputs["taskSchedulingPolicy"] = undefined /*out*/;
            inputs["taskSlotsPerNode"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["userAccounts"] = undefined /*out*/;
            inputs["vmSize"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:batch/v20210101:Pool" }, { type: "azure-native:batch:Pool" }, { type: "azure-nextgen:batch:Pool" }, { type: "azure-native:batch/v20170901:Pool" }, { type: "azure-nextgen:batch/v20170901:Pool" }, { type: "azure-native:batch/v20181201:Pool" }, { type: "azure-nextgen:batch/v20181201:Pool" }, { type: "azure-native:batch/v20190401:Pool" }, { type: "azure-nextgen:batch/v20190401:Pool" }, { type: "azure-native:batch/v20190801:Pool" }, { type: "azure-nextgen:batch/v20190801:Pool" }, { type: "azure-native:batch/v20200301:Pool" }, { type: "azure-nextgen:batch/v20200301:Pool" }, { type: "azure-native:batch/v20200501:Pool" }, { type: "azure-nextgen:batch/v20200501:Pool" }, { type: "azure-native:batch/v20200901:Pool" }, { type: "azure-nextgen:batch/v20200901:Pool" }, { type: "azure-native:batch/v20210601:Pool" }, { type: "azure-nextgen:batch/v20210601:Pool" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Pool.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Pool(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }
}
exports.Pool = Pool;
/** @internal */
Pool.__pulumiType = 'azure-native:batch/v20210101:Pool';
//# sourceMappingURL=pool.js.map