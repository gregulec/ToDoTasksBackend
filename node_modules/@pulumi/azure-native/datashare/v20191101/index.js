"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./account"), exports);
__exportStar(require("./adlsgen1FileDataSet"), exports);
__exportStar(require("./adlsgen1FolderDataSet"), exports);
__exportStar(require("./adlsgen2FileDataSet"), exports);
__exportStar(require("./adlsgen2FileDataSetMapping"), exports);
__exportStar(require("./adlsgen2FileSystemDataSet"), exports);
__exportStar(require("./adlsgen2FileSystemDataSetMapping"), exports);
__exportStar(require("./adlsgen2FolderDataSet"), exports);
__exportStar(require("./adlsgen2FolderDataSetMapping"), exports);
__exportStar(require("./blobContainerDataSet"), exports);
__exportStar(require("./blobContainerDataSetMapping"), exports);
__exportStar(require("./blobDataSet"), exports);
__exportStar(require("./blobDataSetMapping"), exports);
__exportStar(require("./blobFolderDataSet"), exports);
__exportStar(require("./blobFolderDataSetMapping"), exports);
__exportStar(require("./dataSet"), exports);
__exportStar(require("./dataSetMapping"), exports);
__exportStar(require("./getADLSGen1FileDataSet"), exports);
__exportStar(require("./getADLSGen1FolderDataSet"), exports);
__exportStar(require("./getADLSGen2FileDataSet"), exports);
__exportStar(require("./getADLSGen2FileDataSetMapping"), exports);
__exportStar(require("./getADLSGen2FileSystemDataSet"), exports);
__exportStar(require("./getADLSGen2FileSystemDataSetMapping"), exports);
__exportStar(require("./getADLSGen2FolderDataSet"), exports);
__exportStar(require("./getADLSGen2FolderDataSetMapping"), exports);
__exportStar(require("./getAccount"), exports);
__exportStar(require("./getBlobContainerDataSet"), exports);
__exportStar(require("./getBlobContainerDataSetMapping"), exports);
__exportStar(require("./getBlobDataSet"), exports);
__exportStar(require("./getBlobDataSetMapping"), exports);
__exportStar(require("./getBlobFolderDataSet"), exports);
__exportStar(require("./getBlobFolderDataSetMapping"), exports);
__exportStar(require("./getDataSet"), exports);
__exportStar(require("./getDataSetMapping"), exports);
__exportStar(require("./getInvitation"), exports);
__exportStar(require("./getKustoClusterDataSet"), exports);
__exportStar(require("./getKustoClusterDataSetMapping"), exports);
__exportStar(require("./getKustoDatabaseDataSet"), exports);
__exportStar(require("./getKustoDatabaseDataSetMapping"), exports);
__exportStar(require("./getScheduledSynchronizationSetting"), exports);
__exportStar(require("./getScheduledTrigger"), exports);
__exportStar(require("./getShare"), exports);
__exportStar(require("./getShareSubscription"), exports);
__exportStar(require("./getSqlDBTableDataSet"), exports);
__exportStar(require("./getSqlDBTableDataSetMapping"), exports);
__exportStar(require("./getSqlDWTableDataSet"), exports);
__exportStar(require("./getSqlDWTableDataSetMapping"), exports);
__exportStar(require("./getSynchronizationSetting"), exports);
__exportStar(require("./getTrigger"), exports);
__exportStar(require("./invitation"), exports);
__exportStar(require("./kustoClusterDataSet"), exports);
__exportStar(require("./kustoClusterDataSetMapping"), exports);
__exportStar(require("./kustoDatabaseDataSet"), exports);
__exportStar(require("./kustoDatabaseDataSetMapping"), exports);
__exportStar(require("./listShareSubscriptionSourceShareSynchronizationSettings"), exports);
__exportStar(require("./listShareSubscriptionSynchronizationDetails"), exports);
__exportStar(require("./listShareSubscriptionSynchronizations"), exports);
__exportStar(require("./listShareSynchronizationDetails"), exports);
__exportStar(require("./listShareSynchronizations"), exports);
__exportStar(require("./scheduledSynchronizationSetting"), exports);
__exportStar(require("./scheduledTrigger"), exports);
__exportStar(require("./share"), exports);
__exportStar(require("./shareSubscription"), exports);
__exportStar(require("./sqlDBTableDataSet"), exports);
__exportStar(require("./sqlDBTableDataSetMapping"), exports);
__exportStar(require("./sqlDWTableDataSet"), exports);
__exportStar(require("./sqlDWTableDataSetMapping"), exports);
__exportStar(require("./synchronizationSetting"), exports);
__exportStar(require("./trigger"), exports);
// Export enums:
__exportStar(require("../../types/enums/datashare/v20191101"), exports);
// Import resources to register:
const adlsgen1FileDataSet_1 = require("./adlsgen1FileDataSet");
const adlsgen1FolderDataSet_1 = require("./adlsgen1FolderDataSet");
const adlsgen2FileDataSet_1 = require("./adlsgen2FileDataSet");
const adlsgen2FileDataSetMapping_1 = require("./adlsgen2FileDataSetMapping");
const adlsgen2FileSystemDataSet_1 = require("./adlsgen2FileSystemDataSet");
const adlsgen2FileSystemDataSetMapping_1 = require("./adlsgen2FileSystemDataSetMapping");
const adlsgen2FolderDataSet_1 = require("./adlsgen2FolderDataSet");
const adlsgen2FolderDataSetMapping_1 = require("./adlsgen2FolderDataSetMapping");
const account_1 = require("./account");
const blobContainerDataSet_1 = require("./blobContainerDataSet");
const blobContainerDataSetMapping_1 = require("./blobContainerDataSetMapping");
const blobDataSet_1 = require("./blobDataSet");
const blobDataSetMapping_1 = require("./blobDataSetMapping");
const blobFolderDataSet_1 = require("./blobFolderDataSet");
const blobFolderDataSetMapping_1 = require("./blobFolderDataSetMapping");
const dataSet_1 = require("./dataSet");
const dataSetMapping_1 = require("./dataSetMapping");
const invitation_1 = require("./invitation");
const kustoClusterDataSet_1 = require("./kustoClusterDataSet");
const kustoClusterDataSetMapping_1 = require("./kustoClusterDataSetMapping");
const kustoDatabaseDataSet_1 = require("./kustoDatabaseDataSet");
const kustoDatabaseDataSetMapping_1 = require("./kustoDatabaseDataSetMapping");
const scheduledSynchronizationSetting_1 = require("./scheduledSynchronizationSetting");
const scheduledTrigger_1 = require("./scheduledTrigger");
const share_1 = require("./share");
const shareSubscription_1 = require("./shareSubscription");
const sqlDBTableDataSet_1 = require("./sqlDBTableDataSet");
const sqlDBTableDataSetMapping_1 = require("./sqlDBTableDataSetMapping");
const sqlDWTableDataSet_1 = require("./sqlDWTableDataSet");
const sqlDWTableDataSetMapping_1 = require("./sqlDWTableDataSetMapping");
const synchronizationSetting_1 = require("./synchronizationSetting");
const trigger_1 = require("./trigger");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:datashare/v20191101:ADLSGen1FileDataSet":
                return new adlsgen1FileDataSet_1.ADLSGen1FileDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen1FolderDataSet":
                return new adlsgen1FolderDataSet_1.ADLSGen1FolderDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FileDataSet":
                return new adlsgen2FileDataSet_1.ADLSGen2FileDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FileDataSetMapping":
                return new adlsgen2FileDataSetMapping_1.ADLSGen2FileDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FileSystemDataSet":
                return new adlsgen2FileSystemDataSet_1.ADLSGen2FileSystemDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FileSystemDataSetMapping":
                return new adlsgen2FileSystemDataSetMapping_1.ADLSGen2FileSystemDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FolderDataSet":
                return new adlsgen2FolderDataSet_1.ADLSGen2FolderDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ADLSGen2FolderDataSetMapping":
                return new adlsgen2FolderDataSetMapping_1.ADLSGen2FolderDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobContainerDataSet":
                return new blobContainerDataSet_1.BlobContainerDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobContainerDataSetMapping":
                return new blobContainerDataSetMapping_1.BlobContainerDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobDataSet":
                return new blobDataSet_1.BlobDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobDataSetMapping":
                return new blobDataSetMapping_1.BlobDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobFolderDataSet":
                return new blobFolderDataSet_1.BlobFolderDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:BlobFolderDataSetMapping":
                return new blobFolderDataSetMapping_1.BlobFolderDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:DataSet":
                return new dataSet_1.DataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:DataSetMapping":
                return new dataSetMapping_1.DataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:Invitation":
                return new invitation_1.Invitation(name, undefined, { urn });
            case "azure-native:datashare/v20191101:KustoClusterDataSet":
                return new kustoClusterDataSet_1.KustoClusterDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:KustoClusterDataSetMapping":
                return new kustoClusterDataSetMapping_1.KustoClusterDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:KustoDatabaseDataSet":
                return new kustoDatabaseDataSet_1.KustoDatabaseDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:KustoDatabaseDataSetMapping":
                return new kustoDatabaseDataSetMapping_1.KustoDatabaseDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ScheduledSynchronizationSetting":
                return new scheduledSynchronizationSetting_1.ScheduledSynchronizationSetting(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ScheduledTrigger":
                return new scheduledTrigger_1.ScheduledTrigger(name, undefined, { urn });
            case "azure-native:datashare/v20191101:Share":
                return new share_1.Share(name, undefined, { urn });
            case "azure-native:datashare/v20191101:ShareSubscription":
                return new shareSubscription_1.ShareSubscription(name, undefined, { urn });
            case "azure-native:datashare/v20191101:SqlDBTableDataSet":
                return new sqlDBTableDataSet_1.SqlDBTableDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:SqlDBTableDataSetMapping":
                return new sqlDBTableDataSetMapping_1.SqlDBTableDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:SqlDWTableDataSet":
                return new sqlDWTableDataSet_1.SqlDWTableDataSet(name, undefined, { urn });
            case "azure-native:datashare/v20191101:SqlDWTableDataSetMapping":
                return new sqlDWTableDataSetMapping_1.SqlDWTableDataSetMapping(name, undefined, { urn });
            case "azure-native:datashare/v20191101:SynchronizationSetting":
                return new synchronizationSetting_1.SynchronizationSetting(name, undefined, { urn });
            case "azure-native:datashare/v20191101:Trigger":
                return new trigger_1.Trigger(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "datashare/v20191101", _module);
//# sourceMappingURL=index.js.map