"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ADLSGen2FolderDataSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * An ADLS Gen 2 folder data set.
 */
class ADLSGen2FolderDataSet extends pulumi.CustomResource {
    /**
     * Create a ADLSGen2FolderDataSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.fileSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystem'");
            }
            if ((!args || args.folderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.shareName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareName'");
            }
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["dataSetName"] = args ? args.dataSetName : undefined;
            inputs["fileSystem"] = args ? args.fileSystem : undefined;
            inputs["folderPath"] = args ? args.folderPath : undefined;
            inputs["kind"] = "AdlsGen2Folder";
            inputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["shareName"] = args ? args.shareName : undefined;
            inputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            inputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            inputs["dataSetId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["dataSetId"] = undefined /*out*/;
            inputs["fileSystem"] = undefined /*out*/;
            inputs["folderPath"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["storageAccountName"] = undefined /*out*/;
            inputs["subscriptionId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:datashare/v20181101preview:ADLSGen2FolderDataSet" }, { type: "azure-native:datashare:ADLSGen2FolderDataSet" }, { type: "azure-nextgen:datashare:ADLSGen2FolderDataSet" }, { type: "azure-native:datashare/v20191101:ADLSGen2FolderDataSet" }, { type: "azure-nextgen:datashare/v20191101:ADLSGen2FolderDataSet" }, { type: "azure-native:datashare/v20200901:ADLSGen2FolderDataSet" }, { type: "azure-nextgen:datashare/v20200901:ADLSGen2FolderDataSet" }, { type: "azure-native:datashare/v20201001preview:ADLSGen2FolderDataSet" }, { type: "azure-nextgen:datashare/v20201001preview:ADLSGen2FolderDataSet" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ADLSGen2FolderDataSet.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ADLSGen2FolderDataSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ADLSGen2FolderDataSet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ADLSGen2FolderDataSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ADLSGen2FolderDataSet.__pulumiType;
    }
}
exports.ADLSGen2FolderDataSet = ADLSGen2FolderDataSet;
/** @internal */
ADLSGen2FolderDataSet.__pulumiType = 'azure-native:datashare/v20181101preview:ADLSGen2FolderDataSet';
//# sourceMappingURL=adlsgen2FolderDataSet.js.map