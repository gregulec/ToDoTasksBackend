"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebAppFunction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Function information.
 * API Version: 2020-12-01.
 */
class WebAppFunction extends pulumi.CustomResource {
    /**
     * Create a WebAppFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["configHref"] = args ? args.configHref : undefined;
            inputs["files"] = args ? args.files : undefined;
            inputs["functionAppId"] = args ? args.functionAppId : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["href"] = args ? args.href : undefined;
            inputs["invokeUrlTemplate"] = args ? args.invokeUrlTemplate : undefined;
            inputs["isDisabled"] = args ? args.isDisabled : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["language"] = args ? args.language : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scriptHref"] = args ? args.scriptHref : undefined;
            inputs["scriptRootPathHref"] = args ? args.scriptRootPathHref : undefined;
            inputs["secretsFileHref"] = args ? args.secretsFileHref : undefined;
            inputs["testData"] = args ? args.testData : undefined;
            inputs["testDataHref"] = args ? args.testDataHref : undefined;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["config"] = undefined /*out*/;
            inputs["configHref"] = undefined /*out*/;
            inputs["files"] = undefined /*out*/;
            inputs["functionAppId"] = undefined /*out*/;
            inputs["href"] = undefined /*out*/;
            inputs["invokeUrlTemplate"] = undefined /*out*/;
            inputs["isDisabled"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["language"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["scriptHref"] = undefined /*out*/;
            inputs["scriptRootPathHref"] = undefined /*out*/;
            inputs["secretsFileHref"] = undefined /*out*/;
            inputs["testData"] = undefined /*out*/;
            inputs["testDataHref"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web:WebAppFunction" }, { type: "azure-native:web/v20160801:WebAppFunction" }, { type: "azure-nextgen:web/v20160801:WebAppFunction" }, { type: "azure-native:web/v20180201:WebAppFunction" }, { type: "azure-nextgen:web/v20180201:WebAppFunction" }, { type: "azure-native:web/v20181101:WebAppFunction" }, { type: "azure-nextgen:web/v20181101:WebAppFunction" }, { type: "azure-native:web/v20190801:WebAppFunction" }, { type: "azure-nextgen:web/v20190801:WebAppFunction" }, { type: "azure-native:web/v20200601:WebAppFunction" }, { type: "azure-nextgen:web/v20200601:WebAppFunction" }, { type: "azure-native:web/v20200901:WebAppFunction" }, { type: "azure-nextgen:web/v20200901:WebAppFunction" }, { type: "azure-native:web/v20201001:WebAppFunction" }, { type: "azure-nextgen:web/v20201001:WebAppFunction" }, { type: "azure-native:web/v20201201:WebAppFunction" }, { type: "azure-nextgen:web/v20201201:WebAppFunction" }, { type: "azure-native:web/v20210101:WebAppFunction" }, { type: "azure-nextgen:web/v20210101:WebAppFunction" }, { type: "azure-native:web/v20210115:WebAppFunction" }, { type: "azure-nextgen:web/v20210115:WebAppFunction" }, { type: "azure-native:web/v20210201:WebAppFunction" }, { type: "azure-nextgen:web/v20210201:WebAppFunction" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WebAppFunction.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing WebAppFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new WebAppFunction(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WebAppFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppFunction.__pulumiType;
    }
}
exports.WebAppFunction = WebAppFunction;
/** @internal */
WebAppFunction.__pulumiType = 'azure-native:web:WebAppFunction';
//# sourceMappingURL=webAppFunction.js.map