"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./certificate"), exports);
__exportStar(require("./certificateCsr"), exports);
__exportStar(require("./getCertificate"), exports);
__exportStar(require("./getCertificateCsr"), exports);
__exportStar(require("./getHostingEnvironment"), exports);
__exportStar(require("./getManagedHostingEnvironment"), exports);
__exportStar(require("./getServerFarm"), exports);
__exportStar(require("./getSite"), exports);
__exportStar(require("./getSiteDeployment"), exports);
__exportStar(require("./getSiteDeploymentSlot"), exports);
__exportStar(require("./getSiteHostNameBinding"), exports);
__exportStar(require("./getSiteHostNameBindingSlot"), exports);
__exportStar(require("./getSiteInstanceDeployment"), exports);
__exportStar(require("./getSiteInstanceDeploymentSlot"), exports);
__exportStar(require("./getSiteLogsConfig"), exports);
__exportStar(require("./getSiteRelayServiceConnection"), exports);
__exportStar(require("./getSiteRelayServiceConnectionSlot"), exports);
__exportStar(require("./getSiteSlot"), exports);
__exportStar(require("./getSiteSlotConfigNames"), exports);
__exportStar(require("./getSiteSourceControl"), exports);
__exportStar(require("./getSiteSourceControlSlot"), exports);
__exportStar(require("./getSiteVNETConnection"), exports);
__exportStar(require("./getSiteVNETConnectionSlot"), exports);
__exportStar(require("./hostingEnvironment"), exports);
__exportStar(require("./listSiteAppSettings"), exports);
__exportStar(require("./listSiteAppSettingsSlot"), exports);
__exportStar(require("./listSiteAuthSettings"), exports);
__exportStar(require("./listSiteAuthSettingsSlot"), exports);
__exportStar(require("./listSiteBackupConfiguration"), exports);
__exportStar(require("./listSiteBackupConfigurationSlot"), exports);
__exportStar(require("./listSiteBackupStatusSecrets"), exports);
__exportStar(require("./listSiteBackupStatusSecretsSlot"), exports);
__exportStar(require("./listSiteConnectionStrings"), exports);
__exportStar(require("./listSiteConnectionStringsSlot"), exports);
__exportStar(require("./listSiteMetadata"), exports);
__exportStar(require("./listSiteMetadataSlot"), exports);
__exportStar(require("./listSitePublishingCredentials"), exports);
__exportStar(require("./listSitePublishingCredentialsSlot"), exports);
__exportStar(require("./managedHostingEnvironment"), exports);
__exportStar(require("./serverFarm"), exports);
__exportStar(require("./serverFarmRouteForVnet"), exports);
__exportStar(require("./site"), exports);
__exportStar(require("./siteAppSettings"), exports);
__exportStar(require("./siteAppSettingsSlot"), exports);
__exportStar(require("./siteAuthSettings"), exports);
__exportStar(require("./siteAuthSettingsSlot"), exports);
__exportStar(require("./siteBackupConfiguration"), exports);
__exportStar(require("./siteBackupConfigurationSlot"), exports);
__exportStar(require("./siteConnectionStrings"), exports);
__exportStar(require("./siteConnectionStringsSlot"), exports);
__exportStar(require("./siteDeployment"), exports);
__exportStar(require("./siteDeploymentSlot"), exports);
__exportStar(require("./siteHostNameBinding"), exports);
__exportStar(require("./siteHostNameBindingSlot"), exports);
__exportStar(require("./siteInstanceDeployment"), exports);
__exportStar(require("./siteInstanceDeploymentSlot"), exports);
__exportStar(require("./siteLogsConfig"), exports);
__exportStar(require("./siteMetadata"), exports);
__exportStar(require("./siteMetadataSlot"), exports);
__exportStar(require("./siteRelayServiceConnection"), exports);
__exportStar(require("./siteRelayServiceConnectionSlot"), exports);
__exportStar(require("./siteSlot"), exports);
__exportStar(require("./siteSlotConfigNames"), exports);
__exportStar(require("./siteSourceControl"), exports);
__exportStar(require("./siteSourceControlSlot"), exports);
__exportStar(require("./siteVNETConnection"), exports);
__exportStar(require("./siteVNETConnectionSlot"), exports);
// Export enums:
__exportStar(require("../../types/enums/web/v20150801"), exports);
// Import resources to register:
const certificate_1 = require("./certificate");
const certificateCsr_1 = require("./certificateCsr");
const hostingEnvironment_1 = require("./hostingEnvironment");
const managedHostingEnvironment_1 = require("./managedHostingEnvironment");
const serverFarm_1 = require("./serverFarm");
const serverFarmRouteForVnet_1 = require("./serverFarmRouteForVnet");
const site_1 = require("./site");
const siteAppSettings_1 = require("./siteAppSettings");
const siteAppSettingsSlot_1 = require("./siteAppSettingsSlot");
const siteAuthSettings_1 = require("./siteAuthSettings");
const siteAuthSettingsSlot_1 = require("./siteAuthSettingsSlot");
const siteBackupConfiguration_1 = require("./siteBackupConfiguration");
const siteBackupConfigurationSlot_1 = require("./siteBackupConfigurationSlot");
const siteConnectionStrings_1 = require("./siteConnectionStrings");
const siteConnectionStringsSlot_1 = require("./siteConnectionStringsSlot");
const siteDeployment_1 = require("./siteDeployment");
const siteDeploymentSlot_1 = require("./siteDeploymentSlot");
const siteHostNameBinding_1 = require("./siteHostNameBinding");
const siteHostNameBindingSlot_1 = require("./siteHostNameBindingSlot");
const siteInstanceDeployment_1 = require("./siteInstanceDeployment");
const siteInstanceDeploymentSlot_1 = require("./siteInstanceDeploymentSlot");
const siteLogsConfig_1 = require("./siteLogsConfig");
const siteMetadata_1 = require("./siteMetadata");
const siteMetadataSlot_1 = require("./siteMetadataSlot");
const siteRelayServiceConnection_1 = require("./siteRelayServiceConnection");
const siteRelayServiceConnectionSlot_1 = require("./siteRelayServiceConnectionSlot");
const siteSlot_1 = require("./siteSlot");
const siteSlotConfigNames_1 = require("./siteSlotConfigNames");
const siteSourceControl_1 = require("./siteSourceControl");
const siteSourceControlSlot_1 = require("./siteSourceControlSlot");
const siteVNETConnection_1 = require("./siteVNETConnection");
const siteVNETConnectionSlot_1 = require("./siteVNETConnectionSlot");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:web/v20150801:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure-native:web/v20150801:CertificateCsr":
                return new certificateCsr_1.CertificateCsr(name, undefined, { urn });
            case "azure-native:web/v20150801:HostingEnvironment":
                return new hostingEnvironment_1.HostingEnvironment(name, undefined, { urn });
            case "azure-native:web/v20150801:ManagedHostingEnvironment":
                return new managedHostingEnvironment_1.ManagedHostingEnvironment(name, undefined, { urn });
            case "azure-native:web/v20150801:ServerFarm":
                return new serverFarm_1.ServerFarm(name, undefined, { urn });
            case "azure-native:web/v20150801:ServerFarmRouteForVnet":
                return new serverFarmRouteForVnet_1.ServerFarmRouteForVnet(name, undefined, { urn });
            case "azure-native:web/v20150801:Site":
                return new site_1.Site(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteAppSettings":
                return new siteAppSettings_1.SiteAppSettings(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteAppSettingsSlot":
                return new siteAppSettingsSlot_1.SiteAppSettingsSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteAuthSettings":
                return new siteAuthSettings_1.SiteAuthSettings(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteAuthSettingsSlot":
                return new siteAuthSettingsSlot_1.SiteAuthSettingsSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteBackupConfiguration":
                return new siteBackupConfiguration_1.SiteBackupConfiguration(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteBackupConfigurationSlot":
                return new siteBackupConfigurationSlot_1.SiteBackupConfigurationSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteConnectionStrings":
                return new siteConnectionStrings_1.SiteConnectionStrings(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteConnectionStringsSlot":
                return new siteConnectionStringsSlot_1.SiteConnectionStringsSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteDeployment":
                return new siteDeployment_1.SiteDeployment(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteDeploymentSlot":
                return new siteDeploymentSlot_1.SiteDeploymentSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteHostNameBinding":
                return new siteHostNameBinding_1.SiteHostNameBinding(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteHostNameBindingSlot":
                return new siteHostNameBindingSlot_1.SiteHostNameBindingSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteInstanceDeployment":
                return new siteInstanceDeployment_1.SiteInstanceDeployment(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteInstanceDeploymentSlot":
                return new siteInstanceDeploymentSlot_1.SiteInstanceDeploymentSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteLogsConfig":
                return new siteLogsConfig_1.SiteLogsConfig(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteMetadata":
                return new siteMetadata_1.SiteMetadata(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteMetadataSlot":
                return new siteMetadataSlot_1.SiteMetadataSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteRelayServiceConnection":
                return new siteRelayServiceConnection_1.SiteRelayServiceConnection(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteRelayServiceConnectionSlot":
                return new siteRelayServiceConnectionSlot_1.SiteRelayServiceConnectionSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteSlot":
                return new siteSlot_1.SiteSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteSlotConfigNames":
                return new siteSlotConfigNames_1.SiteSlotConfigNames(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteSourceControl":
                return new siteSourceControl_1.SiteSourceControl(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteSourceControlSlot":
                return new siteSourceControlSlot_1.SiteSourceControlSlot(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteVNETConnection":
                return new siteVNETConnection_1.SiteVNETConnection(name, undefined, { urn });
            case "azure-native:web/v20150801:SiteVNETConnectionSlot":
                return new siteVNETConnectionSlot_1.SiteVNETConnectionSlot(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "web/v20150801", _module);
//# sourceMappingURL=index.js.map