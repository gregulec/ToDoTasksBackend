"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Site = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Represents a web app
 */
class Site extends pulumi.CustomResource {
    /**
     * Create a Site resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["clientAffinityEnabled"] = args ? args.clientAffinityEnabled : undefined;
            inputs["clientCertEnabled"] = args ? args.clientCertEnabled : undefined;
            inputs["cloningInfo"] = args ? args.cloningInfo : undefined;
            inputs["containerSize"] = args ? args.containerSize : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["forceDnsRegistration"] = args ? args.forceDnsRegistration : undefined;
            inputs["gatewaySiteName"] = args ? args.gatewaySiteName : undefined;
            inputs["hostNameSslStates"] = args ? args.hostNameSslStates : undefined;
            inputs["hostNamesDisabled"] = args ? args.hostNamesDisabled : undefined;
            inputs["hostingEnvironmentProfile"] = args ? args.hostingEnvironmentProfile : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maxNumberOfWorkers"] = args ? args.maxNumberOfWorkers : undefined;
            inputs["microService"] = args ? args.microService : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scmSiteAlsoStopped"] = args ? args.scmSiteAlsoStopped : undefined;
            inputs["serverFarmId"] = args ? args.serverFarmId : undefined;
            inputs["siteConfig"] = args ? args.siteConfig : undefined;
            inputs["skipCustomDomainVerification"] = args ? args.skipCustomDomainVerification : undefined;
            inputs["skipDnsRegistration"] = args ? args.skipDnsRegistration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["ttlInSeconds"] = args ? args.ttlInSeconds : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["availabilityState"] = undefined /*out*/;
            inputs["defaultHostName"] = undefined /*out*/;
            inputs["enabledHostNames"] = undefined /*out*/;
            inputs["hostNames"] = undefined /*out*/;
            inputs["isDefaultContainer"] = undefined /*out*/;
            inputs["lastModifiedTimeUtc"] = undefined /*out*/;
            inputs["outboundIpAddresses"] = undefined /*out*/;
            inputs["premiumAppDeployed"] = undefined /*out*/;
            inputs["repositorySiteName"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["targetSwapSlot"] = undefined /*out*/;
            inputs["trafficManagerHostNames"] = undefined /*out*/;
            inputs["usageState"] = undefined /*out*/;
        }
        else {
            inputs["availabilityState"] = undefined /*out*/;
            inputs["clientAffinityEnabled"] = undefined /*out*/;
            inputs["clientCertEnabled"] = undefined /*out*/;
            inputs["cloningInfo"] = undefined /*out*/;
            inputs["containerSize"] = undefined /*out*/;
            inputs["defaultHostName"] = undefined /*out*/;
            inputs["enabled"] = undefined /*out*/;
            inputs["enabledHostNames"] = undefined /*out*/;
            inputs["gatewaySiteName"] = undefined /*out*/;
            inputs["hostNameSslStates"] = undefined /*out*/;
            inputs["hostNames"] = undefined /*out*/;
            inputs["hostNamesDisabled"] = undefined /*out*/;
            inputs["hostingEnvironmentProfile"] = undefined /*out*/;
            inputs["isDefaultContainer"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["lastModifiedTimeUtc"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["maxNumberOfWorkers"] = undefined /*out*/;
            inputs["microService"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["outboundIpAddresses"] = undefined /*out*/;
            inputs["premiumAppDeployed"] = undefined /*out*/;
            inputs["repositorySiteName"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["scmSiteAlsoStopped"] = undefined /*out*/;
            inputs["serverFarmId"] = undefined /*out*/;
            inputs["siteConfig"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["targetSwapSlot"] = undefined /*out*/;
            inputs["trafficManagerHostNames"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["usageState"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web/v20150801:Site" }, { type: "azure-native:web:Site" }, { type: "azure-nextgen:web:Site" }, { type: "azure-native:web/v20160801:Site" }, { type: "azure-nextgen:web/v20160801:Site" }, { type: "azure-native:web/v20180201:Site" }, { type: "azure-nextgen:web/v20180201:Site" }, { type: "azure-native:web/v20181101:Site" }, { type: "azure-nextgen:web/v20181101:Site" }, { type: "azure-native:web/v20190801:Site" }, { type: "azure-nextgen:web/v20190801:Site" }, { type: "azure-native:web/v20200601:Site" }, { type: "azure-nextgen:web/v20200601:Site" }, { type: "azure-native:web/v20200901:Site" }, { type: "azure-nextgen:web/v20200901:Site" }, { type: "azure-native:web/v20201001:Site" }, { type: "azure-nextgen:web/v20201001:Site" }, { type: "azure-native:web/v20201201:Site" }, { type: "azure-nextgen:web/v20201201:Site" }, { type: "azure-native:web/v20210101:Site" }, { type: "azure-nextgen:web/v20210101:Site" }, { type: "azure-native:web/v20210115:Site" }, { type: "azure-nextgen:web/v20210115:Site" }, { type: "azure-native:web/v20210201:Site" }, { type: "azure-nextgen:web/v20210201:Site" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Site.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Site resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Site(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Site.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Site.__pulumiType;
    }
}
exports.Site = Site;
/** @internal */
Site.__pulumiType = 'azure-native:web/v20150801:Site';
//# sourceMappingURL=site.js.map