"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppServiceEnvironment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * App Service Environment ARM resource.
 */
class AppServiceEnvironment extends pulumi.CustomResource {
    /**
     * Create a AppServiceEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.virtualNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetwork'");
            }
            if ((!args || args.workerPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerPools'");
            }
            inputs["apiManagementAccountId"] = args ? args.apiManagementAccountId : undefined;
            inputs["clusterSettings"] = args ? args.clusterSettings : undefined;
            inputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            inputs["dynamicCacheEnabled"] = args ? args.dynamicCacheEnabled : undefined;
            inputs["frontEndScaleFactor"] = args ? args.frontEndScaleFactor : undefined;
            inputs["hasLinuxWorkers"] = args ? args.hasLinuxWorkers : undefined;
            inputs["internalLoadBalancingMode"] = args ? args.internalLoadBalancingMode : undefined;
            inputs["ipsslAddressCount"] = args ? args.ipsslAddressCount : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["multiRoleCount"] = args ? args.multiRoleCount : undefined;
            inputs["multiSize"] = args ? args.multiSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkAccessControlList"] = args ? args.networkAccessControlList : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sslCertKeyVaultId"] = args ? args.sslCertKeyVaultId : undefined;
            inputs["sslCertKeyVaultSecretName"] = args ? args.sslCertKeyVaultSecretName : undefined;
            inputs["suspended"] = args ? args.suspended : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userWhitelistedIpRanges"] = args ? args.userWhitelistedIpRanges : undefined;
            inputs["virtualNetwork"] = args ? args.virtualNetwork : undefined;
            inputs["vnetName"] = args ? args.vnetName : undefined;
            inputs["vnetResourceGroupName"] = args ? args.vnetResourceGroupName : undefined;
            inputs["vnetSubnetName"] = args ? args.vnetSubnetName : undefined;
            inputs["workerPools"] = args ? args.workerPools : undefined;
            inputs["allowedMultiSizes"] = undefined /*out*/;
            inputs["allowedWorkerSizes"] = undefined /*out*/;
            inputs["databaseEdition"] = undefined /*out*/;
            inputs["databaseServiceObjective"] = undefined /*out*/;
            inputs["defaultFrontEndScaleFactor"] = undefined /*out*/;
            inputs["environmentCapacities"] = undefined /*out*/;
            inputs["environmentIsHealthy"] = undefined /*out*/;
            inputs["environmentStatus"] = undefined /*out*/;
            inputs["lastAction"] = undefined /*out*/;
            inputs["lastActionResult"] = undefined /*out*/;
            inputs["maximumNumberOfMachines"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["subscriptionId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["upgradeDomains"] = undefined /*out*/;
            inputs["vipMappings"] = undefined /*out*/;
        }
        else {
            inputs["allowedMultiSizes"] = undefined /*out*/;
            inputs["allowedWorkerSizes"] = undefined /*out*/;
            inputs["apiManagementAccountId"] = undefined /*out*/;
            inputs["clusterSettings"] = undefined /*out*/;
            inputs["databaseEdition"] = undefined /*out*/;
            inputs["databaseServiceObjective"] = undefined /*out*/;
            inputs["defaultFrontEndScaleFactor"] = undefined /*out*/;
            inputs["dnsSuffix"] = undefined /*out*/;
            inputs["dynamicCacheEnabled"] = undefined /*out*/;
            inputs["environmentCapacities"] = undefined /*out*/;
            inputs["environmentIsHealthy"] = undefined /*out*/;
            inputs["environmentStatus"] = undefined /*out*/;
            inputs["frontEndScaleFactor"] = undefined /*out*/;
            inputs["hasLinuxWorkers"] = undefined /*out*/;
            inputs["internalLoadBalancingMode"] = undefined /*out*/;
            inputs["ipsslAddressCount"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["lastAction"] = undefined /*out*/;
            inputs["lastActionResult"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["maximumNumberOfMachines"] = undefined /*out*/;
            inputs["multiRoleCount"] = undefined /*out*/;
            inputs["multiSize"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkAccessControlList"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["sslCertKeyVaultId"] = undefined /*out*/;
            inputs["sslCertKeyVaultSecretName"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["subscriptionId"] = undefined /*out*/;
            inputs["suspended"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["upgradeDomains"] = undefined /*out*/;
            inputs["userWhitelistedIpRanges"] = undefined /*out*/;
            inputs["vipMappings"] = undefined /*out*/;
            inputs["virtualNetwork"] = undefined /*out*/;
            inputs["vnetName"] = undefined /*out*/;
            inputs["vnetResourceGroupName"] = undefined /*out*/;
            inputs["vnetSubnetName"] = undefined /*out*/;
            inputs["workerPools"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web/v20180201:AppServiceEnvironment" }, { type: "azure-native:web:AppServiceEnvironment" }, { type: "azure-nextgen:web:AppServiceEnvironment" }, { type: "azure-native:web/v20150801:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20150801:AppServiceEnvironment" }, { type: "azure-native:web/v20160901:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20160901:AppServiceEnvironment" }, { type: "azure-native:web/v20190801:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20190801:AppServiceEnvironment" }, { type: "azure-native:web/v20200601:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20200601:AppServiceEnvironment" }, { type: "azure-native:web/v20200901:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20200901:AppServiceEnvironment" }, { type: "azure-native:web/v20201001:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20201001:AppServiceEnvironment" }, { type: "azure-native:web/v20201201:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20201201:AppServiceEnvironment" }, { type: "azure-native:web/v20210101:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20210101:AppServiceEnvironment" }, { type: "azure-native:web/v20210115:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20210115:AppServiceEnvironment" }, { type: "azure-native:web/v20210201:AppServiceEnvironment" }, { type: "azure-nextgen:web/v20210201:AppServiceEnvironment" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AppServiceEnvironment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AppServiceEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new AppServiceEnvironment(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AppServiceEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppServiceEnvironment.__pulumiType;
    }
}
exports.AppServiceEnvironment = AppServiceEnvironment;
/** @internal */
AppServiceEnvironment.__pulumiType = 'azure-native:web/v20180201:AppServiceEnvironment';
//# sourceMappingURL=appServiceEnvironment.js.map