"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppServicePlan = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * App Service plan.
 */
class AppServicePlan extends pulumi.CustomResource {
    /**
     * Create a AppServicePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b, _c, _d;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["freeOfferExpirationTime"] = args ? args.freeOfferExpirationTime : undefined;
            inputs["hostingEnvironmentProfile"] = args ? args.hostingEnvironmentProfile : undefined;
            inputs["hyperV"] = (_a = (args ? args.hyperV : undefined)) !== null && _a !== void 0 ? _a : false;
            inputs["isSpot"] = args ? args.isSpot : undefined;
            inputs["isXenon"] = (_b = (args ? args.isXenon : undefined)) !== null && _b !== void 0 ? _b : false;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maximumElasticWorkerCount"] = args ? args.maximumElasticWorkerCount : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["perSiteScaling"] = (_c = (args ? args.perSiteScaling : undefined)) !== null && _c !== void 0 ? _c : false;
            inputs["reserved"] = (_d = (args ? args.reserved : undefined)) !== null && _d !== void 0 ? _d : false;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["spotExpirationTime"] = args ? args.spotExpirationTime : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetWorkerCount"] = args ? args.targetWorkerCount : undefined;
            inputs["targetWorkerSizeId"] = args ? args.targetWorkerSizeId : undefined;
            inputs["workerTierName"] = args ? args.workerTierName : undefined;
            inputs["geoRegion"] = undefined /*out*/;
            inputs["maximumNumberOfWorkers"] = undefined /*out*/;
            inputs["numberOfSites"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["subscription"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["freeOfferExpirationTime"] = undefined /*out*/;
            inputs["geoRegion"] = undefined /*out*/;
            inputs["hostingEnvironmentProfile"] = undefined /*out*/;
            inputs["hyperV"] = undefined /*out*/;
            inputs["isSpot"] = undefined /*out*/;
            inputs["isXenon"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["maximumElasticWorkerCount"] = undefined /*out*/;
            inputs["maximumNumberOfWorkers"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["numberOfSites"] = undefined /*out*/;
            inputs["perSiteScaling"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["reserved"] = undefined /*out*/;
            inputs["resourceGroup"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["spotExpirationTime"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["subscription"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["targetWorkerCount"] = undefined /*out*/;
            inputs["targetWorkerSizeId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["workerTierName"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:web/v20180201:AppServicePlan" }, { type: "azure-native:web:AppServicePlan" }, { type: "azure-nextgen:web:AppServicePlan" }, { type: "azure-native:web/v20150801:AppServicePlan" }, { type: "azure-nextgen:web/v20150801:AppServicePlan" }, { type: "azure-native:web/v20160901:AppServicePlan" }, { type: "azure-nextgen:web/v20160901:AppServicePlan" }, { type: "azure-native:web/v20190801:AppServicePlan" }, { type: "azure-nextgen:web/v20190801:AppServicePlan" }, { type: "azure-native:web/v20200601:AppServicePlan" }, { type: "azure-nextgen:web/v20200601:AppServicePlan" }, { type: "azure-native:web/v20200901:AppServicePlan" }, { type: "azure-nextgen:web/v20200901:AppServicePlan" }, { type: "azure-native:web/v20201001:AppServicePlan" }, { type: "azure-nextgen:web/v20201001:AppServicePlan" }, { type: "azure-native:web/v20201201:AppServicePlan" }, { type: "azure-nextgen:web/v20201201:AppServicePlan" }, { type: "azure-native:web/v20210101:AppServicePlan" }, { type: "azure-nextgen:web/v20210101:AppServicePlan" }, { type: "azure-native:web/v20210115:AppServicePlan" }, { type: "azure-nextgen:web/v20210115:AppServicePlan" }, { type: "azure-native:web/v20210201:AppServicePlan" }, { type: "azure-nextgen:web/v20210201:AppServicePlan" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AppServicePlan.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AppServicePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new AppServicePlan(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AppServicePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppServicePlan.__pulumiType;
    }
}
exports.AppServicePlan = AppServicePlan;
/** @internal */
AppServicePlan.__pulumiType = 'azure-native:web/v20180201:AppServicePlan';
//# sourceMappingURL=appServicePlan.js.map