"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewByScope = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * States and configurations of Cost Analysis.
 */
class ViewByScope extends pulumi.CustomResource {
    /**
     * Create a ViewByScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.timeframe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["accumulated"] = args ? args.accumulated : undefined;
            inputs["chart"] = args ? args.chart : undefined;
            inputs["dataset"] = args ? args.dataset : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["eTag"] = args ? args.eTag : undefined;
            inputs["kpis"] = args ? args.kpis : undefined;
            inputs["metric"] = args ? args.metric : undefined;
            inputs["pivots"] = args ? args.pivots : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["timePeriod"] = args ? args.timePeriod : undefined;
            inputs["timeframe"] = args ? args.timeframe : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["viewName"] = args ? args.viewName : undefined;
            inputs["createdOn"] = undefined /*out*/;
            inputs["modifiedOn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        else {
            inputs["accumulated"] = undefined /*out*/;
            inputs["chart"] = undefined /*out*/;
            inputs["createdOn"] = undefined /*out*/;
            inputs["dataset"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["eTag"] = undefined /*out*/;
            inputs["kpis"] = undefined /*out*/;
            inputs["metric"] = undefined /*out*/;
            inputs["modifiedOn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pivots"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["timePeriod"] = undefined /*out*/;
            inputs["timeframe"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:costmanagement/v20200601:ViewByScope" }, { type: "azure-native:costmanagement:ViewByScope" }, { type: "azure-nextgen:costmanagement:ViewByScope" }, { type: "azure-native:costmanagement/v20190401preview:ViewByScope" }, { type: "azure-nextgen:costmanagement/v20190401preview:ViewByScope" }, { type: "azure-native:costmanagement/v20191101:ViewByScope" }, { type: "azure-nextgen:costmanagement/v20191101:ViewByScope" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ViewByScope.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ViewByScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ViewByScope(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ViewByScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ViewByScope.__pulumiType;
    }
}
exports.ViewByScope = ViewByScope;
/** @internal */
ViewByScope.__pulumiType = 'azure-native:costmanagement/v20200601:ViewByScope';
//# sourceMappingURL=viewByScope.js.map