import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../types";
/**
 * The lock information.
 * API Version: 2016-09-01.
 */
export declare function getManagementLockAtResourceLevel(args: GetManagementLockAtResourceLevelArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementLockAtResourceLevelResult>;
export interface GetManagementLockAtResourceLevelArgs {
    /**
     * The name of lock.
     */
    lockName: string;
    /**
     * An extra path parameter needed in some services, like SQL Databases.
     */
    parentResourcePath: string;
    /**
     * The name of the resource group.
     */
    resourceGroupName: string;
    /**
     * The name of the resource.
     */
    resourceName: string;
    /**
     * The namespace of the resource provider.
     */
    resourceProviderNamespace: string;
    /**
     * The type of the resource.
     */
    resourceType: string;
}
/**
 * The lock information.
 */
export interface GetManagementLockAtResourceLevelResult {
    /**
     * The resource ID of the lock.
     */
    readonly id: string;
    /**
     * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
     */
    readonly level: string;
    /**
     * The name of the lock.
     */
    readonly name: string;
    /**
     * Notes about the lock. Maximum of 512 characters.
     */
    readonly notes?: string;
    /**
     * The owners of the lock.
     */
    readonly owners?: outputs.authorization.ManagementLockOwnerResponse[];
    /**
     * The resource type of the lock - Microsoft.Authorization/locks.
     */
    readonly type: string;
}
