"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomLocation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Custom Locations definition.
 * API Version: 2021-03-15-preview.
 */
class CustomLocation extends pulumi.CustomResource {
    /**
     * Create a CustomLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["authentication"] = args ? args.authentication : undefined;
            inputs["clusterExtensionIds"] = args ? args.clusterExtensionIds : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["hostResourceId"] = args ? args.hostResourceId : undefined;
            inputs["hostType"] = args ? args.hostType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["provisioningState"] = args ? args.provisioningState : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceName"] = args ? args.resourceName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["authentication"] = undefined /*out*/;
            inputs["clusterExtensionIds"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["hostResourceId"] = undefined /*out*/;
            inputs["hostType"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["namespace"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:extendedlocation:customLocation" }, { type: "azure-native:extendedlocation/v20210315preview:customLocation" }, { type: "azure-nextgen:extendedlocation/v20210315preview:customLocation" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(CustomLocation.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CustomLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new CustomLocation(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CustomLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomLocation.__pulumiType;
    }
}
exports.CustomLocation = CustomLocation;
/** @internal */
CustomLocation.__pulumiType = 'azure-native:extendedlocation:customLocation';
//# sourceMappingURL=customLocation.js.map