"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSource = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
 *
 * @deprecated Please use one of the variants: EventHubEventSource, IoTHubEventSource.
 */
class EventSource extends pulumi.CustomResource {
    /**
     * Create a EventSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Please use one of the variants: EventHubEventSource, IoTHubEventSource. */
    constructor(name, args, opts) {
        pulumi.log.warn("EventSource is deprecated: Please use one of the variants: EventHubEventSource, IoTHubEventSource.");
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.environmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentName'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["environmentName"] = args ? args.environmentName : undefined;
            inputs["eventSourceName"] = args ? args.eventSourceName : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:timeseriesinsights/v20170228preview:EventSource" }, { type: "azure-native:timeseriesinsights:EventSource" }, { type: "azure-nextgen:timeseriesinsights:EventSource" }, { type: "azure-native:timeseriesinsights/v20171115:EventSource" }, { type: "azure-nextgen:timeseriesinsights/v20171115:EventSource" }, { type: "azure-native:timeseriesinsights/v20180815preview:EventSource" }, { type: "azure-nextgen:timeseriesinsights/v20180815preview:EventSource" }, { type: "azure-native:timeseriesinsights/v20200515:EventSource" }, { type: "azure-nextgen:timeseriesinsights/v20200515:EventSource" }, { type: "azure-native:timeseriesinsights/v20210630preview:EventSource" }, { type: "azure-nextgen:timeseriesinsights/v20210630preview:EventSource" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(EventSource.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EventSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        pulumi.log.warn("EventSource is deprecated: Please use one of the variants: EventHubEventSource, IoTHubEventSource.");
        return new EventSource(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSource.__pulumiType;
    }
}
exports.EventSource = EventSource;
/** @internal */
EventSource.__pulumiType = 'azure-native:timeseriesinsights/v20170228preview:EventSource';
//# sourceMappingURL=eventSource.js.map