"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalR = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * A class represent a resource.
 */
class SignalR extends pulumi.CustomResource {
    /**
     * Create a SignalR resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["cors"] = args ? args.cors : undefined;
            inputs["features"] = args ? args.features : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["networkACLs"] = args ? args.networkACLs : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceName"] = args ? args.resourceName : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tls"] = args ? args.tls : undefined;
            inputs["upstream"] = args ? args.upstream : undefined;
            inputs["externalIP"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicPort"] = undefined /*out*/;
            inputs["serverPort"] = undefined /*out*/;
            inputs["sharedPrivateLinkResources"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        else {
            inputs["cors"] = undefined /*out*/;
            inputs["externalIP"] = undefined /*out*/;
            inputs["features"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkACLs"] = undefined /*out*/;
            inputs["privateEndpointConnections"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicPort"] = undefined /*out*/;
            inputs["serverPort"] = undefined /*out*/;
            inputs["sharedPrivateLinkResources"] = undefined /*out*/;
            inputs["sku"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["tls"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["upstream"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:signalrservice/v20210401preview:SignalR" }, { type: "azure-native:signalrservice:SignalR" }, { type: "azure-nextgen:signalrservice:SignalR" }, { type: "azure-native:signalrservice/v20180301preview:SignalR" }, { type: "azure-nextgen:signalrservice/v20180301preview:SignalR" }, { type: "azure-native:signalrservice/v20181001:SignalR" }, { type: "azure-nextgen:signalrservice/v20181001:SignalR" }, { type: "azure-native:signalrservice/v20200501:SignalR" }, { type: "azure-nextgen:signalrservice/v20200501:SignalR" }, { type: "azure-native:signalrservice/v20200701preview:SignalR" }, { type: "azure-nextgen:signalrservice/v20200701preview:SignalR" }, { type: "azure-native:signalrservice/v20210601preview:SignalR" }, { type: "azure-nextgen:signalrservice/v20210601preview:SignalR" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SignalR.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SignalR resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new SignalR(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SignalR.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignalR.__pulumiType;
    }
}
exports.SignalR = SignalR;
/** @internal */
SignalR.__pulumiType = 'azure-native:signalrservice/v20210401preview:SignalR';
//# sourceMappingURL=signalR.js.map