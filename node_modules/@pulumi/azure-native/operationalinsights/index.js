"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210601 = exports.v20201001 = exports.v20200801 = exports.v20200301preview = exports.v20190901preview = exports.v20190801preview = exports.v20151101preview = exports.v20150320 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cluster"), exports);
__exportStar(require("./dataExport"), exports);
__exportStar(require("./dataSource"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getDataExport"), exports);
__exportStar(require("./getDataSource"), exports);
__exportStar(require("./getLinkedService"), exports);
__exportStar(require("./getLinkedStorageAccount"), exports);
__exportStar(require("./getMachineGroup"), exports);
__exportStar(require("./getQuery"), exports);
__exportStar(require("./getQueryPack"), exports);
__exportStar(require("./getSavedSearch"), exports);
__exportStar(require("./getSharedKeys"), exports);
__exportStar(require("./getStorageInsightConfig"), exports);
__exportStar(require("./getWorkspace"), exports);
__exportStar(require("./linkedService"), exports);
__exportStar(require("./linkedStorageAccount"), exports);
__exportStar(require("./machineGroup"), exports);
__exportStar(require("./query"), exports);
__exportStar(require("./queryPack"), exports);
__exportStar(require("./savedSearch"), exports);
__exportStar(require("./storageInsightConfig"), exports);
__exportStar(require("./workspace"), exports);
// Export enums:
__exportStar(require("../types/enums/operationalinsights"), exports);
// Export sub-modules:
const v20150320 = require("./v20150320");
exports.v20150320 = v20150320;
const v20151101preview = require("./v20151101preview");
exports.v20151101preview = v20151101preview;
const v20190801preview = require("./v20190801preview");
exports.v20190801preview = v20190801preview;
const v20190901preview = require("./v20190901preview");
exports.v20190901preview = v20190901preview;
const v20200301preview = require("./v20200301preview");
exports.v20200301preview = v20200301preview;
const v20200801 = require("./v20200801");
exports.v20200801 = v20200801;
const v20201001 = require("./v20201001");
exports.v20201001 = v20201001;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
// Import resources to register:
const cluster_1 = require("./cluster");
const dataExport_1 = require("./dataExport");
const dataSource_1 = require("./dataSource");
const linkedService_1 = require("./linkedService");
const linkedStorageAccount_1 = require("./linkedStorageAccount");
const machineGroup_1 = require("./machineGroup");
const query_1 = require("./query");
const queryPack_1 = require("./queryPack");
const savedSearch_1 = require("./savedSearch");
const storageInsightConfig_1 = require("./storageInsightConfig");
const workspace_1 = require("./workspace");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:operationalinsights:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure-native:operationalinsights:DataExport":
                return new dataExport_1.DataExport(name, undefined, { urn });
            case "azure-native:operationalinsights:DataSource":
                return new dataSource_1.DataSource(name, undefined, { urn });
            case "azure-native:operationalinsights:LinkedService":
                return new linkedService_1.LinkedService(name, undefined, { urn });
            case "azure-native:operationalinsights:LinkedStorageAccount":
                return new linkedStorageAccount_1.LinkedStorageAccount(name, undefined, { urn });
            case "azure-native:operationalinsights:MachineGroup":
                return new machineGroup_1.MachineGroup(name, undefined, { urn });
            case "azure-native:operationalinsights:Query":
                return new query_1.Query(name, undefined, { urn });
            case "azure-native:operationalinsights:QueryPack":
                return new queryPack_1.QueryPack(name, undefined, { urn });
            case "azure-native:operationalinsights:SavedSearch":
                return new savedSearch_1.SavedSearch(name, undefined, { urn });
            case "azure-native:operationalinsights:StorageInsightConfig":
                return new storageInsightConfig_1.StorageInsightConfig(name, undefined, { urn });
            case "azure-native:operationalinsights:Workspace":
                return new workspace_1.Workspace(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "operationalinsights", _module);
//# sourceMappingURL=index.js.map