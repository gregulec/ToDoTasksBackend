"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AFDOrigin = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * CDN origin is the source of the content being delivered via CDN. When the edge nodes represented by an endpoint do not have the requested content cached, they attempt to fetch it from one or more of the configured origins.
 * API Version: 2020-09-01.
 */
class AFDOrigin extends pulumi.CustomResource {
    /**
     * Create a AFDOrigin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.originGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originGroupName'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["azureOrigin"] = args ? args.azureOrigin : undefined;
            inputs["enabledState"] = args ? args.enabledState : undefined;
            inputs["hostName"] = args ? args.hostName : undefined;
            inputs["httpPort"] = args ? args.httpPort : undefined;
            inputs["httpsPort"] = args ? args.httpsPort : undefined;
            inputs["originGroupName"] = args ? args.originGroupName : undefined;
            inputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            inputs["originName"] = args ? args.originName : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["profileName"] = args ? args.profileName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sharedPrivateLinkResource"] = args ? args.sharedPrivateLinkResource : undefined;
            inputs["weight"] = args ? args.weight : undefined;
            inputs["deploymentStatus"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["azureOrigin"] = undefined /*out*/;
            inputs["deploymentStatus"] = undefined /*out*/;
            inputs["enabledState"] = undefined /*out*/;
            inputs["hostName"] = undefined /*out*/;
            inputs["httpPort"] = undefined /*out*/;
            inputs["httpsPort"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["originHostHeader"] = undefined /*out*/;
            inputs["priority"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["sharedPrivateLinkResource"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["weight"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:cdn:AFDOrigin" }, { type: "azure-native:cdn/v20200901:AFDOrigin" }, { type: "azure-nextgen:cdn/v20200901:AFDOrigin" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AFDOrigin.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AFDOrigin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new AFDOrigin(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AFDOrigin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AFDOrigin.__pulumiType;
    }
}
exports.AFDOrigin = AFDOrigin;
/** @internal */
AFDOrigin.__pulumiType = 'azure-native:cdn:AFDOrigin';
//# sourceMappingURL=afdorigin.js.map