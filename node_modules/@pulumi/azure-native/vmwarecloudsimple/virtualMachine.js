"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualMachine = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Virtual machine model
 * API Version: 2019-04-01.
 */
class VirtualMachine extends pulumi.CustomResource {
    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.amountOfRam === undefined) && !opts.urn) {
                throw new Error("Missing required property 'amountOfRam'");
            }
            if ((!args || args.numberOfCores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfCores'");
            }
            if ((!args || args.privateCloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateCloudId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["amountOfRam"] = args ? args.amountOfRam : undefined;
            inputs["customization"] = args ? args.customization : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["exposeToGuestVM"] = args ? args.exposeToGuestVM : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["nics"] = args ? args.nics : undefined;
            inputs["numberOfCores"] = args ? args.numberOfCores : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["privateCloudId"] = args ? args.privateCloudId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourcePool"] = args ? args.resourcePool : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["templateId"] = args ? args.templateId : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["vSphereNetworks"] = args ? args.vSphereNetworks : undefined;
            inputs["virtualMachineName"] = args ? args.virtualMachineName : undefined;
            inputs["controllers"] = undefined /*out*/;
            inputs["dnsname"] = undefined /*out*/;
            inputs["folder"] = undefined /*out*/;
            inputs["guestOS"] = undefined /*out*/;
            inputs["guestOSType"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicIP"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vmId"] = undefined /*out*/;
            inputs["vmwaretools"] = undefined /*out*/;
        }
        else {
            inputs["amountOfRam"] = undefined /*out*/;
            inputs["controllers"] = undefined /*out*/;
            inputs["customization"] = undefined /*out*/;
            inputs["disks"] = undefined /*out*/;
            inputs["dnsname"] = undefined /*out*/;
            inputs["exposeToGuestVM"] = undefined /*out*/;
            inputs["folder"] = undefined /*out*/;
            inputs["guestOS"] = undefined /*out*/;
            inputs["guestOSType"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["nics"] = undefined /*out*/;
            inputs["numberOfCores"] = undefined /*out*/;
            inputs["password"] = undefined /*out*/;
            inputs["privateCloudId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicIP"] = undefined /*out*/;
            inputs["resourcePool"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["templateId"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["username"] = undefined /*out*/;
            inputs["vSphereNetworks"] = undefined /*out*/;
            inputs["vmId"] = undefined /*out*/;
            inputs["vmwaretools"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:vmwarecloudsimple:VirtualMachine" }, { type: "azure-native:vmwarecloudsimple/v20190401:VirtualMachine" }, { type: "azure-nextgen:vmwarecloudsimple/v20190401:VirtualMachine" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(VirtualMachine.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new VirtualMachine(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }
}
exports.VirtualMachine = VirtualMachine;
/** @internal */
VirtualMachine.__pulumiType = 'azure-native:vmwarecloudsimple:VirtualMachine';
//# sourceMappingURL=virtualMachine.js.map