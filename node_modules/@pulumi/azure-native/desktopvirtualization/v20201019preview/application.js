"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Schema for Application properties.
 */
class Application extends pulumi.CustomResource {
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGroupName'");
            }
            if ((!args || args.commandLineSetting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandLineSetting'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["applicationGroupName"] = args ? args.applicationGroupName : undefined;
            inputs["applicationName"] = args ? args.applicationName : undefined;
            inputs["applicationType"] = args ? args.applicationType : undefined;
            inputs["commandLineArguments"] = args ? args.commandLineArguments : undefined;
            inputs["commandLineSetting"] = args ? args.commandLineSetting : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["filePath"] = args ? args.filePath : undefined;
            inputs["friendlyName"] = args ? args.friendlyName : undefined;
            inputs["iconIndex"] = args ? args.iconIndex : undefined;
            inputs["iconPath"] = args ? args.iconPath : undefined;
            inputs["msixPackageApplicationId"] = args ? args.msixPackageApplicationId : undefined;
            inputs["msixPackageFamilyName"] = args ? args.msixPackageFamilyName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["showInPortal"] = args ? args.showInPortal : undefined;
            inputs["iconContent"] = undefined /*out*/;
            inputs["iconHash"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["applicationType"] = undefined /*out*/;
            inputs["commandLineArguments"] = undefined /*out*/;
            inputs["commandLineSetting"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["filePath"] = undefined /*out*/;
            inputs["friendlyName"] = undefined /*out*/;
            inputs["iconContent"] = undefined /*out*/;
            inputs["iconHash"] = undefined /*out*/;
            inputs["iconIndex"] = undefined /*out*/;
            inputs["iconPath"] = undefined /*out*/;
            inputs["msixPackageApplicationId"] = undefined /*out*/;
            inputs["msixPackageFamilyName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["showInPortal"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:desktopvirtualization/v20201019preview:Application" }, { type: "azure-native:desktopvirtualization:Application" }, { type: "azure-nextgen:desktopvirtualization:Application" }, { type: "azure-native:desktopvirtualization/v20190123preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20190123preview:Application" }, { type: "azure-native:desktopvirtualization/v20190924preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20190924preview:Application" }, { type: "azure-native:desktopvirtualization/v20191210preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20191210preview:Application" }, { type: "azure-native:desktopvirtualization/v20200921preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20200921preview:Application" }, { type: "azure-native:desktopvirtualization/v20201102preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20201102preview:Application" }, { type: "azure-native:desktopvirtualization/v20201110preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20201110preview:Application" }, { type: "azure-native:desktopvirtualization/v20210114preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210114preview:Application" }, { type: "azure-native:desktopvirtualization/v20210201preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210201preview:Application" }, { type: "azure-native:desktopvirtualization/v20210309preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210309preview:Application" }, { type: "azure-native:desktopvirtualization/v20210401preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210401preview:Application" }, { type: "azure-native:desktopvirtualization/v20210513preview:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210513preview:Application" }, { type: "azure-native:desktopvirtualization/v20210712:Application" }, { type: "azure-nextgen:desktopvirtualization/v20210712:Application" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Application.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Application(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'azure-native:desktopvirtualization/v20201019preview:Application';
//# sourceMappingURL=application.js.map