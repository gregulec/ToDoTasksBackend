import * as pulumi from "@pulumi/pulumi";
import { enums } from "../../types";
/**
 * Represents a ApplicationGroup definition.
 */
export declare class ApplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ApplicationGroup;
    /**
     * Returns true if the given object is an instance of ApplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ApplicationGroup;
    /**
     * Resource Type of ApplicationGroup.
     */
    readonly applicationGroupType: pulumi.Output<string>;
    /**
     * Description of ApplicationGroup.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Friendly name of ApplicationGroup.
     */
    readonly friendlyName: pulumi.Output<string | undefined>;
    /**
     * HostPool arm path of ApplicationGroup.
     */
    readonly hostPoolArmPath: pulumi.Output<string>;
    /**
     * The geo-location where the resource lives
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    readonly name: pulumi.Output<string>;
    /**
     * Resource tags.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    readonly type: pulumi.Output<string>;
    /**
     * Workspace arm path of ApplicationGroup.
     */
    readonly workspaceArmPath: pulumi.Output<string>;
    /**
     * Create a ApplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ApplicationGroup resource.
 */
export interface ApplicationGroupArgs {
    /**
     * The name of the application group
     */
    applicationGroupName?: pulumi.Input<string>;
    /**
     * Resource Type of ApplicationGroup.
     */
    applicationGroupType: pulumi.Input<string | enums.desktopvirtualization.v20190924preview.ApplicationGroupType>;
    /**
     * Description of ApplicationGroup.
     */
    description?: pulumi.Input<string>;
    /**
     * Friendly name of ApplicationGroup.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * HostPool arm path of ApplicationGroup.
     */
    hostPoolArmPath: pulumi.Input<string>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
