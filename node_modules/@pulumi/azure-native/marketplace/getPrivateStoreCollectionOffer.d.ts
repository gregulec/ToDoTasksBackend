import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../types";
/**
 * The privateStore offer data structure.
 * API Version: 2021-06-01.
 */
export declare function getPrivateStoreCollectionOffer(args: GetPrivateStoreCollectionOfferArgs, opts?: pulumi.InvokeOptions): Promise<GetPrivateStoreCollectionOfferResult>;
export interface GetPrivateStoreCollectionOfferArgs {
    /**
     * The collection ID
     */
    collectionId: string;
    /**
     * The offer ID to update or delete
     */
    offerId: string;
    /**
     * The store ID - must use the tenant ID
     */
    privateStoreId: string;
}
/**
 * The privateStore offer data structure.
 */
export interface GetPrivateStoreCollectionOfferResult {
    /**
     * Private store offer creation date
     */
    readonly createdAt: string;
    /**
     * Identifier for purposes of race condition
     */
    readonly eTag?: string;
    /**
     * Icon File Uris
     */
    readonly iconFileUris?: {
        [key: string]: string;
    };
    /**
     * The resource ID.
     */
    readonly id: string;
    /**
     * Private store offer modification date
     */
    readonly modifiedAt: string;
    /**
     * The name of the resource.
     */
    readonly name: string;
    /**
     * It will be displayed prominently in the marketplace
     */
    readonly offerDisplayName: string;
    /**
     * Offer plans
     */
    readonly plans?: outputs.marketplace.PlanResponse[];
    /**
     * Private store unique id
     */
    readonly privateStoreId: string;
    /**
     * Publisher name that will be displayed prominently in the marketplace
     */
    readonly publisherDisplayName: string;
    /**
     * Plan ids limitation for this offer
     */
    readonly specificPlanIdsLimitation?: string[];
    /**
     * Metadata pertaining to creation and last modification of the resource
     */
    readonly systemData: outputs.marketplace.SystemDataResponse;
    /**
     * The type of the resource.
     */
    readonly type: string;
    /**
     * Offers unique id
     */
    readonly uniqueOfferId: string;
    /**
     * Indicating whether the offer was not updated to db (true = not updated). If the allow list is identical to the existed one in db, the offer would not be updated.
     */
    readonly updateSuppressedDueIdempotence?: boolean;
}
