"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationAtResourceGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An attestation resource.
 * API Version: 2021-01-01.
 */
class AttestationAtResourceGroup extends pulumi.CustomResource {
    /**
     * Create a AttestationAtResourceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.policyAssignmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["attestationName"] = args ? args.attestationName : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["complianceState"] = args ? args.complianceState : undefined;
            inputs["evidence"] = args ? args.evidence : undefined;
            inputs["expiresOn"] = args ? args.expiresOn : undefined;
            inputs["owner"] = args ? args.owner : undefined;
            inputs["policyAssignmentId"] = args ? args.policyAssignmentId : undefined;
            inputs["policyDefinitionReferenceId"] = args ? args.policyDefinitionReferenceId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["lastComplianceStateChangeAt"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["comments"] = undefined /*out*/;
            inputs["complianceState"] = undefined /*out*/;
            inputs["evidence"] = undefined /*out*/;
            inputs["expiresOn"] = undefined /*out*/;
            inputs["lastComplianceStateChangeAt"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["policyAssignmentId"] = undefined /*out*/;
            inputs["policyDefinitionReferenceId"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:policyinsights:AttestationAtResourceGroup" }, { type: "azure-native:policyinsights/v20210101:AttestationAtResourceGroup" }, { type: "azure-nextgen:policyinsights/v20210101:AttestationAtResourceGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AttestationAtResourceGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AttestationAtResourceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new AttestationAtResourceGroup(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AttestationAtResourceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttestationAtResourceGroup.__pulumiType;
    }
}
exports.AttestationAtResourceGroup = AttestationAtResourceGroup;
/** @internal */
AttestationAtResourceGroup.__pulumiType = 'azure-native:policyinsights:AttestationAtResourceGroup';
//# sourceMappingURL=attestationAtResourceGroup.js.map