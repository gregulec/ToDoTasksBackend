export declare const BackupPolicyType: {
    readonly Periodic: "Periodic";
    readonly Continuous: "Continuous";
};
/**
 * Describes the mode of backups.
 */
export declare type BackupPolicyType = (typeof BackupPolicyType)[keyof typeof BackupPolicyType];
export declare const CompositePathSortOrder: {
    readonly Ascending: "Ascending";
    readonly Descending: "Descending";
};
/**
 * Sort order for composite paths.
 */
export declare type CompositePathSortOrder = (typeof CompositePathSortOrder)[keyof typeof CompositePathSortOrder];
export declare const ConflictResolutionMode: {
    readonly LastWriterWins: "LastWriterWins";
    readonly Custom: "Custom";
};
/**
 * Indicates the conflict resolution mode.
 */
export declare type ConflictResolutionMode = (typeof ConflictResolutionMode)[keyof typeof ConflictResolutionMode];
export declare const ConnectorOffer: {
    readonly Small: "Small";
};
/**
 * The cassandra connector offer type for the Cosmos DB database C* account.
 */
export declare type ConnectorOffer = (typeof ConnectorOffer)[keyof typeof ConnectorOffer];
export declare const DataType: {
    readonly String: "String";
    readonly Number: "Number";
    readonly Point: "Point";
    readonly Polygon: "Polygon";
    readonly LineString: "LineString";
    readonly MultiPolygon: "MultiPolygon";
};
/**
 * The datatype for which the indexing behavior is applied to.
 */
export declare type DataType = (typeof DataType)[keyof typeof DataType];
export declare const DatabaseAccountKind: {
    readonly GlobalDocumentDB: "GlobalDocumentDB";
    readonly MongoDB: "MongoDB";
    readonly Parse: "Parse";
};
/**
 * Indicates the type of database account. This can only be set at database account creation.
 */
export declare type DatabaseAccountKind = (typeof DatabaseAccountKind)[keyof typeof DatabaseAccountKind];
export declare const DatabaseAccountOfferType: {
    readonly Standard: "Standard";
};
/**
 * The offer type for the database
 */
export declare type DatabaseAccountOfferType = (typeof DatabaseAccountOfferType)[keyof typeof DatabaseAccountOfferType];
export declare const DefaultConsistencyLevel: {
    readonly Eventual: "Eventual";
    readonly Session: "Session";
    readonly BoundedStaleness: "BoundedStaleness";
    readonly Strong: "Strong";
    readonly ConsistentPrefix: "ConsistentPrefix";
};
/**
 * The default consistency level and configuration settings of the Cosmos DB account.
 */
export declare type DefaultConsistencyLevel = (typeof DefaultConsistencyLevel)[keyof typeof DefaultConsistencyLevel];
export declare const IndexKind: {
    readonly Hash: "Hash";
    readonly Range: "Range";
    readonly Spatial: "Spatial";
};
/**
 * Indicates the type of index.
 */
export declare type IndexKind = (typeof IndexKind)[keyof typeof IndexKind];
export declare const IndexingMode: {
    readonly Consistent: "Consistent";
    readonly Lazy: "Lazy";
    readonly None: "None";
};
/**
 * Indicates the indexing mode.
 */
export declare type IndexingMode = (typeof IndexingMode)[keyof typeof IndexingMode];
export declare const PartitionKind: {
    readonly Hash: "Hash";
    readonly Range: "Range";
};
/**
 * Indicates the kind of algorithm used for partitioning
 */
export declare type PartitionKind = (typeof PartitionKind)[keyof typeof PartitionKind];
export declare const ServerVersion: {
    readonly ServerVersion_3_2: "3.2";
    readonly ServerVersion_3_6: "3.6";
};
/**
 * Describes the ServerVersion of an a MongoDB account.
 */
export declare type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const SpatialType: {
    readonly Point: "Point";
    readonly LineString: "LineString";
    readonly Polygon: "Polygon";
    readonly MultiPolygon: "MultiPolygon";
};
/**
 * Indicates the spatial type of index.
 */
export declare type SpatialType = (typeof SpatialType)[keyof typeof SpatialType];
export declare const TriggerOperation: {
    readonly All: "All";
    readonly Create: "Create";
    readonly Update: "Update";
    readonly Delete: "Delete";
    readonly Replace: "Replace";
};
/**
 * The operation the trigger is associated with
 */
export declare type TriggerOperation = (typeof TriggerOperation)[keyof typeof TriggerOperation];
export declare const TriggerType: {
    readonly Pre: "Pre";
    readonly Post: "Post";
};
/**
 * Type of the Trigger
 */
export declare type TriggerType = (typeof TriggerType)[keyof typeof TriggerType];
