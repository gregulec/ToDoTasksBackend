import * as v20150401 from "./v20150401";
import * as v20150408 from "./v20150408";
import * as v20151106 from "./v20151106";
import * as v20160319 from "./v20160319";
import * as v20160331 from "./v20160331";
import * as v20190801 from "./v20190801";
import * as v20191212 from "./v20191212";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200601preview from "./v20200601preview";
import * as v20200901 from "./v20200901";
import * as v20210115 from "./v20210115";
import * as v20210301preview from "./v20210301preview";
import * as v20210315 from "./v20210315";
import * as v20210401preview from "./v20210401preview";
import * as v20210415 from "./v20210415";
import * as v20210515 from "./v20210515";
import * as v20210615 from "./v20210615";
export { v20150401, v20150408, v20151106, v20160319, v20160331, v20190801, v20191212, v20200301, v20200401, v20200601preview, v20200901, v20210115, v20210301preview, v20210315, v20210401preview, v20210415, v20210515, v20210615, };
export declare const AuthenticationMethod: {
    readonly None: "None";
    readonly Cassandra: "Cassandra";
};
/**
 * Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
 */
export declare type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];
export declare const BackupPolicyType: {
    readonly Periodic: "Periodic";
    readonly Continuous: "Continuous";
};
/**
 * Describes the mode of backups.
 */
export declare type BackupPolicyType = (typeof BackupPolicyType)[keyof typeof BackupPolicyType];
export declare const CompositePathSortOrder: {
    readonly Ascending: "ascending";
    readonly Descending: "descending";
};
/**
 * Sort order for composite paths.
 */
export declare type CompositePathSortOrder = (typeof CompositePathSortOrder)[keyof typeof CompositePathSortOrder];
export declare const ConflictResolutionMode: {
    readonly LastWriterWins: "LastWriterWins";
    readonly Custom: "Custom";
};
/**
 * Indicates the conflict resolution mode.
 */
export declare type ConflictResolutionMode = (typeof ConflictResolutionMode)[keyof typeof ConflictResolutionMode];
export declare const ConnectorOffer: {
    readonly Small: "Small";
};
/**
 * The cassandra connector offer type for the Cosmos DB database C* account.
 */
export declare type ConnectorOffer = (typeof ConnectorOffer)[keyof typeof ConnectorOffer];
export declare const DataType: {
    readonly String: "String";
    readonly Number: "Number";
    readonly Point: "Point";
    readonly Polygon: "Polygon";
    readonly LineString: "LineString";
    readonly MultiPolygon: "MultiPolygon";
};
/**
 * The datatype for which the indexing behavior is applied to.
 */
export declare type DataType = (typeof DataType)[keyof typeof DataType];
export declare const DatabaseAccountKind: {
    readonly GlobalDocumentDB: "GlobalDocumentDB";
    readonly MongoDB: "MongoDB";
    readonly Parse: "Parse";
};
/**
 * Indicates the type of database account. This can only be set at database account creation.
 */
export declare type DatabaseAccountKind = (typeof DatabaseAccountKind)[keyof typeof DatabaseAccountKind];
export declare const DatabaseAccountOfferType: {
    readonly Standard: "Standard";
};
/**
 * The offer type for the database
 */
export declare type DatabaseAccountOfferType = (typeof DatabaseAccountOfferType)[keyof typeof DatabaseAccountOfferType];
export declare const DefaultConsistencyLevel: {
    readonly Eventual: "Eventual";
    readonly Session: "Session";
    readonly BoundedStaleness: "BoundedStaleness";
    readonly Strong: "Strong";
    readonly ConsistentPrefix: "ConsistentPrefix";
};
/**
 * The default consistency level and configuration settings of the Cosmos DB account.
 */
export declare type DefaultConsistencyLevel = (typeof DefaultConsistencyLevel)[keyof typeof DefaultConsistencyLevel];
export declare const IndexKind: {
    readonly Hash: "Hash";
    readonly Range: "Range";
    readonly Spatial: "Spatial";
};
/**
 * Indicates the type of index.
 */
export declare type IndexKind = (typeof IndexKind)[keyof typeof IndexKind];
export declare const IndexingMode: {
    readonly Consistent: "consistent";
    readonly Lazy: "lazy";
    readonly None: "none";
};
/**
 * Indicates the indexing mode.
 */
export declare type IndexingMode = (typeof IndexingMode)[keyof typeof IndexingMode];
export declare const ManagedCassandraProvisioningState: {
    readonly Creating: "Creating";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
};
/**
 * The status of the resource at the time the operation was called.
 */
export declare type ManagedCassandraProvisioningState = (typeof ManagedCassandraProvisioningState)[keyof typeof ManagedCassandraProvisioningState];
export declare const NetworkAclBypass: {
    readonly None: "None";
    readonly AzureServices: "AzureServices";
};
/**
 * Indicates what services are allowed to bypass firewall checks.
 */
export declare type NetworkAclBypass = (typeof NetworkAclBypass)[keyof typeof NetworkAclBypass];
export declare const PartitionKind: {
    readonly Hash: "Hash";
    readonly Range: "Range";
    readonly MultiHash: "MultiHash";
};
/**
 * Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
 */
export declare type PartitionKind = (typeof PartitionKind)[keyof typeof PartitionKind];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether requests from Public Network are allowed
 */
export declare type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RoleDefinitionType: {
    readonly BuiltInRole: "BuiltInRole";
    readonly CustomRole: "CustomRole";
};
/**
 * Indicates whether the Role Definition was built-in or user created.
 */
export declare type RoleDefinitionType = (typeof RoleDefinitionType)[keyof typeof RoleDefinitionType];
export declare const ServerVersion: {
    readonly ServerVersion_3_2: "3.2";
    readonly ServerVersion_3_6: "3.6";
    readonly ServerVersion_4_0: "4.0";
};
/**
 * Describes the ServerVersion of an a MongoDB account.
 */
export declare type ServerVersion = (typeof ServerVersion)[keyof typeof ServerVersion];
export declare const ServiceSize: {
    readonly Cosmos_D4s: "Cosmos.D4s";
    readonly Cosmos_D8s: "Cosmos.D8s";
    readonly Cosmos_D16s: "Cosmos.D16s";
};
/**
 * Instance type for the service.
 */
export declare type ServiceSize = (typeof ServiceSize)[keyof typeof ServiceSize];
export declare const ServiceType: {
    readonly SqlDedicatedGateway: "SqlDedicatedGateway";
    readonly DataTransfer: "DataTransfer";
};
/**
 * ServiceType for the service.
 */
export declare type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
export declare const SpatialType: {
    readonly Point: "Point";
    readonly LineString: "LineString";
    readonly Polygon: "Polygon";
    readonly MultiPolygon: "MultiPolygon";
};
/**
 * Indicates the spatial type of index.
 */
export declare type SpatialType = (typeof SpatialType)[keyof typeof SpatialType];
export declare const TriggerOperation: {
    readonly All: "All";
    readonly Create: "Create";
    readonly Update: "Update";
    readonly Delete: "Delete";
    readonly Replace: "Replace";
};
/**
 * The operation the trigger is associated with
 */
export declare type TriggerOperation = (typeof TriggerOperation)[keyof typeof TriggerOperation];
export declare const TriggerType: {
    readonly Pre: "Pre";
    readonly Post: "Post";
};
/**
 * Type of the Trigger
 */
export declare type TriggerType = (typeof TriggerType)[keyof typeof TriggerType];
