import * as v20180301preview from "./v20180301preview";
import * as v20181119 from "./v20181119";
import * as v20190501 from "./v20190501";
import * as v20190601 from "./v20190601";
import * as v20191101 from "./v20191101";
import * as v20200101 from "./v20200101";
import * as v20200218preview from "./v20200218preview";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200501preview from "./v20200501preview";
import * as v20200515preview from "./v20200515preview";
import * as v20200601 from "./v20200601";
import * as v20200801 from "./v20200801";
import * as v20200901preview from "./v20200901preview";
import * as v20210101 from "./v20210101";
import * as v20210301preview from "./v20210301preview";
import * as v20210401 from "./v20210401";
import * as v20210701 from "./v20210701";
export { v20180301preview, v20181119, v20190501, v20190601, v20191101, v20200101, v20200218preview, v20200301, v20200401, v20200501preview, v20200515preview, v20200601, v20200801, v20200901preview, v20210101, v20210301preview, v20210401, v20210701, };
export declare const ApplicationSharingPolicy: {
    readonly Personal: "Personal";
    readonly Shared: "Shared";
};
/**
 * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
 */
export declare type ApplicationSharingPolicy = (typeof ApplicationSharingPolicy)[keyof typeof ApplicationSharingPolicy];
export declare const BatchLoggingLevel: {
    readonly Info: "Info";
    readonly Warning: "Warning";
    readonly Debug: "Debug";
};
/**
 * Logging level for batch inference operation.
 */
export declare type BatchLoggingLevel = (typeof BatchLoggingLevel)[keyof typeof BatchLoggingLevel];
export declare const BatchOutputAction: {
    readonly SummaryOnly: "SummaryOnly";
    readonly AppendRow: "AppendRow";
};
/**
 * Indicates how the output will be organized.
 */
export declare type BatchOutputAction = (typeof BatchOutputAction)[keyof typeof BatchOutputAction];
export declare const ClusterPurpose: {
    readonly FastProd: "FastProd";
    readonly DenseProd: "DenseProd";
    readonly DevTest: "DevTest";
};
/**
 * Intended usage of the cluster
 */
export declare type ClusterPurpose = (typeof ClusterPurpose)[keyof typeof ClusterPurpose];
export declare const ComputeEnvironmentType: {
    readonly ACI: "ACI";
    readonly AKS: "AKS";
};
/**
 * The compute environment type for the service.
 */
export declare type ComputeEnvironmentType = (typeof ComputeEnvironmentType)[keyof typeof ComputeEnvironmentType];
export declare const ComputeInstanceAuthorizationType: {
    readonly Personal: "personal";
};
/**
 * The Compute Instance Authorization type. Available values are personal (default).
 */
export declare type ComputeInstanceAuthorizationType = (typeof ComputeInstanceAuthorizationType)[keyof typeof ComputeInstanceAuthorizationType];
export declare const ComputeType: {
    readonly AKS: "AKS";
    readonly AmlCompute: "AmlCompute";
    readonly ComputeInstance: "ComputeInstance";
    readonly DataFactory: "DataFactory";
    readonly VirtualMachine: "VirtualMachine";
    readonly HDInsight: "HDInsight";
    readonly Databricks: "Databricks";
    readonly DataLakeAnalytics: "DataLakeAnalytics";
};
/**
 * The type of compute
 */
export declare type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export declare const ContainerType: {
    readonly StorageInitializer: "StorageInitializer";
    readonly InferenceServer: "InferenceServer";
};
/**
 * The type of container to retrieve logs from.
 */
export declare type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];
export declare const DataBindingMode: {
    readonly Mount: "Mount";
    readonly Download: "Download";
    readonly Upload: "Upload";
};
/**
 * Mechanism for data movement to datastore.
 */
export declare type DataBindingMode = (typeof DataBindingMode)[keyof typeof DataBindingMode];
export declare const DatasetType: {
    readonly Tabular: "tabular";
    readonly File: "file";
};
/**
 * Specifies dataset type.
 */
export declare type DatasetType = (typeof DatasetType)[keyof typeof DatasetType];
export declare const DatastoreTypeArm: {
    readonly Blob: "blob";
    readonly Adls: "adls";
    readonly Adls_gen2: "adls-gen2";
    readonly Dbfs: "dbfs";
    readonly File: "file";
    readonly Mysqldb: "mysqldb";
    readonly Sqldb: "sqldb";
    readonly Psqldb: "psqldb";
};
/**
 * Specifies datastore type.
 */
export declare type DatastoreTypeArm = (typeof DatastoreTypeArm)[keyof typeof DatastoreTypeArm];
export declare const DistributionType: {
    readonly PyTorch: "PyTorch";
    readonly TensorFlow: "TensorFlow";
    readonly Mpi: "Mpi";
};
/**
 * Specifies the type of distribution framework.
 */
export declare type DistributionType = (typeof DistributionType)[keyof typeof DistributionType];
export declare const DockerSpecificationType: {
    readonly Build: "Build";
    readonly Image: "Image";
};
/**
 * Docker specification must be either Build or Image
 */
export declare type DockerSpecificationType = (typeof DockerSpecificationType)[keyof typeof DockerSpecificationType];
export declare const EarlyTerminationPolicyType: {
    readonly Bandit: "Bandit";
    readonly MedianStopping: "MedianStopping";
    readonly TruncationSelection: "TruncationSelection";
};
/**
 * Name of policy configuration
 */
export declare type EarlyTerminationPolicyType = (typeof EarlyTerminationPolicyType)[keyof typeof EarlyTerminationPolicyType];
export declare const EncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether or not the encryption is enabled for the workspace.
 */
export declare type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];
export declare const EndpointAuthMode: {
    readonly AMLToken: "AMLToken";
    readonly Key: "Key";
    readonly AADToken: "AADToken";
};
/**
 * Inference endpoint authentication mode type
 */
export declare type EndpointAuthMode = (typeof EndpointAuthMode)[keyof typeof EndpointAuthMode];
export declare const EndpointComputeType: {
    readonly Managed: "Managed";
    readonly K8S: "K8S";
    readonly AzureMLCompute: "AzureMLCompute";
};
/**
 * The compute type of the endpoint.
 */
export declare type EndpointComputeType = (typeof EndpointComputeType)[keyof typeof EndpointComputeType];
export declare const Goal: {
    readonly Minimize: "Minimize";
    readonly Maximize: "Maximize";
};
/**
 * Defines supported metric goals for hyperparameter tuning
 */
export declare type Goal = (typeof Goal)[keyof typeof Goal];
export declare const Header: {
    readonly All_files_have_same_headers: "all_files_have_same_headers";
    readonly Only_first_file_has_headers: "only_first_file_has_headers";
    readonly No_headers: "no_headers";
    readonly Combine_all_files_headers: "combine_all_files_headers";
};
/**
 * Header type.
 */
export declare type Header = (typeof Header)[keyof typeof Header];
export declare const IdentityConfigurationType: {
    readonly Managed: "Managed";
    readonly AMLToken: "AMLToken";
};
/**
 * Specifies the type of identity framework.
 */
export declare type IdentityConfigurationType = (typeof IdentityConfigurationType)[keyof typeof IdentityConfigurationType];
export declare const ImageAnnotationType: {
    readonly Classification: "Classification";
    readonly BoundingBox: "BoundingBox";
    readonly InstanceSegmentation: "InstanceSegmentation";
};
/**
 * Annotation type of image labeling tasks.
 */
export declare type ImageAnnotationType = (typeof ImageAnnotationType)[keyof typeof ImageAnnotationType];
export declare const JobType: {
    readonly Command: "Command";
    readonly Sweep: "Sweep";
    readonly Labeling: "Labeling";
};
/**
 * Specifies the type of job.
 */
export declare type JobType = (typeof JobType)[keyof typeof JobType];
export declare const LinkedServiceLinkType: {
    readonly Synapse: "Synapse";
};
/**
 * Type of the link target.
 */
export declare type LinkedServiceLinkType = (typeof LinkedServiceLinkType)[keyof typeof LinkedServiceLinkType];
export declare const MediaType: {
    readonly Image: "Image";
    readonly Text: "Text";
};
/**
 * Media type of data asset.
 */
export declare type MediaType = (typeof MediaType)[keyof typeof MediaType];
export declare const OperatingSystemType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The OS type the Environment.
 */
export declare type OperatingSystemType = (typeof OperatingSystemType)[keyof typeof OperatingSystemType];
export declare const OsType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * Compute OS Type
 */
export declare type OsType = (typeof OsType)[keyof typeof OsType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
    readonly Timeout: "Timeout";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const ReferenceType: {
    readonly Id: "Id";
    readonly DataPath: "DataPath";
    readonly OutputPath: "OutputPath";
};
/**
 * Specifies the type of asset reference.
 */
export declare type ReferenceType = (typeof ReferenceType)[keyof typeof ReferenceType];
export declare const RemoteLoginPortPublicAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly NotSpecified: "NotSpecified";
};
/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
 */
export declare type RemoteLoginPortPublicAccess = (typeof RemoteLoginPortPublicAccess)[keyof typeof RemoteLoginPortPublicAccess];
export declare const ResourceIdentityAssignment: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly None: "None";
};
/**
 * Defines values for a ResourceIdentity's type.
 */
export declare type ResourceIdentityAssignment = (typeof ResourceIdentityAssignment)[keyof typeof ResourceIdentityAssignment];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SamplingAlgorithm: {
    readonly Grid: "Grid";
    readonly Random: "Random";
    readonly Bayesian: "Bayesian";
};
/**
 * Type of the hyperparameter sampling algorithms
 */
export declare type SamplingAlgorithm = (typeof SamplingAlgorithm)[keyof typeof SamplingAlgorithm];
export declare const ScaleType: {
    readonly Auto: "Auto";
    readonly Manual: "Manual";
};
/**
 * Type of deployment scaling algorithm
 */
export declare type ScaleType = (typeof ScaleType)[keyof typeof ScaleType];
export declare const SourceType: {
    readonly Delimited_files: "delimited_files";
    readonly Json_lines_files: "json_lines_files";
    readonly Parquet_files: "parquet_files";
};
/**
 * Data source type.
 */
export declare type SourceType = (typeof SourceType)[keyof typeof SourceType];
export declare const SshPublicAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
 */
export declare type SshPublicAccess = (typeof SshPublicAccess)[keyof typeof SshPublicAccess];
export declare const ValueFormat: {
    readonly JSON: "JSON";
};
/**
 * format for the workspace connection value
 */
export declare type ValueFormat = (typeof ValueFormat)[keyof typeof ValueFormat];
export declare const VariantType: {
    readonly Control: "Control";
    readonly Treatment: "Treatment";
};
/**
 * The type of the variant.
 */
export declare type VariantType = (typeof VariantType)[keyof typeof VariantType];
export declare const VmPriority: {
    readonly Dedicated: "Dedicated";
    readonly LowPriority: "LowPriority";
};
/**
 * Virtual Machine priority
 */
export declare type VmPriority = (typeof VmPriority)[keyof typeof VmPriority];
