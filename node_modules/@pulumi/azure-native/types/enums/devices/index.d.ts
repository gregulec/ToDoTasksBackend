import * as v20160203 from "./v20160203";
import * as v20170119 from "./v20170119";
import * as v20170701 from "./v20170701";
import * as v20170821preview from "./v20170821preview";
import * as v20171115 from "./v20171115";
import * as v20180122 from "./v20180122";
import * as v20180401 from "./v20180401";
import * as v20181201preview from "./v20181201preview";
import * as v20190322 from "./v20190322";
import * as v20190322preview from "./v20190322preview";
import * as v20190701preview from "./v20190701preview";
import * as v20191104 from "./v20191104";
import * as v20200101 from "./v20200101";
import * as v20200301 from "./v20200301";
import * as v20200401 from "./v20200401";
import * as v20200615 from "./v20200615";
import * as v20200710preview from "./v20200710preview";
import * as v20200801 from "./v20200801";
import * as v20200831 from "./v20200831";
import * as v20200831preview from "./v20200831preview";
import * as v20200901preview from "./v20200901preview";
import * as v20210201preview from "./v20210201preview";
import * as v20210303preview from "./v20210303preview";
import * as v20210331 from "./v20210331";
import * as v20210701 from "./v20210701";
import * as v20210701preview from "./v20210701preview";
export { v20160203, v20170119, v20170701, v20170821preview, v20171115, v20180122, v20180401, v20181201preview, v20190322, v20190322preview, v20190701preview, v20191104, v20200101, v20200301, v20200401, v20200615, v20200710preview, v20200801, v20200831, v20200831preview, v20200901preview, v20210201preview, v20210303preview, v20210331, v20210701, v20210701preview, };
export declare const AccessRights: {
    readonly RegistryRead: "RegistryRead";
    readonly RegistryWrite: "RegistryWrite";
    readonly ServiceConnect: "ServiceConnect";
    readonly DeviceConnect: "DeviceConnect";
    readonly RegistryRead_RegistryWrite: "RegistryRead, RegistryWrite";
    readonly RegistryRead_ServiceConnect: "RegistryRead, ServiceConnect";
    readonly RegistryRead_DeviceConnect: "RegistryRead, DeviceConnect";
    readonly RegistryWrite_ServiceConnect: "RegistryWrite, ServiceConnect";
    readonly RegistryWrite_DeviceConnect: "RegistryWrite, DeviceConnect";
    readonly ServiceConnect_DeviceConnect: "ServiceConnect, DeviceConnect";
    readonly RegistryRead_RegistryWrite_ServiceConnect: "RegistryRead, RegistryWrite, ServiceConnect";
    readonly RegistryRead_RegistryWrite_DeviceConnect: "RegistryRead, RegistryWrite, DeviceConnect";
    readonly RegistryRead_ServiceConnect_DeviceConnect: "RegistryRead, ServiceConnect, DeviceConnect";
    readonly RegistryWrite_ServiceConnect_DeviceConnect: "RegistryWrite, ServiceConnect, DeviceConnect";
    readonly RegistryRead_RegistryWrite_ServiceConnect_DeviceConnect: "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect";
};
/**
 * The permissions assigned to the shared access policy.
 */
export declare type AccessRights = (typeof AccessRights)[keyof typeof AccessRights];
export declare const AccessRightsDescription: {
    readonly ServiceConfig: "ServiceConfig";
    readonly EnrollmentRead: "EnrollmentRead";
    readonly EnrollmentWrite: "EnrollmentWrite";
    readonly DeviceConnect: "DeviceConnect";
    readonly RegistrationStatusRead: "RegistrationStatusRead";
    readonly RegistrationStatusWrite: "RegistrationStatusWrite";
};
/**
 * Rights that this key has.
 */
export declare type AccessRightsDescription = (typeof AccessRightsDescription)[keyof typeof AccessRightsDescription];
export declare const AllocationPolicy: {
    readonly Hashed: "Hashed";
    readonly GeoLatency: "GeoLatency";
    readonly Static: "Static";
};
/**
 * Allocation policy to be used by this provisioning service.
 */
export declare type AllocationPolicy = (typeof AllocationPolicy)[keyof typeof AllocationPolicy];
export declare const AuthenticationType: {
    readonly KeyBased: "keyBased";
    readonly IdentityBased: "identityBased";
};
/**
 * Specifies authentication type being used for connecting to the storage account.
 */
export declare type AuthenticationType = (typeof AuthenticationType)[keyof typeof AuthenticationType];
export declare const Capabilities: {
    readonly None: "None";
    readonly DeviceManagement: "DeviceManagement";
};
/**
 * The capabilities and features enabled for the IoT hub.
 */
export declare type Capabilities = (typeof Capabilities)[keyof typeof Capabilities];
export declare const DefaultAction: {
    readonly Deny: "Deny";
    readonly Allow: "Allow";
};
/**
 * Default Action for Network Rule Set
 */
export declare type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const IotDpsSku: {
    readonly S1: "S1";
};
/**
 * Sku name.
 */
export declare type IotDpsSku = (typeof IotDpsSku)[keyof typeof IotDpsSku];
export declare const IotHubSku: {
    readonly F1: "F1";
    readonly S1: "S1";
    readonly S2: "S2";
    readonly S3: "S3";
    readonly B1: "B1";
    readonly B2: "B2";
    readonly B3: "B3";
};
/**
 * The name of the SKU.
 */
export declare type IotHubSku = (typeof IotHubSku)[keyof typeof IotHubSku];
export declare const IpFilterActionType: {
    readonly Accept: "Accept";
    readonly Reject: "Reject";
};
/**
 * The desired action for requests captured by this rule.
 */
export declare type IpFilterActionType = (typeof IpFilterActionType)[keyof typeof IpFilterActionType];
export declare const IpFilterTargetType: {
    readonly All: "all";
    readonly ServiceApi: "serviceApi";
    readonly DeviceApi: "deviceApi";
};
/**
 * Target for requests captured by this rule.
 */
export declare type IpFilterTargetType = (typeof IpFilterTargetType)[keyof typeof IpFilterTargetType];
export declare const NetworkRuleIPAction: {
    readonly Allow: "Allow";
};
/**
 * IP Filter Action
 */
export declare type NetworkRuleIPAction = (typeof NetworkRuleIPAction)[keyof typeof NetworkRuleIPAction];
export declare const PrivateLinkServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * The status of a private endpoint connection
 */
export declare type PrivateLinkServiceConnectionStatus = (typeof PrivateLinkServiceConnectionStatus)[keyof typeof PrivateLinkServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether requests from Public Network are allowed
 */
export declare type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RoutingSource: {
    readonly Invalid: "Invalid";
    readonly DeviceMessages: "DeviceMessages";
    readonly TwinChangeEvents: "TwinChangeEvents";
    readonly DeviceLifecycleEvents: "DeviceLifecycleEvents";
    readonly DeviceJobLifecycleEvents: "DeviceJobLifecycleEvents";
};
/**
 * The source that the routing rule is to be applied to, such as DeviceMessages.
 */
export declare type RoutingSource = (typeof RoutingSource)[keyof typeof RoutingSource];
export declare const State: {
    readonly Activating: "Activating";
    readonly Active: "Active";
    readonly Deleting: "Deleting";
    readonly Deleted: "Deleted";
    readonly ActivationFailed: "ActivationFailed";
    readonly DeletionFailed: "DeletionFailed";
    readonly Transitioning: "Transitioning";
    readonly Suspending: "Suspending";
    readonly Suspended: "Suspended";
    readonly Resuming: "Resuming";
    readonly FailingOver: "FailingOver";
    readonly FailoverFailed: "FailoverFailed";
};
/**
 * Current state of the provisioning service.
 */
export declare type State = (typeof State)[keyof typeof State];
