export declare const AccessRights: {
    readonly RegistryRead: "RegistryRead";
    readonly RegistryWrite: "RegistryWrite";
    readonly ServiceConnect: "ServiceConnect";
    readonly DeviceConnect: "DeviceConnect";
    readonly RegistryRead_RegistryWrite: "RegistryRead, RegistryWrite";
    readonly RegistryRead_ServiceConnect: "RegistryRead, ServiceConnect";
    readonly RegistryRead_DeviceConnect: "RegistryRead, DeviceConnect";
    readonly RegistryWrite_ServiceConnect: "RegistryWrite, ServiceConnect";
    readonly RegistryWrite_DeviceConnect: "RegistryWrite, DeviceConnect";
    readonly ServiceConnect_DeviceConnect: "ServiceConnect, DeviceConnect";
    readonly RegistryRead_RegistryWrite_ServiceConnect: "RegistryRead, RegistryWrite, ServiceConnect";
    readonly RegistryRead_RegistryWrite_DeviceConnect: "RegistryRead, RegistryWrite, DeviceConnect";
    readonly RegistryRead_ServiceConnect_DeviceConnect: "RegistryRead, ServiceConnect, DeviceConnect";
    readonly RegistryWrite_ServiceConnect_DeviceConnect: "RegistryWrite, ServiceConnect, DeviceConnect";
    readonly RegistryRead_RegistryWrite_ServiceConnect_DeviceConnect: "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect";
};
/**
 * The permissions assigned to the shared access policy.
 */
export declare type AccessRights = (typeof AccessRights)[keyof typeof AccessRights];
export declare const Capabilities: {
    readonly None: "None";
    readonly DeviceManagement: "DeviceManagement";
};
/**
 * The capabilities and features enabled for the IoT hub.
 */
export declare type Capabilities = (typeof Capabilities)[keyof typeof Capabilities];
export declare const IotHubSku: {
    readonly F1: "F1";
    readonly S1: "S1";
    readonly S2: "S2";
    readonly S3: "S3";
    readonly B1: "B1";
    readonly B2: "B2";
    readonly B3: "B3";
};
/**
 * The name of the SKU.
 */
export declare type IotHubSku = (typeof IotHubSku)[keyof typeof IotHubSku];
export declare const IpFilterActionType: {
    readonly Accept: "Accept";
    readonly Reject: "Reject";
};
/**
 * The desired action for requests captured by this rule.
 */
export declare type IpFilterActionType = (typeof IpFilterActionType)[keyof typeof IpFilterActionType];
export declare const RoutingSource: {
    readonly Invalid: "Invalid";
    readonly DeviceMessages: "DeviceMessages";
    readonly TwinChangeEvents: "TwinChangeEvents";
    readonly DeviceLifecycleEvents: "DeviceLifecycleEvents";
    readonly DeviceJobLifecycleEvents: "DeviceJobLifecycleEvents";
    readonly DigitalTwinChangeEvents: "DigitalTwinChangeEvents";
};
/**
 * The source that the routing rule is to be applied to, such as DeviceMessages.
 */
export declare type RoutingSource = (typeof RoutingSource)[keyof typeof RoutingSource];
