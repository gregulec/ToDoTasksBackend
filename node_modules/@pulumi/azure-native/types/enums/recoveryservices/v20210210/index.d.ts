export declare const AgentAutoUpdateStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * A value indicating whether the auto update is enabled.
 */
export declare type AgentAutoUpdateStatus = (typeof AgentAutoUpdateStatus)[keyof typeof AgentAutoUpdateStatus];
export declare const BackupItemType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
};
/**
 * Type of backup items associated with this container.
 */
export declare type BackupItemType = (typeof BackupItemType)[keyof typeof BackupItemType];
export declare const BackupManagementType: {
    readonly Invalid: "Invalid";
    readonly AzureIaasVM: "AzureIaasVM";
    readonly MAB: "MAB";
    readonly DPM: "DPM";
    readonly AzureBackupServer: "AzureBackupServer";
    readonly AzureSql: "AzureSql";
    readonly AzureStorage: "AzureStorage";
    readonly AzureWorkload: "AzureWorkload";
    readonly DefaultBackup: "DefaultBackup";
};
/**
 * Type of backup management for the backed up item.
 */
export declare type BackupManagementType = (typeof BackupManagementType)[keyof typeof BackupManagementType];
export declare const ContainerType: {
    readonly Invalid: "Invalid";
    readonly Unknown: "Unknown";
    readonly IaasVMContainer: "IaasVMContainer";
    readonly IaasVMServiceContainer: "IaasVMServiceContainer";
    readonly DPMContainer: "DPMContainer";
    readonly AzureBackupServerContainer: "AzureBackupServerContainer";
    readonly MABContainer: "MABContainer";
    readonly Cluster: "Cluster";
    readonly AzureSqlContainer: "AzureSqlContainer";
    readonly Windows: "Windows";
    readonly VCenter: "VCenter";
    readonly VMAppContainer: "VMAppContainer";
    readonly SQLAGWorkLoadContainer: "SQLAGWorkLoadContainer";
    readonly StorageContainer: "StorageContainer";
    readonly GenericContainer: "GenericContainer";
};
/**
 * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
 * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
 * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
 * Backup is VMAppContainer
 */
export declare type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];
export declare const CreateMode: {
    readonly Invalid: "Invalid";
    readonly Default: "Default";
    readonly Recover: "Recover";
};
/**
 * Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
 */
export declare type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DataSourceType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
};
/**
 * Type of workload this item represents.
 */
export declare type DataSourceType = (typeof DataSourceType)[keyof typeof DataSourceType];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export declare type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DiskAccountType: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Premium_LRS: "Premium_LRS";
    readonly StandardSSD_LRS: "StandardSSD_LRS";
};
/**
 * The disk type.
 */
export declare type DiskAccountType = (typeof DiskAccountType)[keyof typeof DiskAccountType];
export declare const FailoverDeploymentModel: {
    readonly NotApplicable: "NotApplicable";
    readonly Classic: "Classic";
    readonly ResourceManager: "ResourceManager";
};
/**
 * The failover deployment model.
 */
export declare type FailoverDeploymentModel = (typeof FailoverDeploymentModel)[keyof typeof FailoverDeploymentModel];
export declare const HealthStatus: {
    readonly Passed: "Passed";
    readonly ActionRequired: "ActionRequired";
    readonly ActionSuggested: "ActionSuggested";
    readonly Invalid: "Invalid";
};
/**
 * Health status of protected item.
 */
export declare type HealthStatus = (typeof HealthStatus)[keyof typeof HealthStatus];
export declare const InfrastructureEncryptionState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enabling/Disabling the Double Encryption state
 */
export declare type InfrastructureEncryptionState = (typeof InfrastructureEncryptionState)[keyof typeof InfrastructureEncryptionState];
export declare const LastBackupStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly IRPending: "IRPending";
};
/**
 * Last backup operation status. Possible values: Healthy, Unhealthy.
 */
export declare type LastBackupStatus = (typeof LastBackupStatus)[keyof typeof LastBackupStatus];
export declare const LicenseType: {
    readonly NotSpecified: "NotSpecified";
    readonly NoLicenseType: "NoLicenseType";
    readonly WindowsServer: "WindowsServer";
};
/**
 * The license type.
 */
export declare type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];
export declare const MonthOfYear: {
    readonly Invalid: "Invalid";
    readonly January: "January";
    readonly February: "February";
    readonly March: "March";
    readonly April: "April";
    readonly May: "May";
    readonly June: "June";
    readonly July: "July";
    readonly August: "August";
    readonly September: "September";
    readonly October: "October";
    readonly November: "November";
    readonly December: "December";
};
export declare type MonthOfYear = (typeof MonthOfYear)[keyof typeof MonthOfYear];
export declare const OperationType: {
    readonly Invalid: "Invalid";
    readonly Register: "Register";
    readonly Reregister: "Reregister";
};
/**
 * Re-Do Operation
 */
export declare type OperationType = (typeof OperationType)[keyof typeof OperationType];
export declare const PolicyType: {
    readonly Invalid: "Invalid";
    readonly Full: "Full";
    readonly Differential: "Differential";
    readonly Log: "Log";
    readonly CopyOnlyFull: "CopyOnlyFull";
    readonly Incremental: "Incremental";
};
/**
 * Type of backup policy type
 */
export declare type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const PossibleOperationsDirections: {
    readonly PrimaryToRecovery: "PrimaryToRecovery";
    readonly RecoveryToPrimary: "RecoveryToPrimary";
};
export declare type PossibleOperationsDirections = (typeof PossibleOperationsDirections)[keyof typeof PossibleOperationsDirections];
export declare const PrivateEndpointConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Gets or sets the status
 */
export declare type PrivateEndpointConnectionStatus = (typeof PrivateEndpointConnectionStatus)[keyof typeof PrivateEndpointConnectionStatus];
export declare const ProtectedItemHealthStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly NotReachable: "NotReachable";
    readonly IRPending: "IRPending";
};
/**
 * Health status of the backup item, evaluated based on last heartbeat received
 */
export declare type ProtectedItemHealthStatus = (typeof ProtectedItemHealthStatus)[keyof typeof ProtectedItemHealthStatus];
export declare const ProtectedItemState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
};
/**
 * Protection state of the backup engine
 */
export declare type ProtectedItemState = (typeof ProtectedItemState)[keyof typeof ProtectedItemState];
export declare const ProtectionState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
};
/**
 * Backup state of this backup item.
 */
export declare type ProtectionState = (typeof ProtectionState)[keyof typeof ProtectionState];
export declare const ProtectionStatus: {
    readonly Invalid: "Invalid";
    readonly NotProtected: "NotProtected";
    readonly Protecting: "Protecting";
    readonly Protected: "Protected";
    readonly ProtectionFailed: "ProtectionFailed";
};
/**
 * Backup state of this backup item.
 */
export declare type ProtectionStatus = (typeof ProtectionStatus)[keyof typeof ProtectionStatus];
export declare const ProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly Deleting: "Deleting";
    readonly Failed: "Failed";
    readonly Pending: "Pending";
};
/**
 * Gets or sets provisioning state of the private endpoint connection
 */
export declare type ProvisioningState = (typeof ProvisioningState)[keyof typeof ProvisioningState];
export declare const RecoveryPlanGroupType: {
    readonly Shutdown: "Shutdown";
    readonly Boot: "Boot";
    readonly Failover: "Failover";
};
/**
 * The group type.
 */
export declare type RecoveryPlanGroupType = (typeof RecoveryPlanGroupType)[keyof typeof RecoveryPlanGroupType];
export declare const ReplicationProtectedItemOperation: {
    readonly ReverseReplicate: "ReverseReplicate";
    readonly Commit: "Commit";
    readonly PlannedFailover: "PlannedFailover";
    readonly UnplannedFailover: "UnplannedFailover";
    readonly DisableProtection: "DisableProtection";
    readonly TestFailover: "TestFailover";
    readonly TestFailoverCleanup: "TestFailoverCleanup";
    readonly Failback: "Failback";
    readonly FinalizeFailback: "FinalizeFailback";
    readonly CancelFailover: "CancelFailover";
    readonly ChangePit: "ChangePit";
    readonly RepairReplication: "RepairReplication";
    readonly SwitchProtection: "SwitchProtection";
    readonly CompleteMigration: "CompleteMigration";
};
export declare type ReplicationProtectedItemOperation = (typeof ReplicationProtectedItemOperation)[keyof typeof ReplicationProtectedItemOperation];
export declare const ResourceHealthStatus: {
    readonly Healthy: "Healthy";
    readonly TransientDegraded: "TransientDegraded";
    readonly PersistentDegraded: "PersistentDegraded";
    readonly TransientUnhealthy: "TransientUnhealthy";
    readonly PersistentUnhealthy: "PersistentUnhealthy";
    readonly Invalid: "Invalid";
};
/**
 * Resource Health Status
 */
export declare type ResourceHealthStatus = (typeof ResourceHealthStatus)[keyof typeof ResourceHealthStatus];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RetentionDurationType: {
    readonly Invalid: "Invalid";
    readonly Days: "Days";
    readonly Weeks: "Weeks";
    readonly Months: "Months";
    readonly Years: "Years";
};
/**
 * Retention duration type of retention policy.
 */
export declare type RetentionDurationType = (typeof RetentionDurationType)[keyof typeof RetentionDurationType];
export declare const RetentionScheduleFormat: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Retention schedule format for yearly retention policy.
 */
export declare type RetentionScheduleFormat = (typeof RetentionScheduleFormat)[keyof typeof RetentionScheduleFormat];
export declare const ScheduleRunType: {
    readonly Invalid: "Invalid";
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Frequency of the schedule operation of this policy.
 */
export declare type ScheduleRunType = (typeof ScheduleRunType)[keyof typeof ScheduleRunType];
export declare const SetMultiVmSyncStatus: {
    readonly Enable: "Enable";
    readonly Disable: "Disable";
};
/**
 * A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
 */
export declare type SetMultiVmSyncStatus = (typeof SetMultiVmSyncStatus)[keyof typeof SetMultiVmSyncStatus];
export declare const SkuName: {
    readonly Standard: "Standard";
    readonly RS0: "RS0";
};
/**
 * The Sku name.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SqlServerLicenseType: {
    readonly NotSpecified: "NotSpecified";
    readonly NoLicenseType: "NoLicenseType";
    readonly PAYG: "PAYG";
    readonly AHUB: "AHUB";
};
/**
 * The SQL Server license type.
 */
export declare type SqlServerLicenseType = (typeof SqlServerLicenseType)[keyof typeof SqlServerLicenseType];
export declare const WeekOfMonth: {
    readonly First: "First";
    readonly Second: "Second";
    readonly Third: "Third";
    readonly Fourth: "Fourth";
    readonly Last: "Last";
    readonly Invalid: "Invalid";
};
export declare type WeekOfMonth = (typeof WeekOfMonth)[keyof typeof WeekOfMonth];
export declare const WorkloadItemType: {
    readonly Invalid: "Invalid";
    readonly SQLInstance: "SQLInstance";
    readonly SQLDataBase: "SQLDataBase";
    readonly SAPHanaSystem: "SAPHanaSystem";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseSystem: "SAPAseSystem";
    readonly SAPAseDatabase: "SAPAseDatabase";
};
/**
 * Workload item type of the item for which intent is to be set
 */
export declare type WorkloadItemType = (typeof WorkloadItemType)[keyof typeof WorkloadItemType];
export declare const WorkloadType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
};
/**
 * Type of workload for the backup management
 */
export declare type WorkloadType = (typeof WorkloadType)[keyof typeof WorkloadType];
