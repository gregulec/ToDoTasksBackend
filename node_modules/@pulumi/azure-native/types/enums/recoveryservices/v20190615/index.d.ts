export declare const BackupManagementType: {
    readonly Invalid: "Invalid";
    readonly AzureIaasVM: "AzureIaasVM";
    readonly MAB: "MAB";
    readonly DPM: "DPM";
    readonly AzureBackupServer: "AzureBackupServer";
    readonly AzureSql: "AzureSql";
    readonly AzureStorage: "AzureStorage";
    readonly AzureWorkload: "AzureWorkload";
    readonly DefaultBackup: "DefaultBackup";
};
/**
 * Type of backup management for the backed up item.
 */
export declare type BackupManagementType = (typeof BackupManagementType)[keyof typeof BackupManagementType];
export declare const CreateMode: {
    readonly Invalid: "Invalid";
    readonly Default: "Default";
    readonly Recover: "Recover";
};
/**
 * Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
 */
export declare type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DataSourceType: {
    readonly Invalid: "Invalid";
    readonly VM: "VM";
    readonly FileFolder: "FileFolder";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly SQLDB: "SQLDB";
    readonly Exchange: "Exchange";
    readonly Sharepoint: "Sharepoint";
    readonly VMwareVM: "VMwareVM";
    readonly SystemState: "SystemState";
    readonly Client: "Client";
    readonly GenericDataSource: "GenericDataSource";
    readonly SQLDataBase: "SQLDataBase";
    readonly AzureFileShare: "AzureFileShare";
    readonly SAPHanaDatabase: "SAPHanaDatabase";
    readonly SAPAseDatabase: "SAPAseDatabase";
};
/**
 * Type of workload this item represents.
 */
export declare type DataSourceType = (typeof DataSourceType)[keyof typeof DataSourceType];
export declare const HealthStatus: {
    readonly Passed: "Passed";
    readonly ActionRequired: "ActionRequired";
    readonly ActionSuggested: "ActionSuggested";
    readonly Invalid: "Invalid";
};
/**
 * Health status of protected item.
 */
export declare type HealthStatus = (typeof HealthStatus)[keyof typeof HealthStatus];
export declare const LastBackupStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly IRPending: "IRPending";
};
/**
 * Last backup operation status. Possible values: Healthy, Unhealthy.
 */
export declare type LastBackupStatus = (typeof LastBackupStatus)[keyof typeof LastBackupStatus];
export declare const ProtectedItemHealthStatus: {
    readonly Invalid: "Invalid";
    readonly Healthy: "Healthy";
    readonly Unhealthy: "Unhealthy";
    readonly NotReachable: "NotReachable";
    readonly IRPending: "IRPending";
};
/**
 * Health status of the backup item, evaluated based on last heartbeat received
 */
export declare type ProtectedItemHealthStatus = (typeof ProtectedItemHealthStatus)[keyof typeof ProtectedItemHealthStatus];
export declare const ProtectedItemState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
};
/**
 * Protection state of the backup engine
 */
export declare type ProtectedItemState = (typeof ProtectedItemState)[keyof typeof ProtectedItemState];
export declare const ProtectionState: {
    readonly Invalid: "Invalid";
    readonly IRPending: "IRPending";
    readonly Protected: "Protected";
    readonly ProtectionError: "ProtectionError";
    readonly ProtectionStopped: "ProtectionStopped";
    readonly ProtectionPaused: "ProtectionPaused";
};
/**
 * Backup state of this backup item.
 */
export declare type ProtectionState = (typeof ProtectionState)[keyof typeof ProtectionState];
export declare const ResourceHealthStatus: {
    readonly Healthy: "Healthy";
    readonly TransientDegraded: "TransientDegraded";
    readonly PersistentDegraded: "PersistentDegraded";
    readonly TransientUnhealthy: "TransientUnhealthy";
    readonly PersistentUnhealthy: "PersistentUnhealthy";
    readonly Invalid: "Invalid";
};
/**
 * Resource Health Status
 */
export declare type ResourceHealthStatus = (typeof ResourceHealthStatus)[keyof typeof ResourceHealthStatus];
