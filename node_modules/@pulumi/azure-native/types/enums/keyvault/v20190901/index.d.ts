export declare const CertificatePermissions: {
    readonly All: "all";
    readonly Get: "get";
    readonly List: "list";
    readonly Delete: "delete";
    readonly Create: "create";
    readonly Import: "import";
    readonly Update: "update";
    readonly Managecontacts: "managecontacts";
    readonly Getissuers: "getissuers";
    readonly Listissuers: "listissuers";
    readonly Setissuers: "setissuers";
    readonly Deleteissuers: "deleteissuers";
    readonly Manageissuers: "manageissuers";
    readonly Recover: "recover";
    readonly Purge: "purge";
    readonly Backup: "backup";
    readonly Restore: "restore";
};
export declare type CertificatePermissions = (typeof CertificatePermissions)[keyof typeof CertificatePermissions];
export declare const CreateMode: {
    readonly Recover: "recover";
    readonly Default: "default";
};
/**
 * The vault's create mode to indicate whether the vault need to be recovered or not.
 */
export declare type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const JsonWebKeyCurveName: {
    readonly P_256: "P-256";
    readonly P_384: "P-384";
    readonly P_521: "P-521";
    readonly P_256K: "P-256K";
};
/**
 * The elliptic curve name. For valid values, see JsonWebKeyCurveName.
 */
export declare type JsonWebKeyCurveName = (typeof JsonWebKeyCurveName)[keyof typeof JsonWebKeyCurveName];
export declare const JsonWebKeyOperation: {
    readonly Encrypt: "encrypt";
    readonly Decrypt: "decrypt";
    readonly Sign: "sign";
    readonly Verify: "verify";
    readonly WrapKey: "wrapKey";
    readonly UnwrapKey: "unwrapKey";
    readonly Import: "import";
};
/**
 * The permitted JSON web key operations of the key. For more information, see JsonWebKeyOperation.
 */
export declare type JsonWebKeyOperation = (typeof JsonWebKeyOperation)[keyof typeof JsonWebKeyOperation];
export declare const JsonWebKeyType: {
    readonly EC: "EC";
    readonly EC_HSM: "EC-HSM";
    readonly RSA: "RSA";
    readonly RSA_HSM: "RSA-HSM";
};
/**
 * The type of the key. For valid values, see JsonWebKeyType.
 */
export declare type JsonWebKeyType = (typeof JsonWebKeyType)[keyof typeof JsonWebKeyType];
export declare const KeyPermissions: {
    readonly All: "all";
    readonly Encrypt: "encrypt";
    readonly Decrypt: "decrypt";
    readonly WrapKey: "wrapKey";
    readonly UnwrapKey: "unwrapKey";
    readonly Sign: "sign";
    readonly Verify: "verify";
    readonly Get: "get";
    readonly List: "list";
    readonly Create: "create";
    readonly Update: "update";
    readonly Import: "import";
    readonly Delete: "delete";
    readonly Backup: "backup";
    readonly Restore: "restore";
    readonly Recover: "recover";
    readonly Purge: "purge";
};
export declare type KeyPermissions = (typeof KeyPermissions)[keyof typeof KeyPermissions];
export declare const NetworkRuleAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
 */
export declare type NetworkRuleAction = (typeof NetworkRuleAction)[keyof typeof NetworkRuleAction];
export declare const NetworkRuleBypassOptions: {
    readonly AzureServices: "AzureServices";
    readonly None: "None";
};
/**
 * Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
 */
export declare type NetworkRuleBypassOptions = (typeof NetworkRuleBypassOptions)[keyof typeof NetworkRuleBypassOptions];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Indicates whether the connection has been approved, rejected or removed by the key vault owner.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const SecretPermissions: {
    readonly All: "all";
    readonly Get: "get";
    readonly List: "list";
    readonly Set: "set";
    readonly Delete: "delete";
    readonly Backup: "backup";
    readonly Restore: "restore";
    readonly Recover: "recover";
    readonly Purge: "purge";
};
export declare type SecretPermissions = (typeof SecretPermissions)[keyof typeof SecretPermissions];
export declare const SkuFamily: {
    readonly A: "A";
};
/**
 * SKU family name
 */
export declare type SkuFamily = (typeof SkuFamily)[keyof typeof SkuFamily];
export declare const SkuName: {
    readonly Standard: "standard";
    readonly Premium: "premium";
};
/**
 * SKU name to specify whether the key vault is a standard vault or a premium vault.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const StoragePermissions: {
    readonly All: "all";
    readonly Get: "get";
    readonly List: "list";
    readonly Delete: "delete";
    readonly Set: "set";
    readonly Update: "update";
    readonly Regeneratekey: "regeneratekey";
    readonly Recover: "recover";
    readonly Purge: "purge";
    readonly Backup: "backup";
    readonly Restore: "restore";
    readonly Setsas: "setsas";
    readonly Listsas: "listsas";
    readonly Getsas: "getsas";
    readonly Deletesas: "deletesas";
};
export declare type StoragePermissions = (typeof StoragePermissions)[keyof typeof StoragePermissions];
export declare const VaultProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly RegisteringDns: "RegisteringDns";
};
/**
 * Provisioning state of the vault.
 */
export declare type VaultProvisioningState = (typeof VaultProvisioningState)[keyof typeof VaultProvisioningState];
