export declare const AzureSearchIndexWriteBehaviorType: {
    readonly Merge: "Merge";
    readonly Upload: "Upload";
};
/**
 * Specify the write behavior when upserting documents into Azure Search Index.
 */
export declare type AzureSearchIndexWriteBehaviorType = (typeof AzureSearchIndexWriteBehaviorType)[keyof typeof AzureSearchIndexWriteBehaviorType];
export declare const BlobEventTypes: {
    readonly Microsoft_Storage_BlobCreated: "Microsoft.Storage.BlobCreated";
    readonly Microsoft_Storage_BlobDeleted: "Microsoft.Storage.BlobDeleted";
};
export declare type BlobEventTypes = (typeof BlobEventTypes)[keyof typeof BlobEventTypes];
export declare const CassandraSourceReadConsistencyLevels: {
    readonly ALL: "ALL";
    readonly EACH_QUORUM: "EACH_QUORUM";
    readonly QUORUM: "QUORUM";
    readonly LOCAL_QUORUM: "LOCAL_QUORUM";
    readonly ONE: "ONE";
    readonly TWO: "TWO";
    readonly THREE: "THREE";
    readonly LOCAL_ONE: "LOCAL_ONE";
    readonly SERIAL: "SERIAL";
    readonly LOCAL_SERIAL: "LOCAL_SERIAL";
};
/**
 * The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
 */
export declare type CassandraSourceReadConsistencyLevels = (typeof CassandraSourceReadConsistencyLevels)[keyof typeof CassandraSourceReadConsistencyLevels];
export declare const DatasetCompressionLevel: {
    readonly Optimal: "Optimal";
    readonly Fastest: "Fastest";
};
/**
 * The ZipDeflate compression level.
 */
export declare type DatasetCompressionLevel = (typeof DatasetCompressionLevel)[keyof typeof DatasetCompressionLevel];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
/**
 * The day of the week.
 */
export declare type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const DaysOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export declare type DaysOfWeek = (typeof DaysOfWeek)[keyof typeof DaysOfWeek];
export declare const Db2AuthenticationType: {
    readonly Basic: "Basic";
};
/**
 * AuthenticationType to be used for connection.
 */
export declare type Db2AuthenticationType = (typeof Db2AuthenticationType)[keyof typeof Db2AuthenticationType];
export declare const DependencyCondition: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Skipped: "Skipped";
    readonly Completed: "Completed";
};
export declare type DependencyCondition = (typeof DependencyCondition)[keyof typeof DependencyCondition];
export declare const DynamicsAuthenticationType: {
    readonly Office365: "Office365";
    readonly Ifd: "Ifd";
};
/**
 * The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
 */
export declare type DynamicsAuthenticationType = (typeof DynamicsAuthenticationType)[keyof typeof DynamicsAuthenticationType];
export declare const DynamicsDeploymentType: {
    readonly Online: "Online";
    readonly OnPremisesWithIfd: "OnPremisesWithIfd";
};
/**
 * The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
 */
export declare type DynamicsDeploymentType = (typeof DynamicsDeploymentType)[keyof typeof DynamicsDeploymentType];
export declare const DynamicsSinkWriteBehavior: {
    readonly Upsert: "Upsert";
};
/**
 * The write behavior for the operation.
 */
export declare type DynamicsSinkWriteBehavior = (typeof DynamicsSinkWriteBehavior)[keyof typeof DynamicsSinkWriteBehavior];
export declare const FactoryIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type. Currently the only supported type is 'SystemAssigned'.
 */
export declare type FactoryIdentityType = (typeof FactoryIdentityType)[keyof typeof FactoryIdentityType];
export declare const FtpAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
};
/**
 * The authentication type to be used to connect to the FTP server.
 */
export declare type FtpAuthenticationType = (typeof FtpAuthenticationType)[keyof typeof FtpAuthenticationType];
export declare const GoogleBigQueryAuthenticationType: {
    readonly ServiceAuthentication: "ServiceAuthentication";
    readonly UserAuthentication: "UserAuthentication";
};
/**
 * The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
 */
export declare type GoogleBigQueryAuthenticationType = (typeof GoogleBigQueryAuthenticationType)[keyof typeof GoogleBigQueryAuthenticationType];
export declare const HBaseAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Basic: "Basic";
};
/**
 * The authentication mechanism to use to connect to the HBase server.
 */
export declare type HBaseAuthenticationType = (typeof HBaseAuthenticationType)[keyof typeof HBaseAuthenticationType];
export declare const HDInsightActivityDebugInfoOption: {
    readonly None: "None";
    readonly Always: "Always";
    readonly Failure: "Failure";
};
/**
 * Debug info option.
 */
export declare type HDInsightActivityDebugInfoOption = (typeof HDInsightActivityDebugInfoOption)[keyof typeof HDInsightActivityDebugInfoOption];
export declare const HiveAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Username: "Username";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication method used to access the Hive server.
 */
export declare type HiveAuthenticationType = (typeof HiveAuthenticationType)[keyof typeof HiveAuthenticationType];
export declare const HiveServerType: {
    readonly HiveServer1: "HiveServer1";
    readonly HiveServer2: "HiveServer2";
    readonly HiveThriftServer: "HiveThriftServer";
};
/**
 * The type of Hive server.
 */
export declare type HiveServerType = (typeof HiveServerType)[keyof typeof HiveServerType];
export declare const HiveThriftTransportProtocol: {
    readonly Binary: "Binary";
    readonly SASL: "SASL";
    readonly HTTP_: "HTTP ";
};
/**
 * The transport protocol to use in the Thrift layer.
 */
export declare type HiveThriftTransportProtocol = (typeof HiveThriftTransportProtocol)[keyof typeof HiveThriftTransportProtocol];
export declare const HttpAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
    readonly Digest: "Digest";
    readonly Windows: "Windows";
    readonly ClientCertificate: "ClientCertificate";
};
/**
 * The authentication type to be used to connect to the HTTP server.
 */
export declare type HttpAuthenticationType = (typeof HttpAuthenticationType)[keyof typeof HttpAuthenticationType];
export declare const ImpalaAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly SASLUsername: "SASLUsername";
    readonly UsernameAndPassword: "UsernameAndPassword";
};
/**
 * The authentication type to use.
 */
export declare type ImpalaAuthenticationType = (typeof ImpalaAuthenticationType)[keyof typeof ImpalaAuthenticationType];
export declare const IntegrationRuntimeEdition: {
    readonly Standard: "Standard";
    readonly Enterprise: "Enterprise";
};
/**
 * The edition for the SSIS Integration Runtime
 */
export declare type IntegrationRuntimeEdition = (typeof IntegrationRuntimeEdition)[keyof typeof IntegrationRuntimeEdition];
export declare const IntegrationRuntimeEntityReferenceType: {
    readonly IntegrationRuntimeReference: "IntegrationRuntimeReference";
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * The type of this referenced entity.
 */
export declare type IntegrationRuntimeEntityReferenceType = (typeof IntegrationRuntimeEntityReferenceType)[keyof typeof IntegrationRuntimeEntityReferenceType];
export declare const IntegrationRuntimeLicenseType: {
    readonly BasePrice: "BasePrice";
    readonly LicenseIncluded: "LicenseIncluded";
};
/**
 * License type for bringing your own license scenario.
 */
export declare type IntegrationRuntimeLicenseType = (typeof IntegrationRuntimeLicenseType)[keyof typeof IntegrationRuntimeLicenseType];
export declare const IntegrationRuntimeType: {
    readonly Managed: "Managed";
    readonly SelfHosted: "SelfHosted";
};
/**
 * Type of integration runtime.
 */
export declare type IntegrationRuntimeType = (typeof IntegrationRuntimeType)[keyof typeof IntegrationRuntimeType];
export declare const JsonFormatFilePattern: {
    readonly SetOfObjects: "setOfObjects";
    readonly ArrayOfObjects: "arrayOfObjects";
};
/**
 * File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
 */
export declare type JsonFormatFilePattern = (typeof JsonFormatFilePattern)[keyof typeof JsonFormatFilePattern];
export declare const MongoDbAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
};
/**
 * The authentication type to be used to connect to the MongoDB database.
 */
export declare type MongoDbAuthenticationType = (typeof MongoDbAuthenticationType)[keyof typeof MongoDbAuthenticationType];
export declare const ODataAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
};
/**
 * Type of authentication used to connect to the OData service.
 */
export declare type ODataAuthenticationType = (typeof ODataAuthenticationType)[keyof typeof ODataAuthenticationType];
export declare const ParameterType: {
    readonly Object: "Object";
    readonly String: "String";
    readonly Int: "Int";
    readonly Float: "Float";
    readonly Bool: "Bool";
    readonly Array: "Array";
    readonly SecureString: "SecureString";
};
/**
 * Parameter type.
 */
export declare type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export declare const PhoenixAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication mechanism used to connect to the Phoenix server.
 */
export declare type PhoenixAuthenticationType = (typeof PhoenixAuthenticationType)[keyof typeof PhoenixAuthenticationType];
export declare const PolybaseSettingsRejectType: {
    readonly Value: "value";
    readonly Percentage: "percentage";
};
/**
 * Reject type.
 */
export declare type PolybaseSettingsRejectType = (typeof PolybaseSettingsRejectType)[keyof typeof PolybaseSettingsRejectType];
export declare const PrestoAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly LDAP: "LDAP";
};
/**
 * The authentication mechanism used to connect to the Presto server.
 */
export declare type PrestoAuthenticationType = (typeof PrestoAuthenticationType)[keyof typeof PrestoAuthenticationType];
export declare const RecurrenceFrequency: {
    readonly NotSpecified: "NotSpecified";
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
    readonly Year: "Year";
};
/**
 * The frequency.
 */
export declare type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];
export declare const SalesforceSinkWriteBehavior: {
    readonly Insert: "Insert";
    readonly Upsert: "Upsert";
};
/**
 * The write behavior for the operation. Default is Insert.
 */
export declare type SalesforceSinkWriteBehavior = (typeof SalesforceSinkWriteBehavior)[keyof typeof SalesforceSinkWriteBehavior];
export declare const SalesforceSourceReadBehavior: {
    readonly Query: "Query";
    readonly QueryAll: "QueryAll";
};
/**
 * The read behavior for the operation. Default is Query.
 */
export declare type SalesforceSourceReadBehavior = (typeof SalesforceSourceReadBehavior)[keyof typeof SalesforceSourceReadBehavior];
export declare const SapCloudForCustomerSinkWriteBehavior: {
    readonly Insert: "Insert";
    readonly Update: "Update";
};
/**
 * The write behavior for the operation. Default is 'Insert'.
 */
export declare type SapCloudForCustomerSinkWriteBehavior = (typeof SapCloudForCustomerSinkWriteBehavior)[keyof typeof SapCloudForCustomerSinkWriteBehavior];
export declare const SapHanaAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * The authentication type to be used to connect to the SAP HANA server.
 */
export declare type SapHanaAuthenticationType = (typeof SapHanaAuthenticationType)[keyof typeof SapHanaAuthenticationType];
export declare const ServiceNowAuthenticationType: {
    readonly Basic: "Basic";
    readonly OAuth2: "OAuth2";
};
/**
 * The authentication type to use.
 */
export declare type ServiceNowAuthenticationType = (typeof ServiceNowAuthenticationType)[keyof typeof ServiceNowAuthenticationType];
export declare const SftpAuthenticationType: {
    readonly Basic: "Basic";
    readonly SshPublicKey: "SshPublicKey";
};
/**
 * The authentication type to be used to connect to the FTP server.
 */
export declare type SftpAuthenticationType = (typeof SftpAuthenticationType)[keyof typeof SftpAuthenticationType];
export declare const SparkAuthenticationType: {
    readonly Anonymous: "Anonymous";
    readonly Username: "Username";
    readonly UsernameAndPassword: "UsernameAndPassword";
    readonly WindowsAzureHDInsightService: "WindowsAzureHDInsightService";
};
/**
 * The authentication method used to access the Spark server.
 */
export declare type SparkAuthenticationType = (typeof SparkAuthenticationType)[keyof typeof SparkAuthenticationType];
export declare const SparkServerType: {
    readonly SharkServer: "SharkServer";
    readonly SharkServer2: "SharkServer2";
    readonly SparkThriftServer: "SparkThriftServer";
};
/**
 * The type of Spark server.
 */
export declare type SparkServerType = (typeof SparkServerType)[keyof typeof SparkServerType];
export declare const SparkThriftTransportProtocol: {
    readonly Binary: "Binary";
    readonly SASL: "SASL";
    readonly HTTP_: "HTTP ";
};
/**
 * The transport protocol to use in the Thrift layer.
 */
export declare type SparkThriftTransportProtocol = (typeof SparkThriftTransportProtocol)[keyof typeof SparkThriftTransportProtocol];
export declare const SsisLogLocationType: {
    readonly File: "File";
};
/**
 * The type of SSIS log location.
 */
export declare type SsisLogLocationType = (typeof SsisLogLocationType)[keyof typeof SsisLogLocationType];
export declare const SsisPackageLocationType: {
    readonly SSISDB: "SSISDB";
    readonly File: "File";
};
/**
 * The type of SSIS package location.
 */
export declare type SsisPackageLocationType = (typeof SsisPackageLocationType)[keyof typeof SsisPackageLocationType];
export declare const StoredProcedureParameterType: {
    readonly String: "String";
    readonly Int: "Int";
    readonly Int64: "Int64";
    readonly Decimal: "Decimal";
    readonly Guid: "Guid";
    readonly Boolean: "Boolean";
    readonly Date: "Date";
};
/**
 * Stored procedure parameter type.
 */
export declare type StoredProcedureParameterType = (typeof StoredProcedureParameterType)[keyof typeof StoredProcedureParameterType];
export declare const SybaseAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * AuthenticationType to be used for connection.
 */
export declare type SybaseAuthenticationType = (typeof SybaseAuthenticationType)[keyof typeof SybaseAuthenticationType];
export declare const TeradataAuthenticationType: {
    readonly Basic: "Basic";
    readonly Windows: "Windows";
};
/**
 * AuthenticationType to be used for connection.
 */
export declare type TeradataAuthenticationType = (typeof TeradataAuthenticationType)[keyof typeof TeradataAuthenticationType];
export declare const TumblingWindowFrequency: {
    readonly Minute: "Minute";
    readonly Hour: "Hour";
};
/**
 * The frequency of the time windows.
 */
export declare type TumblingWindowFrequency = (typeof TumblingWindowFrequency)[keyof typeof TumblingWindowFrequency];
export declare const WebActivityMethod: {
    readonly GET: "GET";
    readonly POST: "POST";
    readonly PUT: "PUT";
    readonly DELETE: "DELETE";
};
/**
 * Rest API method for target endpoint.
 */
export declare type WebActivityMethod = (typeof WebActivityMethod)[keyof typeof WebActivityMethod];
export declare const WebAuthenticationType: {
    readonly Basic: "Basic";
    readonly Anonymous: "Anonymous";
    readonly ClientCertificate: "ClientCertificate";
};
/**
 * Type of authentication used to connect to the web table source.
 */
export declare type WebAuthenticationType = (typeof WebAuthenticationType)[keyof typeof WebAuthenticationType];
