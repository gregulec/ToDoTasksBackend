export declare const DiskCreateOption: {
    /**
     * Create an empty data disk of a size given by diskSizeGB.
     */
    readonly Empty: "Empty";
    /**
     * Disk will be attached to a VM.
     */
    readonly Attach: "Attach";
    /**
     * Create a new disk from a platform image specified by the given imageReference or galleryImageReference.
     */
    readonly FromImage: "FromImage";
    /**
     * Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId.
     */
    readonly Import: "Import";
    /**
     * Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId.
     */
    readonly Copy: "Copy";
    /**
     * Create a new disk by copying from a backup recovery point.
     */
    readonly Restore: "Restore";
    /**
     * Create a new disk by obtaining a write token and using it to directly upload the contents of the disk.
     */
    readonly Upload: "Upload";
};
/**
 * This enumerates the possible sources of a disk's creation.
 */
export declare type DiskCreateOption = (typeof DiskCreateOption)[keyof typeof DiskCreateOption];
export declare const DiskEncryptionSetIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
 */
export declare type DiskEncryptionSetIdentityType = (typeof DiskEncryptionSetIdentityType)[keyof typeof DiskEncryptionSetIdentityType];
export declare const DiskEncryptionSetType: {
    /**
     * Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer.
     */
    readonly EncryptionAtRestWithCustomerKey: "EncryptionAtRestWithCustomerKey";
    /**
     * Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
     */
    readonly EncryptionAtRestWithPlatformAndCustomerKeys: "EncryptionAtRestWithPlatformAndCustomerKeys";
};
/**
 * The type of key used to encrypt the data of the disk.
 */
export declare type DiskEncryptionSetType = (typeof DiskEncryptionSetType)[keyof typeof DiskEncryptionSetType];
export declare const DiskStorageAccountTypes: {
    /**
     * Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
     */
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    /**
     * Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads.
     */
    readonly UltraSSD_LRS: "UltraSSD_LRS";
};
/**
 * The sku name.
 */
export declare type DiskStorageAccountTypes = (typeof DiskStorageAccountTypes)[keyof typeof DiskStorageAccountTypes];
export declare const EncryptionType: {
    /**
     * Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets.
     */
    readonly EncryptionAtRestWithPlatformKey: "EncryptionAtRestWithPlatformKey";
    /**
     * Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer.
     */
    readonly EncryptionAtRestWithCustomerKey: "EncryptionAtRestWithCustomerKey";
    /**
     * Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
     */
    readonly EncryptionAtRestWithPlatformAndCustomerKeys: "EncryptionAtRestWithPlatformAndCustomerKeys";
};
/**
 * The type of key used to encrypt the data of the disk.
 */
export declare type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];
export declare const ExtendedLocationTypes: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The type of the extended location.
 */
export declare type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const GallerySharingPermissionTypes: {
    readonly Private: "Private";
    readonly Groups: "Groups";
};
/**
 * This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
 */
export declare type GallerySharingPermissionTypes = (typeof GallerySharingPermissionTypes)[keyof typeof GallerySharingPermissionTypes];
export declare const HostCaching: {
    readonly None: "None";
    readonly ReadOnly: "ReadOnly";
    readonly ReadWrite: "ReadWrite";
};
/**
 * The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
 */
export declare type HostCaching = (typeof HostCaching)[keyof typeof HostCaching];
export declare const HyperVGeneration: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
 */
export declare type HyperVGeneration = (typeof HyperVGeneration)[keyof typeof HyperVGeneration];
export declare const NetworkAccessPolicy: {
    /**
     * The disk can be exported or uploaded to from any network.
     */
    readonly AllowAll: "AllowAll";
    /**
     * The disk can be exported or uploaded to using a DiskAccess resource's private endpoints.
     */
    readonly AllowPrivate: "AllowPrivate";
    /**
     * The disk cannot be exported.
     */
    readonly DenyAll: "DenyAll";
};
/**
 * Policy for accessing the disk via network.
 */
export declare type NetworkAccessPolicy = (typeof NetworkAccessPolicy)[keyof typeof NetworkAccessPolicy];
export declare const OperatingSystemStateTypes: {
    readonly Generalized: "Generalized";
    readonly Specialized: "Specialized";
};
/**
 * This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
 */
export declare type OperatingSystemStateTypes = (typeof OperatingSystemStateTypes)[keyof typeof OperatingSystemStateTypes];
export declare const OperatingSystemTypes: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * The Operating System type.
 */
export declare type OperatingSystemTypes = (typeof OperatingSystemTypes)[keyof typeof OperatingSystemTypes];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const SnapshotStorageAccountTypes: {
    /**
     * Standard HDD locally redundant storage
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium SSD locally redundant storage
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * Standard zone redundant storage
     */
    readonly Standard_ZRS: "Standard_ZRS";
};
/**
 * The sku name.
 */
export declare type SnapshotStorageAccountTypes = (typeof SnapshotStorageAccountTypes)[keyof typeof SnapshotStorageAccountTypes];
export declare const StorageAccountType: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Standard_ZRS: "Standard_ZRS";
    readonly Premium_LRS: "Premium_LRS";
};
/**
 * Specifies the storage account type to be used to store the image. This property is not updatable.
 */
export declare type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
