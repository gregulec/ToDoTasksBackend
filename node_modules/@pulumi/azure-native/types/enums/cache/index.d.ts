import * as v20150801 from "./v20150801";
import * as v20160401 from "./v20160401";
import * as v20170201 from "./v20170201";
import * as v20171001 from "./v20171001";
import * as v20180301 from "./v20180301";
import * as v20190701 from "./v20190701";
import * as v20200601 from "./v20200601";
import * as v20201001preview from "./v20201001preview";
import * as v20201201 from "./v20201201";
import * as v20210201preview from "./v20210201preview";
import * as v20210301 from "./v20210301";
import * as v20210801 from "./v20210801";
export { v20150801, v20160401, v20170201, v20171001, v20180301, v20190701, v20200601, v20201001preview, v20201201, v20210201preview, v20210301, v20210801, };
export declare const AofFrequency: {
    readonly AofFrequency_1s: "1s";
    readonly Always: "always";
};
/**
 * Sets the frequency at which data is written to disk.
 */
export declare type AofFrequency = (typeof AofFrequency)[keyof typeof AofFrequency];
export declare const ClusteringPolicy: {
    readonly EnterpriseCluster: "EnterpriseCluster";
    readonly OSSCluster: "OSSCluster";
};
/**
 * Clustering policy - default is OSSCluster. Specified at create time.
 */
export declare type ClusteringPolicy = (typeof ClusteringPolicy)[keyof typeof ClusteringPolicy];
export declare const DayOfWeek: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
    readonly Everyday: "Everyday";
    readonly Weekend: "Weekend";
};
/**
 * Day of the week when a cache can be patched.
 */
export declare type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const EvictionPolicy: {
    readonly AllKeysLFU: "AllKeysLFU";
    readonly AllKeysLRU: "AllKeysLRU";
    readonly AllKeysRandom: "AllKeysRandom";
    readonly VolatileLRU: "VolatileLRU";
    readonly VolatileLFU: "VolatileLFU";
    readonly VolatileTTL: "VolatileTTL";
    readonly VolatileRandom: "VolatileRandom";
    readonly NoEviction: "NoEviction";
};
/**
 * Redis eviction policy - default is VolatileLRU
 */
export declare type EvictionPolicy = (typeof EvictionPolicy)[keyof typeof EvictionPolicy];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const Protocol: {
    readonly Encrypted: "Encrypted";
    readonly Plaintext: "Plaintext";
};
/**
 * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
 */
export declare type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
 */
export declare type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RdbFrequency: {
    readonly RdbFrequency_1h: "1h";
    readonly RdbFrequency_6h: "6h";
    readonly RdbFrequency_12h: "12h";
};
/**
 * Sets the frequency at which a snapshot of the database is created.
 */
export declare type RdbFrequency = (typeof RdbFrequency)[keyof typeof RdbFrequency];
export declare const ReplicationRole: {
    readonly Primary: "Primary";
    readonly Secondary: "Secondary";
};
/**
 * Role of the linked server.
 */
export declare type ReplicationRole = (typeof ReplicationRole)[keyof typeof ReplicationRole];
export declare const SkuFamily: {
    readonly C: "C";
    readonly P: "P";
};
/**
 * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
 */
export declare type SkuFamily = (typeof SkuFamily)[keyof typeof SkuFamily];
export declare const SkuName: {
    readonly Enterprise_E10: "Enterprise_E10";
    readonly Enterprise_E20: "Enterprise_E20";
    readonly Enterprise_E50: "Enterprise_E50";
    readonly Enterprise_E100: "Enterprise_E100";
    readonly EnterpriseFlash_F300: "EnterpriseFlash_F300";
    readonly EnterpriseFlash_F700: "EnterpriseFlash_F700";
    readonly EnterpriseFlash_F1500: "EnterpriseFlash_F1500";
};
/**
 * The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TlsVersion: {
    readonly TlsVersion_1_0: "1.0";
    readonly TlsVersion_1_1: "1.1";
    readonly TlsVersion_1_2: "1.2";
};
/**
 * The minimum TLS version for the cluster to support, e.g. '1.2'
 */
export declare type TlsVersion = (typeof TlsVersion)[keyof typeof TlsVersion];
