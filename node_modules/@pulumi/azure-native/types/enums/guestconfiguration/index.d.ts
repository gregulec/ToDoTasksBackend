import * as v20180630preview from "./v20180630preview";
import * as v20181120 from "./v20181120";
import * as v20200625 from "./v20200625";
import * as v20210125 from "./v20210125";
export { v20180630preview, v20181120, v20200625, v20210125, };
export declare const ActionAfterReboot: {
    readonly ContinueConfiguration: "ContinueConfiguration";
    readonly StopConfiguration: "StopConfiguration";
};
/**
 * Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
 */
export declare type ActionAfterReboot = (typeof ActionAfterReboot)[keyof typeof ActionAfterReboot];
export declare const AssignmentType: {
    readonly Audit: "Audit";
    readonly DeployAndAutoCorrect: "DeployAndAutoCorrect";
    readonly ApplyAndAutoCorrect: "ApplyAndAutoCorrect";
    readonly ApplyAndMonitor: "ApplyAndMonitor";
};
/**
 * Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
 */
export declare type AssignmentType = (typeof AssignmentType)[keyof typeof AssignmentType];
export declare const ConfigurationMode: {
    readonly ApplyOnly: "ApplyOnly";
    readonly ApplyAndMonitor: "ApplyAndMonitor";
    readonly ApplyAndAutoCorrect: "ApplyAndAutoCorrect";
};
/**
 * Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
 */
export declare type ConfigurationMode = (typeof ConfigurationMode)[keyof typeof ConfigurationMode];
export declare const Kind: {
    readonly DSC: "DSC";
};
/**
 * Kind of the guest configuration. For example:DSC
 */
export declare type Kind = (typeof Kind)[keyof typeof Kind];
