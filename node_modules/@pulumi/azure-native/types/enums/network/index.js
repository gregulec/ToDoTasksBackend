"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressPrefixType = exports.ActionType = exports.Access = exports.v20210201preview = exports.v20210201 = exports.v20201101 = exports.v20200801 = exports.v20200701 = exports.v20200601 = exports.v20200501 = exports.v20200401 = exports.v20200301 = exports.v20200101 = exports.v20191201 = exports.v20191101 = exports.v20191001 = exports.v20190901 = exports.v20190801 = exports.v20190701 = exports.v20190601 = exports.v20190501 = exports.v20190401 = exports.v20190301 = exports.v20190201 = exports.v20181201 = exports.v20181101 = exports.v20181001 = exports.v20180801 = exports.v20180701 = exports.v20180601 = exports.v20180501 = exports.v20180401 = exports.v20180301preview = exports.v20180301 = exports.v20180201 = exports.v20180101 = exports.v20171101 = exports.v20171001 = exports.v20170901 = exports.v20170801 = exports.v20170601 = exports.v20170501 = exports.v20170301 = exports.v20161201 = exports.v20160901 = exports.v20160601 = exports.v20160401 = exports.v20160330 = exports.v20150615 = exports.v20150501preview = void 0;
exports.ExpressRoutePeeringState = exports.ExpressRouteLinkMacSecSciState = exports.ExpressRouteLinkMacSecCipher = exports.ExpressRouteLinkAdminState = exports.ExpressRouteCircuitSkuTier = exports.ExpressRouteCircuitSkuFamily = exports.ExpressRouteCircuitPeeringState = exports.EnforceCertificateNameCheckEnabledState = exports.EndpointType = exports.EndpointStatus = exports.EndpointMonitorStatus = exports.DynamicCompressionEnabled = exports.DhGroup = exports.DestinationPortBehavior = exports.DeleteExistingPeering = exports.DeleteExistingNSGs = exports.DdosSettingsProtectionCoverage = exports.DdosCustomPolicyTriggerSensitivityOverride = exports.DdosCustomPolicyProtocol = exports.CustomRuleEnabledState = exports.CoverageLevel = exports.ConnectivityTopology = exports.ConnectionMonitorTestConfigurationProtocol = exports.ConnectionMonitorEndpointFilterType = exports.ConnectionMonitorEndpointFilterItemType = exports.ConfigurationType = exports.CommissionedState = exports.BackendEnabledState = exports.AzureFirewallThreatIntelMode = exports.AzureFirewallSkuTier = exports.AzureFirewallSkuName = exports.AzureFirewallRCActionType = exports.AzureFirewallNetworkRuleProtocol = exports.AzureFirewallNatRCActionType = exports.AzureFirewallApplicationRuleProtocolType = exports.AuthorizationUseStatus = exports.ApplicationGatewayTier = exports.ApplicationGatewaySslProtocol = exports.ApplicationGatewaySslPolicyType = exports.ApplicationGatewaySslPolicyName = exports.ApplicationGatewaySslCipherSuite = exports.ApplicationGatewaySkuName = exports.ApplicationGatewayRequestRoutingRuleType = exports.ApplicationGatewayRedirectType = exports.ApplicationGatewayProtocol = exports.ApplicationGatewayFirewallMode = exports.ApplicationGatewayCustomErrorStatusCode = exports.ApplicationGatewayCookieBasedAffinity = exports.AllowedEndpointRecordType = exports.AdminRuleKind = void 0;
exports.NatGatewaySkuName = exports.MonitorProtocol = exports.MemberType = exports.MatchProcessingBehavior = exports.ManagedRuleSetActionType = exports.ManagedRuleExclusionSelectorMatchOperator = exports.ManagedRuleExclusionMatchVariable = exports.ManagedRuleEnabledState = exports.LoadDistribution = exports.LoadBalancerSkuTier = exports.LoadBalancerSkuName = exports.LoadBalancerOutboundRuleProtocol = exports.IsGlobal = exports.IpsecIntegrity = exports.IpsecEncryption = exports.IpAllocationType = exports.IkeIntegrity = exports.IkeEncryption = exports.IPVersion = exports.IPAllocationMethod = exports.HealthProbeEnabled = exports.HeaderActionType = exports.HTTPConfigurationMethod = exports.GroupConnectivity = exports.FrontDoorRedirectType = exports.FrontDoorRedirectProtocol = exports.FrontDoorQuery = exports.FrontDoorProtocol = exports.FrontDoorMatchVariable = exports.FrontDoorHealthProbeMethod = exports.FrontDoorForwardingProtocol = exports.FrontDoorEnabledState = exports.FlowLogFormatType = exports.FirewallPolicySkuTier = exports.FirewallPolicyRuleType = exports.FirewallPolicyRuleNetworkProtocol = exports.FirewallPolicyRuleConditionType = exports.FirewallPolicyRuleConditionNetworkProtocol = exports.FirewallPolicyRuleConditionApplicationProtocolType = exports.FirewallPolicyRuleCollectionType = exports.FirewallPolicyRuleApplicationProtocolType = exports.FirewallPolicyNatRuleCollectionActionType = exports.FirewallPolicyNatRuleActionType = exports.FirewallPolicyIntrusionDetectionStateType = exports.FirewallPolicyIntrusionDetectionProtocol = exports.FirewallPolicyFilterRuleCollectionActionType = exports.FirewallPolicyFilterRuleActionType = exports.ExtendedLocationTypes = exports.ExpressRoutePortsEncapsulation = exports.ExpressRoutePeeringType = void 0;
exports.VirtualNetworkGatewayConnectionType = exports.VirtualNetworkGatewayConnectionProtocol = exports.VirtualNetworkGatewayConnectionMode = exports.UserRuleKind = exports.UseHubGateway = exports.TransportProtocol = exports.TransformType = exports.Transform = exports.TrafficViewEnrollmentStatus = exports.TrafficRoutingMethod = exports.State = exports.SkuName = exports.SessionAffinityEnabledState = exports.ServiceProviderProvisioningState = exports.SecurityType = exports.SecurityRuleProtocol = exports.SecurityRuleDirection = exports.SecurityRuleAccess = exports.SecurityProviderName = exports.SecurityConfigurationRuleProtocol = exports.SecurityConfigurationRuleDirection = exports.SecurityConfigurationRuleAccess = exports.RulesEngineOperator = exports.RulesEngineMatchVariable = exports.RuleType = exports.RoutingRuleEnabledState = exports.RouteNextHopType = exports.RouteFilterRuleType = exports.ResourceIdentityType = exports.PublicIPPrefixSkuTier = exports.PublicIPPrefixSkuName = exports.PublicIPAddressSkuTier = exports.PublicIPAddressSkuName = exports.PublicIPAddressMigrationPhase = exports.ProtocolType = exports.ProfileStatus = exports.ProfileMonitorStatus = exports.ProbeProtocol = exports.PreferredIPVersion = exports.PolicyRequestBodyCheck = exports.PolicyMode = exports.PolicyEnabledState = exports.PfsGroup = exports.PcProtocol = exports.OwaspCrsExclusionEntrySelectorMatchOperator = exports.OwaspCrsExclusionEntryMatchVariable = exports.OutputType = exports.Operator = exports.NetworkInterfaceNicType = exports.NetworkInterfaceMigrationPhase = void 0;
exports.ZoneType = exports.WebApplicationFirewallTransform = exports.WebApplicationFirewallRuleType = exports.WebApplicationFirewallOperator = exports.WebApplicationFirewallMode = exports.WebApplicationFirewallMatchVariable = exports.WebApplicationFirewallEnabledState = exports.WebApplicationFirewallAction = exports.VpnType = exports.VpnNatRuleType = exports.VpnNatRuleMode = exports.VpnLinkConnectionMode = exports.VpnGatewayTunnelingProtocol = exports.VpnGatewayGeneration = exports.VpnClientProtocol = exports.VpnAuthenticationType = exports.VirtualNetworkPrivateLinkServiceNetworkPolicies = exports.VirtualNetworkPrivateEndpointNetworkPolicies = exports.VirtualNetworkPeeringState = exports.VirtualNetworkGatewayType = exports.VirtualNetworkGatewaySkuTier = exports.VirtualNetworkGatewaySkuName = void 0;
// Export sub-modules:
const v20150501preview = require("./v20150501preview");
exports.v20150501preview = v20150501preview;
const v20150615 = require("./v20150615");
exports.v20150615 = v20150615;
const v20160330 = require("./v20160330");
exports.v20160330 = v20160330;
const v20160401 = require("./v20160401");
exports.v20160401 = v20160401;
const v20160601 = require("./v20160601");
exports.v20160601 = v20160601;
const v20160901 = require("./v20160901");
exports.v20160901 = v20160901;
const v20161201 = require("./v20161201");
exports.v20161201 = v20161201;
const v20170301 = require("./v20170301");
exports.v20170301 = v20170301;
const v20170501 = require("./v20170501");
exports.v20170501 = v20170501;
const v20170601 = require("./v20170601");
exports.v20170601 = v20170601;
const v20170801 = require("./v20170801");
exports.v20170801 = v20170801;
const v20170901 = require("./v20170901");
exports.v20170901 = v20170901;
const v20171001 = require("./v20171001");
exports.v20171001 = v20171001;
const v20171101 = require("./v20171101");
exports.v20171101 = v20171101;
const v20180101 = require("./v20180101");
exports.v20180101 = v20180101;
const v20180201 = require("./v20180201");
exports.v20180201 = v20180201;
const v20180301 = require("./v20180301");
exports.v20180301 = v20180301;
const v20180301preview = require("./v20180301preview");
exports.v20180301preview = v20180301preview;
const v20180401 = require("./v20180401");
exports.v20180401 = v20180401;
const v20180501 = require("./v20180501");
exports.v20180501 = v20180501;
const v20180601 = require("./v20180601");
exports.v20180601 = v20180601;
const v20180701 = require("./v20180701");
exports.v20180701 = v20180701;
const v20180801 = require("./v20180801");
exports.v20180801 = v20180801;
const v20181001 = require("./v20181001");
exports.v20181001 = v20181001;
const v20181101 = require("./v20181101");
exports.v20181101 = v20181101;
const v20181201 = require("./v20181201");
exports.v20181201 = v20181201;
const v20190201 = require("./v20190201");
exports.v20190201 = v20190201;
const v20190301 = require("./v20190301");
exports.v20190301 = v20190301;
const v20190401 = require("./v20190401");
exports.v20190401 = v20190401;
const v20190501 = require("./v20190501");
exports.v20190501 = v20190501;
const v20190601 = require("./v20190601");
exports.v20190601 = v20190601;
const v20190701 = require("./v20190701");
exports.v20190701 = v20190701;
const v20190801 = require("./v20190801");
exports.v20190801 = v20190801;
const v20190901 = require("./v20190901");
exports.v20190901 = v20190901;
const v20191001 = require("./v20191001");
exports.v20191001 = v20191001;
const v20191101 = require("./v20191101");
exports.v20191101 = v20191101;
const v20191201 = require("./v20191201");
exports.v20191201 = v20191201;
const v20200101 = require("./v20200101");
exports.v20200101 = v20200101;
const v20200301 = require("./v20200301");
exports.v20200301 = v20200301;
const v20200401 = require("./v20200401");
exports.v20200401 = v20200401;
const v20200501 = require("./v20200501");
exports.v20200501 = v20200501;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20200701 = require("./v20200701");
exports.v20200701 = v20200701;
const v20200801 = require("./v20200801");
exports.v20200801 = v20200801;
const v20201101 = require("./v20201101");
exports.v20201101 = v20201101;
const v20210201 = require("./v20210201");
exports.v20210201 = v20210201;
const v20210201preview = require("./v20210201preview");
exports.v20210201preview = v20210201preview;
exports.Access = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.ActionType = {
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
    Redirect: "Redirect",
};
exports.AddressPrefixType = {
    IPPrefix: "IPPrefix",
    ServiceTag: "ServiceTag",
};
exports.AdminRuleKind = {
    Custom: "Custom",
    Default: "Default",
};
exports.AllowedEndpointRecordType = {
    DomainName: "DomainName",
    IPv4Address: "IPv4Address",
    IPv6Address: "IPv6Address",
    Any: "Any",
};
exports.ApplicationGatewayCookieBasedAffinity = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ApplicationGatewayCustomErrorStatusCode = {
    HttpStatus403: "HttpStatus403",
    HttpStatus502: "HttpStatus502",
};
exports.ApplicationGatewayFirewallMode = {
    Detection: "Detection",
    Prevention: "Prevention",
};
exports.ApplicationGatewayProtocol = {
    Http: "Http",
    Https: "Https",
};
exports.ApplicationGatewayRedirectType = {
    Permanent: "Permanent",
    Found: "Found",
    SeeOther: "SeeOther",
    Temporary: "Temporary",
};
exports.ApplicationGatewayRequestRoutingRuleType = {
    Basic: "Basic",
    PathBasedRouting: "PathBasedRouting",
};
exports.ApplicationGatewaySkuName = {
    Standard_Small: "Standard_Small",
    Standard_Medium: "Standard_Medium",
    Standard_Large: "Standard_Large",
    WAF_Medium: "WAF_Medium",
    WAF_Large: "WAF_Large",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
};
exports.ApplicationGatewaySslCipherSuite = {
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_AES_256_GCM_SHA384: "TLS_RSA_WITH_AES_256_GCM_SHA384",
    TLS_RSA_WITH_AES_128_GCM_SHA256: "TLS_RSA_WITH_AES_128_GCM_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA256: "TLS_RSA_WITH_AES_256_CBC_SHA256",
    TLS_RSA_WITH_AES_128_CBC_SHA256: "TLS_RSA_WITH_AES_128_CBC_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA: "TLS_RSA_WITH_AES_256_CBC_SHA",
    TLS_RSA_WITH_AES_128_CBC_SHA: "TLS_RSA_WITH_AES_128_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_3DES_EDE_CBC_SHA: "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
    TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
};
exports.ApplicationGatewaySslPolicyName = {
    AppGwSslPolicy20150501: "AppGwSslPolicy20150501",
    AppGwSslPolicy20170401: "AppGwSslPolicy20170401",
    AppGwSslPolicy20170401S: "AppGwSslPolicy20170401S",
};
exports.ApplicationGatewaySslPolicyType = {
    Predefined: "Predefined",
    Custom: "Custom",
};
exports.ApplicationGatewaySslProtocol = {
    TLSv1_0: "TLSv1_0",
    TLSv1_1: "TLSv1_1",
    TLSv1_2: "TLSv1_2",
};
exports.ApplicationGatewayTier = {
    Standard: "Standard",
    WAF: "WAF",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
};
exports.AuthorizationUseStatus = {
    Available: "Available",
    InUse: "InUse",
};
exports.AzureFirewallApplicationRuleProtocolType = {
    Http: "Http",
    Https: "Https",
    Mssql: "Mssql",
};
exports.AzureFirewallNatRCActionType = {
    Snat: "Snat",
    Dnat: "Dnat",
};
exports.AzureFirewallNetworkRuleProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.AzureFirewallRCActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.AzureFirewallSkuName = {
    AZFW_VNet: "AZFW_VNet",
    AZFW_Hub: "AZFW_Hub",
};
exports.AzureFirewallSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
};
exports.AzureFirewallThreatIntelMode = {
    Alert: "Alert",
    Deny: "Deny",
    Off: "Off",
};
exports.BackendEnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.CommissionedState = {
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Commissioning: "Commissioning",
    Commissioned: "Commissioned",
    Decommissioning: "Decommissioning",
    Deprovisioning: "Deprovisioning",
};
exports.ConfigurationType = {
    SecurityAdmin: "SecurityAdmin",
    SecurityUser: "SecurityUser",
    Connectivity: "Connectivity",
};
exports.ConnectionMonitorEndpointFilterItemType = {
    AgentAddress: "AgentAddress",
};
exports.ConnectionMonitorEndpointFilterType = {
    Include: "Include",
};
exports.ConnectionMonitorTestConfigurationProtocol = {
    Tcp: "Tcp",
    Http: "Http",
    Icmp: "Icmp",
};
exports.ConnectivityTopology = {
    HubAndSpoke: "HubAndSpoke",
    Mesh: "Mesh",
};
exports.CoverageLevel = {
    Default: "Default",
    Low: "Low",
    BelowAverage: "BelowAverage",
    Average: "Average",
    AboveAverage: "AboveAverage",
    Full: "Full",
};
exports.CustomRuleEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.DdosCustomPolicyProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Syn: "Syn",
};
exports.DdosCustomPolicyTriggerSensitivityOverride = {
    Relaxed: "Relaxed",
    Low: "Low",
    Default: "Default",
    High: "High",
};
exports.DdosSettingsProtectionCoverage = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.DeleteExistingNSGs = {
    False: "False",
    True: "True",
};
exports.DeleteExistingPeering = {
    False: "False",
    True: "True",
};
exports.DestinationPortBehavior = {
    None: "None",
    ListenIfAvailable: "ListenIfAvailable",
};
exports.DhGroup = {
    None: "None",
    DHGroup1: "DHGroup1",
    DHGroup2: "DHGroup2",
    DHGroup14: "DHGroup14",
    DHGroup2048: "DHGroup2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    DHGroup24: "DHGroup24",
};
exports.DynamicCompressionEnabled = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.EndpointMonitorStatus = {
    CheckingEndpoint: "CheckingEndpoint",
    Online: "Online",
    Degraded: "Degraded",
    Disabled: "Disabled",
    Inactive: "Inactive",
    Stopped: "Stopped",
};
exports.EndpointStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.EndpointType = {
    AzureVM: "AzureVM",
    AzureVNet: "AzureVNet",
    AzureSubnet: "AzureSubnet",
    ExternalAddress: "ExternalAddress",
    MMAWorkspaceMachine: "MMAWorkspaceMachine",
    MMAWorkspaceNetwork: "MMAWorkspaceNetwork",
};
exports.EnforceCertificateNameCheckEnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ExpressRouteCircuitPeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRouteCircuitSkuFamily = {
    UnlimitedData: "UnlimitedData",
    MeteredData: "MeteredData",
};
exports.ExpressRouteCircuitSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
    Basic: "Basic",
    Local: "Local",
};
exports.ExpressRouteLinkAdminState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ExpressRouteLinkMacSecCipher = {
    GcmAes256: "GcmAes256",
    GcmAes128: "GcmAes128",
    GcmAesXpn128: "GcmAesXpn128",
    GcmAesXpn256: "GcmAesXpn256",
};
exports.ExpressRouteLinkMacSecSciState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRoutePeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRoutePeeringType = {
    AzurePublicPeering: "AzurePublicPeering",
    AzurePrivatePeering: "AzurePrivatePeering",
    MicrosoftPeering: "MicrosoftPeering",
};
exports.ExpressRoutePortsEncapsulation = {
    Dot1Q: "Dot1Q",
    QinQ: "QinQ",
};
exports.ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
};
exports.FirewallPolicyFilterRuleActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.FirewallPolicyFilterRuleCollectionActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.FirewallPolicyIntrusionDetectionProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    ICMP: "ICMP",
    ANY: "ANY",
};
exports.FirewallPolicyIntrusionDetectionStateType = {
    Off: "Off",
    Alert: "Alert",
    Deny: "Deny",
};
exports.FirewallPolicyNatRuleActionType = {
    DNAT: "DNAT",
};
exports.FirewallPolicyNatRuleCollectionActionType = {
    DNAT: "DNAT",
};
exports.FirewallPolicyRuleApplicationProtocolType = {
    Http: "Http",
    Https: "Https",
};
exports.FirewallPolicyRuleCollectionType = {
    FirewallPolicyNatRuleCollection: "FirewallPolicyNatRuleCollection",
    FirewallPolicyFilterRuleCollection: "FirewallPolicyFilterRuleCollection",
};
exports.FirewallPolicyRuleConditionApplicationProtocolType = {
    Http: "Http",
    Https: "Https",
};
exports.FirewallPolicyRuleConditionNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.FirewallPolicyRuleConditionType = {
    ApplicationRuleCondition: "ApplicationRuleCondition",
    NetworkRuleCondition: "NetworkRuleCondition",
    NatRuleCondition: "NatRuleCondition",
};
exports.FirewallPolicyRuleNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.FirewallPolicyRuleType = {
    FirewallPolicyNatRule: "FirewallPolicyNatRule",
    FirewallPolicyFilterRule: "FirewallPolicyFilterRule",
};
exports.FirewallPolicySkuTier = {
    Standard: "Standard",
    Premium: "Premium",
};
exports.FlowLogFormatType = {
    JSON: "JSON",
};
exports.FrontDoorEnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.FrontDoorForwardingProtocol = {
    HttpOnly: "HttpOnly",
    HttpsOnly: "HttpsOnly",
    MatchRequest: "MatchRequest",
};
exports.FrontDoorHealthProbeMethod = {
    GET: "GET",
    HEAD: "HEAD",
};
exports.FrontDoorMatchVariable = {
    RemoteAddr: "RemoteAddr",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestHeader: "RequestHeader",
    RequestBody: "RequestBody",
    Cookies: "Cookies",
    SocketAddr: "SocketAddr",
};
exports.FrontDoorProtocol = {
    Http: "Http",
    Https: "Https",
};
exports.FrontDoorQuery = {
    StripNone: "StripNone",
    StripAll: "StripAll",
    StripOnly: "StripOnly",
    StripAllExcept: "StripAllExcept",
};
exports.FrontDoorRedirectProtocol = {
    HttpOnly: "HttpOnly",
    HttpsOnly: "HttpsOnly",
    MatchRequest: "MatchRequest",
};
exports.FrontDoorRedirectType = {
    Moved: "Moved",
    Found: "Found",
    TemporaryRedirect: "TemporaryRedirect",
    PermanentRedirect: "PermanentRedirect",
};
exports.GroupConnectivity = {
    None: "None",
    DirectlyConnected: "DirectlyConnected",
};
exports.HTTPConfigurationMethod = {
    Get: "Get",
    Post: "Post",
};
exports.HeaderActionType = {
    Append: "Append",
    Delete: "Delete",
    Overwrite: "Overwrite",
};
exports.HealthProbeEnabled = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.IPAllocationMethod = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.IPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.IkeEncryption = {
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IkeIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    SHA384: "SHA384",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IpAllocationType = {
    Undefined: "Undefined",
    Hypernet: "Hypernet",
};
exports.IpsecEncryption = {
    None: "None",
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.IpsecIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.IsGlobal = {
    False: "False",
    True: "True",
};
exports.LoadBalancerOutboundRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    All: "All",
};
exports.LoadBalancerSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.LoadBalancerSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.LoadDistribution = {
    Default: "Default",
    SourceIP: "SourceIP",
    SourceIPProtocol: "SourceIPProtocol",
};
exports.ManagedRuleEnabledState = {
    Disabled: "Disabled",
};
exports.ManagedRuleExclusionMatchVariable = {
    RequestHeaderNames: "RequestHeaderNames",
    RequestCookieNames: "RequestCookieNames",
    QueryStringArgNames: "QueryStringArgNames",
    RequestBodyPostArgNames: "RequestBodyPostArgNames",
    RequestBodyJsonArgNames: "RequestBodyJsonArgNames",
};
exports.ManagedRuleExclusionSelectorMatchOperator = {
    Equals: "Equals",
    Contains: "Contains",
    StartsWith: "StartsWith",
    EndsWith: "EndsWith",
    EqualsAny: "EqualsAny",
};
exports.ManagedRuleSetActionType = {
    Block: "Block",
    Log: "Log",
    Redirect: "Redirect",
};
exports.MatchProcessingBehavior = {
    Continue: "Continue",
    Stop: "Stop",
};
exports.MemberType = {
    VirtualNetwork: "VirtualNetwork",
    Subnet: "Subnet",
};
exports.MonitorProtocol = {
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    TCP: "TCP",
};
exports.NatGatewaySkuName = {
    Standard: "Standard",
};
exports.NetworkInterfaceMigrationPhase = {
    None: "None",
    Prepare: "Prepare",
    Commit: "Commit",
    Abort: "Abort",
    Committed: "Committed",
};
exports.NetworkInterfaceNicType = {
    Standard: "Standard",
    Elastic: "Elastic",
};
exports.Operator = {
    Any: "Any",
    IPMatch: "IPMatch",
    GeoMatch: "GeoMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    RegEx: "RegEx",
};
exports.OutputType = {
    Workspace: "Workspace",
};
exports.OwaspCrsExclusionEntryMatchVariable = {
    RequestHeaderNames: "RequestHeaderNames",
    RequestCookieNames: "RequestCookieNames",
    RequestArgNames: "RequestArgNames",
};
exports.OwaspCrsExclusionEntrySelectorMatchOperator = {
    Equals: "Equals",
    Contains: "Contains",
    StartsWith: "StartsWith",
    EndsWith: "EndsWith",
    EqualsAny: "EqualsAny",
};
exports.PcProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
};
exports.PfsGroup = {
    None: "None",
    PFS1: "PFS1",
    PFS2: "PFS2",
    PFS2048: "PFS2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    PFS24: "PFS24",
    PFS14: "PFS14",
    PFSMM: "PFSMM",
};
exports.PolicyEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.PolicyMode = {
    Prevention: "Prevention",
    Detection: "Detection",
};
exports.PolicyRequestBodyCheck = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.PreferredIPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.ProbeProtocol = {
    Http: "Http",
    Tcp: "Tcp",
    Https: "Https",
};
exports.ProfileMonitorStatus = {
    CheckingEndpoints: "CheckingEndpoints",
    Online: "Online",
    Degraded: "Degraded",
    Disabled: "Disabled",
    Inactive: "Inactive",
};
exports.ProfileStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ProtocolType = {
    DoNotUse: "DoNotUse",
    Icmp: "Icmp",
    Tcp: "Tcp",
    Udp: "Udp",
    Gre: "Gre",
    Esp: "Esp",
    Ah: "Ah",
    Vxlan: "Vxlan",
    All: "All",
};
exports.PublicIPAddressMigrationPhase = {
    None: "None",
    Prepare: "Prepare",
    Commit: "Commit",
    Abort: "Abort",
    Committed: "Committed",
};
exports.PublicIPAddressSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.PublicIPAddressSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.PublicIPPrefixSkuName = {
    Standard: "Standard",
};
exports.PublicIPPrefixSkuTier = {
    Regional: "Regional",
    Global: "Global",
};
exports.ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    None: "None",
};
exports.RouteFilterRuleType = {
    Community: "Community",
};
exports.RouteNextHopType = {
    VirtualNetworkGateway: "VirtualNetworkGateway",
    VnetLocal: "VnetLocal",
    Internet: "Internet",
    VirtualAppliance: "VirtualAppliance",
    None: "None",
};
exports.RoutingRuleEnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.RuleType = {
    MatchRule: "MatchRule",
    RateLimitRule: "RateLimitRule",
};
exports.RulesEngineMatchVariable = {
    IsMobile: "IsMobile",
    RemoteAddr: "RemoteAddr",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestPath: "RequestPath",
    RequestFilename: "RequestFilename",
    RequestFilenameExtension: "RequestFilenameExtension",
    RequestHeader: "RequestHeader",
    RequestBody: "RequestBody",
    RequestScheme: "RequestScheme",
};
exports.RulesEngineOperator = {
    Any: "Any",
    IPMatch: "IPMatch",
    GeoMatch: "GeoMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
};
exports.SecurityConfigurationRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
    AlwaysAllow: "AlwaysAllow",
};
exports.SecurityConfigurationRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityConfigurationRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Icmp: "Icmp",
    Esp: "Esp",
    Any: "Any",
    Ah: "Ah",
};
exports.SecurityProviderName = {
    ZScaler: "ZScaler",
    IBoss: "IBoss",
    Checkpoint: "Checkpoint",
};
exports.SecurityRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.SecurityRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Icmp: "Icmp",
    Esp: "Esp",
    Asterisk: "*",
    Ah: "Ah",
};
exports.SecurityType = {
    AdminPolicy: "AdminPolicy",
    UserPolicy: "UserPolicy",
};
exports.ServiceProviderProvisioningState = {
    NotProvisioned: "NotProvisioned",
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Deprovisioning: "Deprovisioning",
};
exports.SessionAffinityEnabledState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.SkuName = {
    Classic_AzureFrontDoor: "Classic_AzureFrontDoor",
    Standard_AzureFrontDoor: "Standard_AzureFrontDoor",
    Premium_AzureFrontDoor: "Premium_AzureFrontDoor",
};
exports.State = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.TrafficRoutingMethod = {
    Performance: "Performance",
    Priority: "Priority",
    Weighted: "Weighted",
    Geographic: "Geographic",
    MultiValue: "MultiValue",
    Subnet: "Subnet",
};
exports.TrafficViewEnrollmentStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.Transform = {
    Lowercase: "Lowercase",
    Uppercase: "Uppercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
};
exports.TransformType = {
    Lowercase: "Lowercase",
    Uppercase: "Uppercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
};
exports.TransportProtocol = {
    Udp: "Udp",
    Tcp: "Tcp",
    All: "All",
};
exports.UseHubGateway = {
    False: "False",
    True: "True",
};
exports.UserRuleKind = {
    Custom: "Custom",
    Default: "Default",
};
exports.VirtualNetworkGatewayConnectionMode = {
    Default: "Default",
    ResponderOnly: "ResponderOnly",
    InitiatorOnly: "InitiatorOnly",
};
exports.VirtualNetworkGatewayConnectionProtocol = {
    IKEv2: "IKEv2",
    IKEv1: "IKEv1",
};
exports.VirtualNetworkGatewayConnectionType = {
    IPsec: "IPsec",
    Vnet2Vnet: "Vnet2Vnet",
    ExpressRoute: "ExpressRoute",
    VPNClient: "VPNClient",
};
exports.VirtualNetworkGatewaySkuName = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw4: "VpnGw4",
    VpnGw5: "VpnGw5",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    VpnGw4AZ: "VpnGw4AZ",
    VpnGw5AZ: "VpnGw5AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewaySkuTier = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw4: "VpnGw4",
    VpnGw5: "VpnGw5",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    VpnGw4AZ: "VpnGw4AZ",
    VpnGw5AZ: "VpnGw5AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewayType = {
    Vpn: "Vpn",
    ExpressRoute: "ExpressRoute",
    LocalGateway: "LocalGateway",
};
exports.VirtualNetworkPeeringState = {
    Initiated: "Initiated",
    Connected: "Connected",
    Disconnected: "Disconnected",
};
exports.VirtualNetworkPrivateEndpointNetworkPolicies = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.VirtualNetworkPrivateLinkServiceNetworkPolicies = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.VpnAuthenticationType = {
    Certificate: "Certificate",
    Radius: "Radius",
    AAD: "AAD",
};
exports.VpnClientProtocol = {
    IkeV2: "IkeV2",
    SSTP: "SSTP",
    OpenVPN: "OpenVPN",
};
exports.VpnGatewayGeneration = {
    None: "None",
    Generation1: "Generation1",
    Generation2: "Generation2",
};
exports.VpnGatewayTunnelingProtocol = {
    IkeV2: "IkeV2",
    OpenVPN: "OpenVPN",
};
exports.VpnLinkConnectionMode = {
    Default: "Default",
    ResponderOnly: "ResponderOnly",
    InitiatorOnly: "InitiatorOnly",
};
exports.VpnNatRuleMode = {
    EgressSnat: "EgressSnat",
    IngressSnat: "IngressSnat",
};
exports.VpnNatRuleType = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.VpnType = {
    PolicyBased: "PolicyBased",
    RouteBased: "RouteBased",
};
exports.WebApplicationFirewallAction = {
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
};
exports.WebApplicationFirewallEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.WebApplicationFirewallMatchVariable = {
    RemoteAddr: "RemoteAddr",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestHeaders: "RequestHeaders",
    RequestBody: "RequestBody",
    RequestCookies: "RequestCookies",
};
exports.WebApplicationFirewallMode = {
    Prevention: "Prevention",
    Detection: "Detection",
};
exports.WebApplicationFirewallOperator = {
    IPMatch: "IPMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    Regex: "Regex",
    GeoMatch: "GeoMatch",
};
exports.WebApplicationFirewallRuleType = {
    MatchRule: "MatchRule",
    Invalid: "Invalid",
};
exports.WebApplicationFirewallTransform = {
    Lowercase: "Lowercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
    HtmlEntityDecode: "HtmlEntityDecode",
};
exports.ZoneType = {
    Public: "Public",
    Private: "Private",
};
//# sourceMappingURL=index.js.map