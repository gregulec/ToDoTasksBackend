export declare const Access: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The access type of the rule. Valid values are: 'Allow', 'Deny'
 */
export declare type Access = (typeof Access)[keyof typeof Access];
export declare const ApplicationGatewayCookieBasedAffinity: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Cookie based affinity.
 */
export declare type ApplicationGatewayCookieBasedAffinity = (typeof ApplicationGatewayCookieBasedAffinity)[keyof typeof ApplicationGatewayCookieBasedAffinity];
export declare const ApplicationGatewayFirewallMode: {
    readonly Detection: "Detection";
    readonly Prevention: "Prevention";
};
/**
 * Web application firewall mode.
 */
export declare type ApplicationGatewayFirewallMode = (typeof ApplicationGatewayFirewallMode)[keyof typeof ApplicationGatewayFirewallMode];
export declare const ApplicationGatewayProtocol: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Protocol.
 */
export declare type ApplicationGatewayProtocol = (typeof ApplicationGatewayProtocol)[keyof typeof ApplicationGatewayProtocol];
export declare const ApplicationGatewayRedirectType: {
    readonly Permanent: "Permanent";
    readonly Found: "Found";
    readonly SeeOther: "SeeOther";
    readonly Temporary: "Temporary";
};
/**
 * Supported http redirection types - Permanent, Temporary, Found, SeeOther.
 */
export declare type ApplicationGatewayRedirectType = (typeof ApplicationGatewayRedirectType)[keyof typeof ApplicationGatewayRedirectType];
export declare const ApplicationGatewayRequestRoutingRuleType: {
    readonly Basic: "Basic";
    readonly PathBasedRouting: "PathBasedRouting";
};
/**
 * Rule type.
 */
export declare type ApplicationGatewayRequestRoutingRuleType = (typeof ApplicationGatewayRequestRoutingRuleType)[keyof typeof ApplicationGatewayRequestRoutingRuleType];
export declare const ApplicationGatewaySkuName: {
    readonly Standard_Small: "Standard_Small";
    readonly Standard_Medium: "Standard_Medium";
    readonly Standard_Large: "Standard_Large";
    readonly WAF_Medium: "WAF_Medium";
    readonly WAF_Large: "WAF_Large";
};
/**
 * Name of an application gateway SKU.
 */
export declare type ApplicationGatewaySkuName = (typeof ApplicationGatewaySkuName)[keyof typeof ApplicationGatewaySkuName];
export declare const ApplicationGatewaySslCipherSuite: {
    readonly TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    readonly TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_DHE_RSA_WITH_AES_256_CBC_SHA: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_DHE_RSA_WITH_AES_128_CBC_SHA: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_RSA_WITH_AES_256_GCM_SHA384: "TLS_RSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_RSA_WITH_AES_128_GCM_SHA256: "TLS_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_RSA_WITH_AES_256_CBC_SHA256: "TLS_RSA_WITH_AES_256_CBC_SHA256";
    readonly TLS_RSA_WITH_AES_128_CBC_SHA256: "TLS_RSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_RSA_WITH_AES_256_CBC_SHA: "TLS_RSA_WITH_AES_256_CBC_SHA";
    readonly TLS_RSA_WITH_AES_128_CBC_SHA: "TLS_RSA_WITH_AES_128_CBC_SHA";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    readonly TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    readonly TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    readonly TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    readonly TLS_DHE_DSS_WITH_AES_256_CBC_SHA: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_AES_128_CBC_SHA: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    readonly TLS_RSA_WITH_3DES_EDE_CBC_SHA: "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    readonly TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
    readonly TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    readonly TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
};
/**
 * Ssl cipher suites enums.
 */
export declare type ApplicationGatewaySslCipherSuite = (typeof ApplicationGatewaySslCipherSuite)[keyof typeof ApplicationGatewaySslCipherSuite];
export declare const ApplicationGatewaySslPolicyName: {
    readonly AppGwSslPolicy20150501: "AppGwSslPolicy20150501";
    readonly AppGwSslPolicy20170401: "AppGwSslPolicy20170401";
    readonly AppGwSslPolicy20170401S: "AppGwSslPolicy20170401S";
};
/**
 * Name of Ssl predefined policy
 */
export declare type ApplicationGatewaySslPolicyName = (typeof ApplicationGatewaySslPolicyName)[keyof typeof ApplicationGatewaySslPolicyName];
export declare const ApplicationGatewaySslPolicyType: {
    readonly Predefined: "Predefined";
    readonly Custom: "Custom";
};
/**
 * Type of Ssl Policy
 */
export declare type ApplicationGatewaySslPolicyType = (typeof ApplicationGatewaySslPolicyType)[keyof typeof ApplicationGatewaySslPolicyType];
export declare const ApplicationGatewaySslProtocol: {
    readonly TLSv1_0: "TLSv1_0";
    readonly TLSv1_1: "TLSv1_1";
    readonly TLSv1_2: "TLSv1_2";
};
/**
 * Minimum version of Ssl protocol to be supported on application gateway.
 */
export declare type ApplicationGatewaySslProtocol = (typeof ApplicationGatewaySslProtocol)[keyof typeof ApplicationGatewaySslProtocol];
export declare const ApplicationGatewayTier: {
    readonly Standard: "Standard";
    readonly WAF: "WAF";
};
/**
 * Tier of an application gateway.
 */
export declare type ApplicationGatewayTier = (typeof ApplicationGatewayTier)[keyof typeof ApplicationGatewayTier];
export declare const AuthorizationUseStatus: {
    readonly Available: "Available";
    readonly InUse: "InUse";
};
/**
 * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
 */
export declare type AuthorizationUseStatus = (typeof AuthorizationUseStatus)[keyof typeof AuthorizationUseStatus];
export declare const DhGroup: {
    readonly None: "None";
    readonly DHGroup1: "DHGroup1";
    readonly DHGroup2: "DHGroup2";
    readonly DHGroup14: "DHGroup14";
    readonly DHGroup2048: "DHGroup2048";
    readonly ECP256: "ECP256";
    readonly ECP384: "ECP384";
    readonly DHGroup24: "DHGroup24";
};
/**
 * The DH Groups used in IKE Phase 1 for initial SA.
 */
export declare type DhGroup = (typeof DhGroup)[keyof typeof DhGroup];
export declare const ExpressRouteCircuitPeeringAdvertisedPublicPrefixState: {
    readonly NotConfigured: "NotConfigured";
    readonly Configuring: "Configuring";
    readonly Configured: "Configured";
    readonly ValidationNeeded: "ValidationNeeded";
};
/**
 * AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
 */
export declare type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = (typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState)[keyof typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState];
export declare const ExpressRouteCircuitPeeringState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The state of peering. Possible values are: 'Disabled' and 'Enabled'
 */
export declare type ExpressRouteCircuitPeeringState = (typeof ExpressRouteCircuitPeeringState)[keyof typeof ExpressRouteCircuitPeeringState];
export declare const ExpressRouteCircuitPeeringType: {
    readonly AzurePublicPeering: "AzurePublicPeering";
    readonly AzurePrivatePeering: "AzurePrivatePeering";
    readonly MicrosoftPeering: "MicrosoftPeering";
};
/**
 * The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.
 */
export declare type ExpressRouteCircuitPeeringType = (typeof ExpressRouteCircuitPeeringType)[keyof typeof ExpressRouteCircuitPeeringType];
export declare const ExpressRouteCircuitSkuFamily: {
    readonly UnlimitedData: "UnlimitedData";
    readonly MeteredData: "MeteredData";
};
/**
 * The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.
 */
export declare type ExpressRouteCircuitSkuFamily = (typeof ExpressRouteCircuitSkuFamily)[keyof typeof ExpressRouteCircuitSkuFamily];
export declare const ExpressRouteCircuitSkuTier: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * The tier of the SKU. Possible values are 'Standard' and 'Premium'.
 */
export declare type ExpressRouteCircuitSkuTier = (typeof ExpressRouteCircuitSkuTier)[keyof typeof ExpressRouteCircuitSkuTier];
export declare const IPAllocationMethod: {
    readonly Static: "Static";
    readonly Dynamic: "Dynamic";
};
/**
 * The private IP allocation method. Possible values are: 'Static' and 'Dynamic'.
 */
export declare type IPAllocationMethod = (typeof IPAllocationMethod)[keyof typeof IPAllocationMethod];
export declare const IPVersion: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * The public IP address version. Possible values are: 'IPv4' and 'IPv6'.
 */
export declare type IPVersion = (typeof IPVersion)[keyof typeof IPVersion];
export declare const IkeEncryption: {
    readonly DES: "DES";
    readonly DES3: "DES3";
    readonly AES128: "AES128";
    readonly AES192: "AES192";
    readonly AES256: "AES256";
};
/**
 * The IKE encryption algorithm (IKE phase 2).
 */
export declare type IkeEncryption = (typeof IkeEncryption)[keyof typeof IkeEncryption];
export declare const IkeIntegrity: {
    readonly MD5: "MD5";
    readonly SHA1: "SHA1";
    readonly SHA256: "SHA256";
    readonly SHA384: "SHA384";
};
/**
 * The IKE integrity algorithm (IKE phase 2).
 */
export declare type IkeIntegrity = (typeof IkeIntegrity)[keyof typeof IkeIntegrity];
export declare const IpsecEncryption: {
    readonly None: "None";
    readonly DES: "DES";
    readonly DES3: "DES3";
    readonly AES128: "AES128";
    readonly AES192: "AES192";
    readonly AES256: "AES256";
    readonly GCMAES128: "GCMAES128";
    readonly GCMAES192: "GCMAES192";
    readonly GCMAES256: "GCMAES256";
};
/**
 * The IPSec encryption algorithm (IKE phase 1).
 */
export declare type IpsecEncryption = (typeof IpsecEncryption)[keyof typeof IpsecEncryption];
export declare const IpsecIntegrity: {
    readonly MD5: "MD5";
    readonly SHA1: "SHA1";
    readonly SHA256: "SHA256";
    readonly GCMAES128: "GCMAES128";
    readonly GCMAES192: "GCMAES192";
    readonly GCMAES256: "GCMAES256";
};
/**
 * The IPSec integrity algorithm (IKE phase 1).
 */
export declare type IpsecIntegrity = (typeof IpsecIntegrity)[keyof typeof IpsecIntegrity];
export declare const LoadBalancerSkuName: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * Name of a load balancer SKU.
 */
export declare type LoadBalancerSkuName = (typeof LoadBalancerSkuName)[keyof typeof LoadBalancerSkuName];
export declare const LoadDistribution: {
    readonly Default: "Default";
    readonly SourceIP: "SourceIP";
    readonly SourceIPProtocol: "SourceIPProtocol";
};
/**
 * The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'.
 */
export declare type LoadDistribution = (typeof LoadDistribution)[keyof typeof LoadDistribution];
export declare const PcProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
    readonly Any: "Any";
};
/**
 * Protocol to be filtered on.
 */
export declare type PcProtocol = (typeof PcProtocol)[keyof typeof PcProtocol];
export declare const PfsGroup: {
    readonly None: "None";
    readonly PFS1: "PFS1";
    readonly PFS2: "PFS2";
    readonly PFS2048: "PFS2048";
    readonly ECP256: "ECP256";
    readonly ECP384: "ECP384";
    readonly PFS24: "PFS24";
};
/**
 * The DH Groups used in IKE Phase 2 for new child SA.
 */
export declare type PfsGroup = (typeof PfsGroup)[keyof typeof PfsGroup];
export declare const ProbeProtocol: {
    readonly Http: "Http";
    readonly Tcp: "Tcp";
};
/**
 * The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
 */
export declare type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];
export declare const PublicIPAddressSkuName: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * Name of a public IP address SKU.
 */
export declare type PublicIPAddressSkuName = (typeof PublicIPAddressSkuName)[keyof typeof PublicIPAddressSkuName];
export declare const RouteFilterRuleType: {
    readonly Community: "Community";
};
/**
 * The rule type of the rule. Valid value is: 'Community'
 */
export declare type RouteFilterRuleType = (typeof RouteFilterRuleType)[keyof typeof RouteFilterRuleType];
export declare const RouteNextHopType: {
    readonly VirtualNetworkGateway: "VirtualNetworkGateway";
    readonly VnetLocal: "VnetLocal";
    readonly Internet: "Internet";
    readonly VirtualAppliance: "VirtualAppliance";
    readonly None: "None";
};
/**
 * The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'
 */
export declare type RouteNextHopType = (typeof RouteNextHopType)[keyof typeof RouteNextHopType];
export declare const SecurityRuleAccess: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
 */
export declare type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];
export declare const SecurityRuleDirection: {
    readonly Inbound: "Inbound";
    readonly Outbound: "Outbound";
};
/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.
 */
export declare type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];
export declare const SecurityRuleProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
    readonly Asterisk: "*";
};
/**
 * Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.
 */
export declare type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];
export declare const ServiceProviderProvisioningState: {
    readonly NotProvisioned: "NotProvisioned";
    readonly Provisioning: "Provisioning";
    readonly Provisioned: "Provisioned";
    readonly Deprovisioning: "Deprovisioning";
};
/**
 * The ServiceProviderProvisioningState state of the resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
 */
export declare type ServiceProviderProvisioningState = (typeof ServiceProviderProvisioningState)[keyof typeof ServiceProviderProvisioningState];
export declare const TransportProtocol: {
    readonly Udp: "Udp";
    readonly Tcp: "Tcp";
    readonly All: "All";
};
/**
 * The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All.'
 */
export declare type TransportProtocol = (typeof TransportProtocol)[keyof typeof TransportProtocol];
export declare const VirtualNetworkGatewayConnectionType: {
    readonly IPsec: "IPsec";
    readonly Vnet2Vnet: "Vnet2Vnet";
    readonly ExpressRoute: "ExpressRoute";
    readonly VPNClient: "VPNClient";
};
/**
 * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.
 */
export declare type VirtualNetworkGatewayConnectionType = (typeof VirtualNetworkGatewayConnectionType)[keyof typeof VirtualNetworkGatewayConnectionType];
export declare const VirtualNetworkGatewaySkuName: {
    readonly Basic: "Basic";
    readonly HighPerformance: "HighPerformance";
    readonly Standard: "Standard";
    readonly UltraPerformance: "UltraPerformance";
    readonly VpnGw1: "VpnGw1";
    readonly VpnGw2: "VpnGw2";
    readonly VpnGw3: "VpnGw3";
};
/**
 * Gateway SKU name.
 */
export declare type VirtualNetworkGatewaySkuName = (typeof VirtualNetworkGatewaySkuName)[keyof typeof VirtualNetworkGatewaySkuName];
export declare const VirtualNetworkGatewaySkuTier: {
    readonly Basic: "Basic";
    readonly HighPerformance: "HighPerformance";
    readonly Standard: "Standard";
    readonly UltraPerformance: "UltraPerformance";
    readonly VpnGw1: "VpnGw1";
    readonly VpnGw2: "VpnGw2";
    readonly VpnGw3: "VpnGw3";
};
/**
 * Gateway SKU tier.
 */
export declare type VirtualNetworkGatewaySkuTier = (typeof VirtualNetworkGatewaySkuTier)[keyof typeof VirtualNetworkGatewaySkuTier];
export declare const VirtualNetworkGatewayType: {
    readonly Vpn: "Vpn";
    readonly ExpressRoute: "ExpressRoute";
};
/**
 * The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
 */
export declare type VirtualNetworkGatewayType = (typeof VirtualNetworkGatewayType)[keyof typeof VirtualNetworkGatewayType];
export declare const VirtualNetworkPeeringState: {
    readonly Initiated: "Initiated";
    readonly Connected: "Connected";
    readonly Disconnected: "Disconnected";
};
/**
 * The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and 'Disconnected'.
 */
export declare type VirtualNetworkPeeringState = (typeof VirtualNetworkPeeringState)[keyof typeof VirtualNetworkPeeringState];
export declare const VpnClientProtocol: {
    readonly IkeV2: "IkeV2";
    readonly SSTP: "SSTP";
};
/**
 * VPN client protocol enabled for the virtual network gateway.
 */
export declare type VpnClientProtocol = (typeof VpnClientProtocol)[keyof typeof VpnClientProtocol];
export declare const VpnType: {
    readonly PolicyBased: "PolicyBased";
    readonly RouteBased: "RouteBased";
};
/**
 * The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.
 */
export declare type VpnType = (typeof VpnType)[keyof typeof VpnType];
export declare const ZoneType: {
    readonly Public: "Public";
    readonly Private: "Private";
};
/**
 * The type of this DNS zone (Public or Private).
 */
export declare type ZoneType = (typeof ZoneType)[keyof typeof ZoneType];
