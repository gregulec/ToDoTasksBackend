export declare const AddressPrefixType: {
    readonly IPPrefix: "IPPrefix";
    readonly ServiceTag: "ServiceTag";
};
/**
 * Address prefix type.
 */
export declare type AddressPrefixType = (typeof AddressPrefixType)[keyof typeof AddressPrefixType];
export declare const AdminRuleKind: {
    readonly Custom: "Custom";
    readonly Default: "Default";
};
/**
 * Whether the rule is custom or default.
 */
export declare type AdminRuleKind = (typeof AdminRuleKind)[keyof typeof AdminRuleKind];
export declare const ConfigurationType: {
    readonly SecurityAdmin: "SecurityAdmin";
    readonly SecurityUser: "SecurityUser";
    readonly Connectivity: "Connectivity";
};
/**
 * Configuration Deployment Type.
 */
export declare type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const ConnectivityTopology: {
    readonly HubAndSpoke: "HubAndSpoke";
    readonly Mesh: "Mesh";
};
/**
 * Connectivity topology type.
 */
export declare type ConnectivityTopology = (typeof ConnectivityTopology)[keyof typeof ConnectivityTopology];
export declare const DeleteExistingNSGs: {
    readonly False: "False";
    readonly True: "True";
};
/**
 * Flag if need to delete existing network security groups.
 */
export declare type DeleteExistingNSGs = (typeof DeleteExistingNSGs)[keyof typeof DeleteExistingNSGs];
export declare const DeleteExistingPeering: {
    readonly False: "False";
    readonly True: "True";
};
/**
 * Flag if need to remove current existing peerings.
 */
export declare type DeleteExistingPeering = (typeof DeleteExistingPeering)[keyof typeof DeleteExistingPeering];
export declare const GroupConnectivity: {
    readonly None: "None";
    readonly DirectlyConnected: "DirectlyConnected";
};
/**
 * Group connectivity type.
 */
export declare type GroupConnectivity = (typeof GroupConnectivity)[keyof typeof GroupConnectivity];
export declare const IsGlobal: {
    readonly False: "False";
    readonly True: "True";
};
/**
 * Flag if global mesh is supported.
 */
export declare type IsGlobal = (typeof IsGlobal)[keyof typeof IsGlobal];
export declare const MemberType: {
    readonly VirtualNetwork: "VirtualNetwork";
    readonly Subnet: "Subnet";
};
/**
 * Group member type.
 */
export declare type MemberType = (typeof MemberType)[keyof typeof MemberType];
export declare const SecurityConfigurationRuleAccess: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
    readonly AlwaysAllow: "AlwaysAllow";
};
/**
 * Indicates the access allowed for this particular rule
 */
export declare type SecurityConfigurationRuleAccess = (typeof SecurityConfigurationRuleAccess)[keyof typeof SecurityConfigurationRuleAccess];
export declare const SecurityConfigurationRuleDirection: {
    readonly Inbound: "Inbound";
    readonly Outbound: "Outbound";
};
/**
 * Indicates if the traffic matched against the rule in inbound or outbound.
 */
export declare type SecurityConfigurationRuleDirection = (typeof SecurityConfigurationRuleDirection)[keyof typeof SecurityConfigurationRuleDirection];
export declare const SecurityConfigurationRuleProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
    readonly Icmp: "Icmp";
    readonly Esp: "Esp";
    readonly Any: "Any";
    readonly Ah: "Ah";
};
/**
 * Network protocol this rule applies to.
 */
export declare type SecurityConfigurationRuleProtocol = (typeof SecurityConfigurationRuleProtocol)[keyof typeof SecurityConfigurationRuleProtocol];
export declare const SecurityType: {
    readonly AdminPolicy: "AdminPolicy";
    readonly UserPolicy: "UserPolicy";
};
/**
 * Security Type.
 */
export declare type SecurityType = (typeof SecurityType)[keyof typeof SecurityType];
export declare const UseHubGateway: {
    readonly False: "False";
    readonly True: "True";
};
/**
 * Flag if need to use hub gateway.
 */
export declare type UseHubGateway = (typeof UseHubGateway)[keyof typeof UseHubGateway];
export declare const UserRuleKind: {
    readonly Custom: "Custom";
    readonly Default: "Default";
};
/**
 * Whether the rule is custom or default.
 */
export declare type UserRuleKind = (typeof UserRuleKind)[keyof typeof UserRuleKind];
