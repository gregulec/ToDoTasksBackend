export declare const ApplicationGatewayCookieBasedAffinity: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Cookie based affinity. Possible values are: 'Enabled' and 'Disabled'.
 */
export declare type ApplicationGatewayCookieBasedAffinity = (typeof ApplicationGatewayCookieBasedAffinity)[keyof typeof ApplicationGatewayCookieBasedAffinity];
export declare const ApplicationGatewayProtocol: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Protocol. Possible values are: 'Http' and 'Https'.
 */
export declare type ApplicationGatewayProtocol = (typeof ApplicationGatewayProtocol)[keyof typeof ApplicationGatewayProtocol];
export declare const ApplicationGatewayRequestRoutingRuleType: {
    readonly Basic: "Basic";
    readonly PathBasedRouting: "PathBasedRouting";
};
/**
 * Rule type. Possible values are: 'Basic' and 'PathBasedRouting'.
 */
export declare type ApplicationGatewayRequestRoutingRuleType = (typeof ApplicationGatewayRequestRoutingRuleType)[keyof typeof ApplicationGatewayRequestRoutingRuleType];
export declare const ApplicationGatewaySkuName: {
    readonly Standard_Small: "Standard_Small";
    readonly Standard_Medium: "Standard_Medium";
    readonly Standard_Large: "Standard_Large";
};
/**
 * Name of an application gateway SKU. Possible values are: 'Standard_Small', 'Standard_Medium', 'Standard_Large', 'WAF_Medium', and 'WAF_Large'.
 */
export declare type ApplicationGatewaySkuName = (typeof ApplicationGatewaySkuName)[keyof typeof ApplicationGatewaySkuName];
export declare const ApplicationGatewayTier: {
    readonly Standard: "Standard";
};
/**
 * Tier of an application gateway.
 */
export declare type ApplicationGatewayTier = (typeof ApplicationGatewayTier)[keyof typeof ApplicationGatewayTier];
export declare const AuthorizationUseStatus: {
    readonly Available: "Available";
    readonly InUse: "InUse";
};
/**
 * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
 */
export declare type AuthorizationUseStatus = (typeof AuthorizationUseStatus)[keyof typeof AuthorizationUseStatus];
export declare const ExpressRouteCircuitPeeringAdvertisedPublicPrefixState: {
    readonly NotConfigured: "NotConfigured";
    readonly Configuring: "Configuring";
    readonly Configured: "Configured";
    readonly ValidationNeeded: "ValidationNeeded";
};
/**
 * AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
 */
export declare type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = (typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState)[keyof typeof ExpressRouteCircuitPeeringAdvertisedPublicPrefixState];
export declare const ExpressRouteCircuitPeeringState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The state of peering. Possible values are: 'Disabled' and 'Enabled'
 */
export declare type ExpressRouteCircuitPeeringState = (typeof ExpressRouteCircuitPeeringState)[keyof typeof ExpressRouteCircuitPeeringState];
export declare const ExpressRouteCircuitPeeringType: {
    readonly AzurePublicPeering: "AzurePublicPeering";
    readonly AzurePrivatePeering: "AzurePrivatePeering";
    readonly MicrosoftPeering: "MicrosoftPeering";
};
/**
 * The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.
 */
export declare type ExpressRouteCircuitPeeringType = (typeof ExpressRouteCircuitPeeringType)[keyof typeof ExpressRouteCircuitPeeringType];
export declare const ExpressRouteCircuitSkuFamily: {
    readonly UnlimitedData: "UnlimitedData";
    readonly MeteredData: "MeteredData";
};
/**
 * The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.
 */
export declare type ExpressRouteCircuitSkuFamily = (typeof ExpressRouteCircuitSkuFamily)[keyof typeof ExpressRouteCircuitSkuFamily];
export declare const ExpressRouteCircuitSkuTier: {
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * The tier of the SKU. Possible values are 'Standard' and 'Premium'.
 */
export declare type ExpressRouteCircuitSkuTier = (typeof ExpressRouteCircuitSkuTier)[keyof typeof ExpressRouteCircuitSkuTier];
export declare const IPAllocationMethod: {
    readonly Static: "Static";
    readonly Dynamic: "Dynamic";
};
/**
 * The private IP allocation method. Possible values are: 'Static' and 'Dynamic'.
 */
export declare type IPAllocationMethod = (typeof IPAllocationMethod)[keyof typeof IPAllocationMethod];
export declare const LoadDistribution: {
    readonly Default: "Default";
    readonly SourceIP: "SourceIP";
    readonly SourceIPProtocol: "SourceIPProtocol";
};
/**
 * The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'.
 */
export declare type LoadDistribution = (typeof LoadDistribution)[keyof typeof LoadDistribution];
export declare const ProbeProtocol: {
    readonly Http: "Http";
    readonly Tcp: "Tcp";
};
/**
 * The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
 */
export declare type ProbeProtocol = (typeof ProbeProtocol)[keyof typeof ProbeProtocol];
export declare const RouteNextHopType: {
    readonly VirtualNetworkGateway: "VirtualNetworkGateway";
    readonly VnetLocal: "VnetLocal";
    readonly Internet: "Internet";
    readonly VirtualAppliance: "VirtualAppliance";
    readonly None: "None";
};
/**
 * The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'
 */
export declare type RouteNextHopType = (typeof RouteNextHopType)[keyof typeof RouteNextHopType];
export declare const SecurityRuleAccess: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
 */
export declare type SecurityRuleAccess = (typeof SecurityRuleAccess)[keyof typeof SecurityRuleAccess];
export declare const SecurityRuleDirection: {
    readonly Inbound: "Inbound";
    readonly Outbound: "Outbound";
};
/**
 * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.
 */
export declare type SecurityRuleDirection = (typeof SecurityRuleDirection)[keyof typeof SecurityRuleDirection];
export declare const SecurityRuleProtocol: {
    readonly Tcp: "Tcp";
    readonly Udp: "Udp";
    readonly Asterisk: "*";
};
/**
 * Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.
 */
export declare type SecurityRuleProtocol = (typeof SecurityRuleProtocol)[keyof typeof SecurityRuleProtocol];
export declare const ServiceProviderProvisioningState: {
    readonly NotProvisioned: "NotProvisioned";
    readonly Provisioning: "Provisioning";
    readonly Provisioned: "Provisioned";
    readonly Deprovisioning: "Deprovisioning";
};
/**
 * The ServiceProviderProvisioningState state of the resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.
 */
export declare type ServiceProviderProvisioningState = (typeof ServiceProviderProvisioningState)[keyof typeof ServiceProviderProvisioningState];
export declare const TransportProtocol: {
    readonly Udp: "Udp";
    readonly Tcp: "Tcp";
};
/**
 * The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'
 */
export declare type TransportProtocol = (typeof TransportProtocol)[keyof typeof TransportProtocol];
export declare const VirtualNetworkGatewayConnectionStatus: {
    readonly Unknown: "Unknown";
    readonly Connecting: "Connecting";
    readonly Connected: "Connected";
    readonly NotConnected: "NotConnected";
};
/**
 * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.
 */
export declare type VirtualNetworkGatewayConnectionStatus = (typeof VirtualNetworkGatewayConnectionStatus)[keyof typeof VirtualNetworkGatewayConnectionStatus];
export declare const VirtualNetworkGatewayConnectionType: {
    readonly IPsec: "IPsec";
    readonly Vnet2Vnet: "Vnet2Vnet";
    readonly ExpressRoute: "ExpressRoute";
    readonly VPNClient: "VPNClient";
};
/**
 * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.
 */
export declare type VirtualNetworkGatewayConnectionType = (typeof VirtualNetworkGatewayConnectionType)[keyof typeof VirtualNetworkGatewayConnectionType];
export declare const VirtualNetworkGatewaySkuName: {
    readonly Basic: "Basic";
    readonly HighPerformance: "HighPerformance";
    readonly Standard: "Standard";
};
/**
 * Gateway sku name -Basic/HighPerformance/Standard
 */
export declare type VirtualNetworkGatewaySkuName = (typeof VirtualNetworkGatewaySkuName)[keyof typeof VirtualNetworkGatewaySkuName];
export declare const VirtualNetworkGatewaySkuTier: {
    readonly Basic: "Basic";
    readonly HighPerformance: "HighPerformance";
    readonly Standard: "Standard";
};
/**
 * Gateway sku tier -Basic/HighPerformance/Standard
 */
export declare type VirtualNetworkGatewaySkuTier = (typeof VirtualNetworkGatewaySkuTier)[keyof typeof VirtualNetworkGatewaySkuTier];
export declare const VirtualNetworkGatewayType: {
    readonly Vpn: "Vpn";
    readonly ExpressRoute: "ExpressRoute";
};
/**
 * The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
 */
export declare type VirtualNetworkGatewayType = (typeof VirtualNetworkGatewayType)[keyof typeof VirtualNetworkGatewayType];
export declare const VpnType: {
    readonly PolicyBased: "PolicyBased";
    readonly RouteBased: "RouteBased";
};
/**
 * The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.
 */
export declare type VpnType = (typeof VpnType)[keyof typeof VpnType];
