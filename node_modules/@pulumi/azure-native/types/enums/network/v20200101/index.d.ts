export declare const BackendEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
 */
export declare type BackendEnabledState = (typeof BackendEnabledState)[keyof typeof BackendEnabledState];
export declare const DynamicCompressionEnabled: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to use dynamic compression for cached content
 */
export declare type DynamicCompressionEnabled = (typeof DynamicCompressionEnabled)[keyof typeof DynamicCompressionEnabled];
export declare const EnforceCertificateNameCheckEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
 */
export declare type EnforceCertificateNameCheckEnabledState = (typeof EnforceCertificateNameCheckEnabledState)[keyof typeof EnforceCertificateNameCheckEnabledState];
export declare const FrontDoorEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
 */
export declare type FrontDoorEnabledState = (typeof FrontDoorEnabledState)[keyof typeof FrontDoorEnabledState];
export declare const FrontDoorForwardingProtocol: {
    readonly HttpOnly: "HttpOnly";
    readonly HttpsOnly: "HttpsOnly";
    readonly MatchRequest: "MatchRequest";
};
/**
 * Protocol this rule will use when forwarding traffic to backends.
 */
export declare type FrontDoorForwardingProtocol = (typeof FrontDoorForwardingProtocol)[keyof typeof FrontDoorForwardingProtocol];
export declare const FrontDoorHealthProbeMethod: {
    readonly GET: "GET";
    readonly HEAD: "HEAD";
};
/**
 * Configures which HTTP method to use to probe the backends defined under backendPools.
 */
export declare type FrontDoorHealthProbeMethod = (typeof FrontDoorHealthProbeMethod)[keyof typeof FrontDoorHealthProbeMethod];
export declare const FrontDoorProtocol: {
    readonly Http: "Http";
    readonly Https: "Https";
};
/**
 * Accepted protocol schemes.
 */
export declare type FrontDoorProtocol = (typeof FrontDoorProtocol)[keyof typeof FrontDoorProtocol];
export declare const FrontDoorQuery: {
    readonly StripNone: "StripNone";
    readonly StripAll: "StripAll";
    readonly StripOnly: "StripOnly";
    readonly StripAllExcept: "StripAllExcept";
};
/**
 * Treatment of URL query terms when forming the cache key.
 */
export declare type FrontDoorQuery = (typeof FrontDoorQuery)[keyof typeof FrontDoorQuery];
export declare const FrontDoorRedirectProtocol: {
    readonly HttpOnly: "HttpOnly";
    readonly HttpsOnly: "HttpsOnly";
    readonly MatchRequest: "MatchRequest";
};
/**
 * The protocol of the destination to where the traffic is redirected
 */
export declare type FrontDoorRedirectProtocol = (typeof FrontDoorRedirectProtocol)[keyof typeof FrontDoorRedirectProtocol];
export declare const FrontDoorRedirectType: {
    readonly Moved: "Moved";
    readonly Found: "Found";
    readonly TemporaryRedirect: "TemporaryRedirect";
    readonly PermanentRedirect: "PermanentRedirect";
};
/**
 * The redirect type the rule will use when redirecting traffic.
 */
export declare type FrontDoorRedirectType = (typeof FrontDoorRedirectType)[keyof typeof FrontDoorRedirectType];
export declare const HeaderActionType: {
    readonly Append: "Append";
    readonly Delete: "Delete";
    readonly Overwrite: "Overwrite";
};
/**
 * Which type of manipulation to apply to the header.
 */
export declare type HeaderActionType = (typeof HeaderActionType)[keyof typeof HeaderActionType];
export declare const HealthProbeEnabled: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
 */
export declare type HealthProbeEnabled = (typeof HealthProbeEnabled)[keyof typeof HealthProbeEnabled];
export declare const MatchProcessingBehavior: {
    readonly Continue: "Continue";
    readonly Stop: "Stop";
};
/**
 * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
 */
export declare type MatchProcessingBehavior = (typeof MatchProcessingBehavior)[keyof typeof MatchProcessingBehavior];
export declare const RoutingRuleEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
 */
export declare type RoutingRuleEnabledState = (typeof RoutingRuleEnabledState)[keyof typeof RoutingRuleEnabledState];
export declare const RulesEngineMatchVariable: {
    readonly IsMobile: "IsMobile";
    readonly RemoteAddr: "RemoteAddr";
    readonly RequestMethod: "RequestMethod";
    readonly QueryString: "QueryString";
    readonly PostArgs: "PostArgs";
    readonly RequestUri: "RequestUri";
    readonly RequestPath: "RequestPath";
    readonly RequestFilename: "RequestFilename";
    readonly RequestFilenameExtension: "RequestFilenameExtension";
    readonly RequestHeader: "RequestHeader";
    readonly RequestBody: "RequestBody";
    readonly RequestScheme: "RequestScheme";
};
/**
 * Match Variable
 */
export declare type RulesEngineMatchVariable = (typeof RulesEngineMatchVariable)[keyof typeof RulesEngineMatchVariable];
export declare const RulesEngineOperator: {
    readonly Any: "Any";
    readonly IPMatch: "IPMatch";
    readonly GeoMatch: "GeoMatch";
    readonly Equal: "Equal";
    readonly Contains: "Contains";
    readonly LessThan: "LessThan";
    readonly GreaterThan: "GreaterThan";
    readonly LessThanOrEqual: "LessThanOrEqual";
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly BeginsWith: "BeginsWith";
    readonly EndsWith: "EndsWith";
};
/**
 * Describes operator to apply to the match condition.
 */
export declare type RulesEngineOperator = (typeof RulesEngineOperator)[keyof typeof RulesEngineOperator];
export declare const SessionAffinityEnabledState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
 */
export declare type SessionAffinityEnabledState = (typeof SessionAffinityEnabledState)[keyof typeof SessionAffinityEnabledState];
export declare const Transform: {
    readonly Lowercase: "Lowercase";
    readonly Uppercase: "Uppercase";
    readonly Trim: "Trim";
    readonly UrlDecode: "UrlDecode";
    readonly UrlEncode: "UrlEncode";
    readonly RemoveNulls: "RemoveNulls";
};
/**
 * Describes what transforms are applied before matching
 */
export declare type Transform = (typeof Transform)[keyof typeof Transform];
