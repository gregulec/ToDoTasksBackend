export declare const DataFlowComputeType: {
    readonly General: "General";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly ComputeOptimized: "ComputeOptimized";
};
/**
 * Compute type of the cluster which will execute data flow job.
 */
export declare type DataFlowComputeType = (typeof DataFlowComputeType)[keyof typeof DataFlowComputeType];
export declare const IntegrationRuntimeEdition: {
    readonly Standard: "Standard";
    readonly Enterprise: "Enterprise";
};
/**
 * The edition for the SSIS Integration Runtime
 */
export declare type IntegrationRuntimeEdition = (typeof IntegrationRuntimeEdition)[keyof typeof IntegrationRuntimeEdition];
export declare const IntegrationRuntimeEntityReferenceType: {
    readonly IntegrationRuntimeReference: "IntegrationRuntimeReference";
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * The type of this referenced entity.
 */
export declare type IntegrationRuntimeEntityReferenceType = (typeof IntegrationRuntimeEntityReferenceType)[keyof typeof IntegrationRuntimeEntityReferenceType];
export declare const IntegrationRuntimeLicenseType: {
    readonly BasePrice: "BasePrice";
    readonly LicenseIncluded: "LicenseIncluded";
};
/**
 * License type for bringing your own license scenario.
 */
export declare type IntegrationRuntimeLicenseType = (typeof IntegrationRuntimeLicenseType)[keyof typeof IntegrationRuntimeLicenseType];
export declare const IntegrationRuntimeSsisCatalogPricingTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PremiumRS: "PremiumRS";
};
/**
 * The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
 */
export declare type IntegrationRuntimeSsisCatalogPricingTier = (typeof IntegrationRuntimeSsisCatalogPricingTier)[keyof typeof IntegrationRuntimeSsisCatalogPricingTier];
export declare const IntegrationRuntimeType: {
    readonly Managed: "Managed";
    readonly SelfHosted: "SelfHosted";
};
/**
 * Type of integration runtime.
 */
export declare type IntegrationRuntimeType = (typeof IntegrationRuntimeType)[keyof typeof IntegrationRuntimeType];
export declare const NodeSize: {
    readonly None: "None";
    readonly Small: "Small";
    readonly Medium: "Medium";
    readonly Large: "Large";
    readonly XLarge: "XLarge";
    readonly XXLarge: "XXLarge";
    readonly XXXLarge: "XXXLarge";
};
/**
 * The level of compute power that each node in the Big Data pool has.
 */
export declare type NodeSize = (typeof NodeSize)[keyof typeof NodeSize];
export declare const NodeSizeFamily: {
    readonly None: "None";
    readonly MemoryOptimized: "MemoryOptimized";
};
/**
 * The kind of nodes that the Big Data pool provides.
 */
export declare type NodeSizeFamily = (typeof NodeSizeFamily)[keyof typeof NodeSizeFamily];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The type of managed identity for the workspace
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SensitivityLabelRank: {
    readonly None: "None";
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
    readonly Critical: "Critical";
};
export declare type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
export declare const TransparentDataEncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the database transparent data encryption.
 */
export declare type TransparentDataEncryptionStatus = (typeof TransparentDataEncryptionStatus)[keyof typeof TransparentDataEncryptionStatus];
