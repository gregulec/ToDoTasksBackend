import * as v20190601preview from "./v20190601preview";
import * as v20200401preview from "./v20200401preview";
import * as v20201201 from "./v20201201";
import * as v20210301 from "./v20210301";
import * as v20210401preview from "./v20210401preview";
import * as v20210501 from "./v20210501";
import * as v20210601preview from "./v20210601preview";
export { v20190601preview, v20200401preview, v20201201, v20210301, v20210401preview, v20210501, v20210601preview, };
export declare const AzureSkuName: {
    readonly Standard_DS13_v2_1TB_PS: "Standard_DS13_v2+1TB_PS";
    readonly Standard_DS13_v2_2TB_PS: "Standard_DS13_v2+2TB_PS";
    readonly Standard_DS14_v2_3TB_PS: "Standard_DS14_v2+3TB_PS";
    readonly Standard_DS14_v2_4TB_PS: "Standard_DS14_v2+4TB_PS";
    readonly Standard_D13_v2: "Standard_D13_v2";
    readonly Standard_D14_v2: "Standard_D14_v2";
    readonly Standard_L8s: "Standard_L8s";
    readonly Standard_L16s: "Standard_L16s";
    readonly Standard_L8s_v2: "Standard_L8s_v2";
    readonly Standard_L16s_v2: "Standard_L16s_v2";
    readonly Standard_D11_v2: "Standard_D11_v2";
    readonly Standard_D12_v2: "Standard_D12_v2";
    readonly Standard_L4s: "Standard_L4s";
    readonly Dev_No_SLA_Standard_D11_v2: "Dev(No SLA)_Standard_D11_v2";
    readonly Standard_E64i_v3: "Standard_E64i_v3";
    readonly Standard_E80ids_v4: "Standard_E80ids_v4";
    readonly Standard_E2a_v4: "Standard_E2a_v4";
    readonly Standard_E4a_v4: "Standard_E4a_v4";
    readonly Standard_E8a_v4: "Standard_E8a_v4";
    readonly Standard_E16a_v4: "Standard_E16a_v4";
    readonly Standard_E8as_v4_1TB_PS: "Standard_E8as_v4+1TB_PS";
    readonly Standard_E8as_v4_2TB_PS: "Standard_E8as_v4+2TB_PS";
    readonly Standard_E16as_v4_3TB_PS: "Standard_E16as_v4+3TB_PS";
    readonly Standard_E16as_v4_4TB_PS: "Standard_E16as_v4+4TB_PS";
    readonly Dev_No_SLA_Standard_E2a_v4: "Dev(No SLA)_Standard_E2a_v4";
};
/**
 * SKU name.
 */
export declare type AzureSkuName = (typeof AzureSkuName)[keyof typeof AzureSkuName];
export declare const AzureSkuTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
};
/**
 * SKU tier.
 */
export declare type AzureSkuTier = (typeof AzureSkuTier)[keyof typeof AzureSkuTier];
export declare const BlobStorageEventType: {
    readonly Microsoft_Storage_BlobCreated: "Microsoft.Storage.BlobCreated";
    readonly Microsoft_Storage_BlobRenamed: "Microsoft.Storage.BlobRenamed";
};
/**
 * The name of blob storage event type to process.
 */
export declare type BlobStorageEventType = (typeof BlobStorageEventType)[keyof typeof BlobStorageEventType];
export declare const ClusterPrincipalRole: {
    readonly AllDatabasesAdmin: "AllDatabasesAdmin";
    readonly AllDatabasesViewer: "AllDatabasesViewer";
};
/**
 * Cluster principal role.
 */
export declare type ClusterPrincipalRole = (typeof ClusterPrincipalRole)[keyof typeof ClusterPrincipalRole];
export declare const Compression: {
    readonly None: "None";
    readonly GZip: "GZip";
};
/**
 * The event hub messages compression type
 */
export declare type Compression = (typeof Compression)[keyof typeof Compression];
export declare const DataConnectionKind: {
    readonly EventHub: "EventHub";
    readonly EventGrid: "EventGrid";
    readonly IotHub: "IotHub";
};
/**
 * Kind of the endpoint for the data connection
 */
export declare type DataConnectionKind = (typeof DataConnectionKind)[keyof typeof DataConnectionKind];
export declare const DataFlowComputeType: {
    readonly General: "General";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly ComputeOptimized: "ComputeOptimized";
};
/**
 * Compute type of the cluster which will execute data flow job.
 */
export declare type DataFlowComputeType = (typeof DataFlowComputeType)[keyof typeof DataFlowComputeType];
export declare const DatabasePrincipalRole: {
    readonly Admin: "Admin";
    readonly Ingestor: "Ingestor";
    readonly Monitor: "Monitor";
    readonly User: "User";
    readonly UnrestrictedViewer: "UnrestrictedViewer";
    readonly Viewer: "Viewer";
};
/**
 * Database principal role.
 */
export declare type DatabasePrincipalRole = (typeof DatabasePrincipalRole)[keyof typeof DatabasePrincipalRole];
export declare const DefaultPrincipalsModificationKind: {
    readonly Union: "Union";
    readonly Replace: "Replace";
    readonly None: "None";
};
/**
 * The default principals modification kind
 */
export declare type DefaultPrincipalsModificationKind = (typeof DefaultPrincipalsModificationKind)[keyof typeof DefaultPrincipalsModificationKind];
export declare const EngineType: {
    readonly V2: "V2";
    readonly V3: "V3";
};
/**
 * The engine type
 */
export declare type EngineType = (typeof EngineType)[keyof typeof EngineType];
export declare const EventGridDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export declare type EventGridDataFormat = (typeof EventGridDataFormat)[keyof typeof EventGridDataFormat];
export declare const EventHubDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export declare type EventHubDataFormat = (typeof EventHubDataFormat)[keyof typeof EventHubDataFormat];
export declare const IntegrationRuntimeEdition: {
    readonly Standard: "Standard";
    readonly Enterprise: "Enterprise";
};
/**
 * The edition for the SSIS Integration Runtime
 */
export declare type IntegrationRuntimeEdition = (typeof IntegrationRuntimeEdition)[keyof typeof IntegrationRuntimeEdition];
export declare const IntegrationRuntimeEntityReferenceType: {
    readonly IntegrationRuntimeReference: "IntegrationRuntimeReference";
    readonly LinkedServiceReference: "LinkedServiceReference";
};
/**
 * The type of this referenced entity.
 */
export declare type IntegrationRuntimeEntityReferenceType = (typeof IntegrationRuntimeEntityReferenceType)[keyof typeof IntegrationRuntimeEntityReferenceType];
export declare const IntegrationRuntimeLicenseType: {
    readonly BasePrice: "BasePrice";
    readonly LicenseIncluded: "LicenseIncluded";
};
/**
 * License type for bringing your own license scenario.
 */
export declare type IntegrationRuntimeLicenseType = (typeof IntegrationRuntimeLicenseType)[keyof typeof IntegrationRuntimeLicenseType];
export declare const IntegrationRuntimeSsisCatalogPricingTier: {
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PremiumRS: "PremiumRS";
};
/**
 * The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
 */
export declare type IntegrationRuntimeSsisCatalogPricingTier = (typeof IntegrationRuntimeSsisCatalogPricingTier)[keyof typeof IntegrationRuntimeSsisCatalogPricingTier];
export declare const IntegrationRuntimeType: {
    readonly Managed: "Managed";
    readonly SelfHosted: "SelfHosted";
};
/**
 * Type of integration runtime.
 */
export declare type IntegrationRuntimeType = (typeof IntegrationRuntimeType)[keyof typeof IntegrationRuntimeType];
export declare const IotHubDataFormat: {
    readonly MULTIJSON: "MULTIJSON";
    readonly JSON: "JSON";
    readonly CSV: "CSV";
    readonly TSV: "TSV";
    readonly SCSV: "SCSV";
    readonly SOHSV: "SOHSV";
    readonly PSV: "PSV";
    readonly TXT: "TXT";
    readonly RAW: "RAW";
    readonly SINGLEJSON: "SINGLEJSON";
    readonly AVRO: "AVRO";
    readonly TSVE: "TSVE";
    readonly PARQUET: "PARQUET";
    readonly ORC: "ORC";
    readonly APACHEAVRO: "APACHEAVRO";
    readonly W3CLOGFILE: "W3CLOGFILE";
};
/**
 * The data format of the message. Optionally the data format can be added to each message.
 */
export declare type IotHubDataFormat = (typeof IotHubDataFormat)[keyof typeof IotHubDataFormat];
export declare const Kind: {
    readonly ReadWrite: "ReadWrite";
    readonly ReadOnlyFollowing: "ReadOnlyFollowing";
};
/**
 * Kind of the database
 */
export declare type Kind = (typeof Kind)[keyof typeof Kind];
export declare const NodeSize: {
    readonly None: "None";
    readonly Small: "Small";
    readonly Medium: "Medium";
    readonly Large: "Large";
    readonly XLarge: "XLarge";
    readonly XXLarge: "XXLarge";
    readonly XXXLarge: "XXXLarge";
};
/**
 * The level of compute power that each node in the Big Data pool has.
 */
export declare type NodeSize = (typeof NodeSize)[keyof typeof NodeSize];
export declare const NodeSizeFamily: {
    readonly None: "None";
    readonly MemoryOptimized: "MemoryOptimized";
    readonly HardwareAcceleratedFPGA: "HardwareAcceleratedFPGA";
    readonly HardwareAcceleratedGPU: "HardwareAcceleratedGPU";
};
/**
 * The kind of nodes that the Big Data pool provides.
 */
export declare type NodeSizeFamily = (typeof NodeSizeFamily)[keyof typeof NodeSizeFamily];
export declare const PrincipalType: {
    readonly App: "App";
    readonly Group: "Group";
    readonly User: "User";
};
/**
 * Principal type.
 */
export declare type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The type of managed identity for the workspace
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SensitivityLabelRank: {
    readonly None: "None";
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
    readonly Critical: "Critical";
};
export declare type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
export declare const StorageAccountType: {
    readonly GRS: "GRS";
    readonly LRS: "LRS";
    readonly ZRS: "ZRS";
};
/**
 * The storage account type used to store backups for this sql pool.
 */
export declare type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
export declare const TransparentDataEncryptionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The status of the database transparent data encryption.
 */
export declare type TransparentDataEncryptionStatus = (typeof TransparentDataEncryptionStatus)[keyof typeof TransparentDataEncryptionStatus];
export declare const WorkspacePublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Enable or Disable public network access to workspace
 */
export declare type WorkspacePublicNetworkAccess = (typeof WorkspacePublicNetworkAccess)[keyof typeof WorkspacePublicNetworkAccess];
