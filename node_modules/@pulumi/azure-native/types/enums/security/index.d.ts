import * as v20150601preview from "./v20150601preview";
import * as v20170801preview from "./v20170801preview";
import * as v20190101preview from "./v20190101preview";
import * as v20190801 from "./v20190801";
import * as v20200101 from "./v20200101";
import * as v20200101preview from "./v20200101preview";
import * as v20210601 from "./v20210601";
export { v20150601preview, v20170801preview, v20190101preview, v20190801, v20200101, v20200101preview, v20210601, };
export declare const ActionType: {
    readonly LogicApp: "LogicApp";
    readonly EventHub: "EventHub";
    readonly Workspace: "Workspace";
};
/**
 * The type of the action that will be triggered by the Automation
 */
export declare type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const AdditionalWorkspaceDataType: {
    readonly Alerts: "Alerts";
    readonly RawEvents: "RawEvents";
};
/**
 * Data types sent to workspace.
 */
export declare type AdditionalWorkspaceDataType = (typeof AdditionalWorkspaceDataType)[keyof typeof AdditionalWorkspaceDataType];
export declare const AdditionalWorkspaceType: {
    readonly Sentinel: "Sentinel";
};
/**
 * Workspace type.
 */
export declare type AdditionalWorkspaceType = (typeof AdditionalWorkspaceType)[keyof typeof AdditionalWorkspaceType];
export declare const AssessmentStatusCode: {
    /**
     * The resource is healthy
     */
    readonly Healthy: "Healthy";
    /**
     * The resource has a security issue that needs to be addressed
     */
    readonly Unhealthy: "Unhealthy";
    /**
     * Assessment for this resource did not happen
     */
    readonly NotApplicable: "NotApplicable";
};
/**
 * Programmatic code for the status of the assessment
 */
export declare type AssessmentStatusCode = (typeof AssessmentStatusCode)[keyof typeof AssessmentStatusCode];
export declare const AssessmentType: {
    /**
     * Azure Security Center managed assessments
     */
    readonly BuiltIn: "BuiltIn";
    /**
     * User defined policies that are automatically ingested from Azure Policy to Azure Security Center
     */
    readonly CustomPolicy: "CustomPolicy";
    /**
     * User assessments pushed directly by the user or other third party to Azure Security Center
     */
    readonly CustomerManaged: "CustomerManaged";
    /**
     * An assessment that was created by a verified 3rd party if the user connected it to ASC
     */
    readonly VerifiedPartner: "VerifiedPartner";
};
/**
 * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
 */
export declare type AssessmentType = (typeof AssessmentType)[keyof typeof AssessmentType];
export declare const AuthenticationType: {
    /**
     * AWS cloud account connector user credentials authentication
     */
    readonly AwsCreds: "awsCreds";
    /**
     * AWS account connector assume role authentication
     */
    readonly AwsAssumeRole: "awsAssumeRole";
    /**
     * GCP account connector service to service authentication
     */
    readonly GcpCredentials: "gcpCredentials";
};
/**
 * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
 */
export declare type AuthenticationType = (typeof AuthenticationType)[keyof typeof AuthenticationType];
export declare const AutoProvision: {
    /**
     * Install missing Azure Arc agents on machines automatically
     */
    readonly On: "On";
    /**
     * Do not install Azure Arc agent on the machines automatically
     */
    readonly Off: "Off";
};
/**
 * Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
 */
export declare type AutoProvision = (typeof AutoProvision)[keyof typeof AutoProvision];
export declare const Categories: {
    readonly Compute: "Compute";
    readonly Networking: "Networking";
    readonly Data: "Data";
    readonly IdentityAndAccess: "IdentityAndAccess";
    readonly IoT: "IoT";
};
/**
 * The categories of resource that is at risk when the assessment is unhealthy
 */
export declare type Categories = (typeof Categories)[keyof typeof Categories];
export declare const DataSource: {
    /**
     * Devices twin data
     */
    readonly TwinData: "TwinData";
};
export declare type DataSource = (typeof DataSource)[keyof typeof DataSource];
export declare const EventSource: {
    readonly Assessments: "Assessments";
    readonly SubAssessments: "SubAssessments";
    readonly Alerts: "Alerts";
    readonly SecureScores: "SecureScores";
    readonly SecureScoresSnapshot: "SecureScoresSnapshot";
    readonly SecureScoreControls: "SecureScoreControls";
    readonly SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot";
    readonly RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment";
    readonly RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot";
};
/**
 * A valid event source type.
 */
export declare type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const ExportData: {
    /**
     * Agent raw events
     */
    readonly RawEvents: "RawEvents";
};
export declare type ExportData = (typeof ExportData)[keyof typeof ExportData];
export declare const ImplementationEffort: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The implementation effort required to remediate this assessment
 */
export declare type ImplementationEffort = (typeof ImplementationEffort)[keyof typeof ImplementationEffort];
export declare const MinimalSeverity: {
    /**
     * Get notifications on new alerts with High severity
     */
    readonly High: "High";
    /**
     * Get notifications on new alerts with medium or high severity
     */
    readonly Medium: "Medium";
    /**
     * Don't get notifications on new alerts with low, medium or high severity
     */
    readonly Low: "Low";
};
/**
 * Defines the minimal alert severity which will be sent as email notifications
 */
export declare type MinimalSeverity = (typeof MinimalSeverity)[keyof typeof MinimalSeverity];
export declare const Operator: {
    /**
     * Applies for decimal and non-decimal operands
     */
    readonly Equals: "Equals";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThan: "LesserThan";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
    /**
     * Applies  for decimal and non-decimal operands
     */
    readonly NotEquals: "NotEquals";
    /**
     * Applies only for non-decimal operands
     */
    readonly Contains: "Contains";
    /**
     * Applies only for non-decimal operands
     */
    readonly StartsWith: "StartsWith";
    /**
     * Applies only for non-decimal operands
     */
    readonly EndsWith: "EndsWith";
};
/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 */
export declare type Operator = (typeof Operator)[keyof typeof Operator];
export declare const PropertyType: {
    readonly String: "String";
    readonly Integer: "Integer";
    readonly Number: "Number";
    readonly Boolean: "Boolean";
};
/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 */
export declare type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];
export declare const Protocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
    readonly All: "*";
};
export declare type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const RecommendationConfigStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Recommendation status. When the recommendation status is disabled recommendations are not generated.
 */
export declare type RecommendationConfigStatus = (typeof RecommendationConfigStatus)[keyof typeof RecommendationConfigStatus];
export declare const RecommendationType: {
    /**
     * Authentication schema used for pull an edge module from an ACR repository does not use Service Principal Authentication.
     */
    readonly IoT_ACRAuthentication: "IoT_ACRAuthentication";
    /**
     * IoT agent message size capacity is currently underutilized, causing an increase in the number of sent messages. Adjust message intervals for better utilization.
     */
    readonly IoT_AgentSendsUnutilizedMessages: "IoT_AgentSendsUnutilizedMessages";
    /**
     * Identified security related system configuration issues.
     */
    readonly IoT_Baseline: "IoT_Baseline";
    /**
     * You can optimize Edge Hub memory usage by turning off protocol heads for any protocols not used by Edge modules in your solution.
     */
    readonly IoT_EdgeHubMemOptimize: "IoT_EdgeHubMemOptimize";
    /**
     * Logging is disabled for this edge module.
     */
    readonly IoT_EdgeLoggingOptions: "IoT_EdgeLoggingOptions";
    /**
     * A minority within a device security group has inconsistent Edge Module settings with the rest of their group.
     */
    readonly IoT_InconsistentModuleSettings: "IoT_InconsistentModuleSettings";
    /**
     * Install the Azure Security of Things Agent.
     */
    readonly IoT_InstallAgent: "IoT_InstallAgent";
    /**
     * IP Filter Configuration should have rules defined for allowed traffic and should deny all other traffic by default.
     */
    readonly IoT_IPFilter_DenyAll: "IoT_IPFilter_DenyAll";
    /**
     * An Allow IP Filter rules source IP range is too large. Overly permissive rules might expose your IoT hub to malicious intenders.
     */
    readonly IoT_IPFilter_PermissiveRule: "IoT_IPFilter_PermissiveRule";
    /**
     * A listening endpoint was found on the device.
     */
    readonly IoT_OpenPorts: "IoT_OpenPorts";
    /**
     * An Allowed firewall policy was found (INPUT/OUTPUT). The policy should Deny all traffic by default and define rules to allow necessary communication to/from the device.
     */
    readonly IoT_PermissiveFirewallPolicy: "IoT_PermissiveFirewallPolicy";
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    readonly IoT_PermissiveInputFirewallRules: "IoT_PermissiveInputFirewallRules";
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    readonly IoT_PermissiveOutputFirewallRules: "IoT_PermissiveOutputFirewallRules";
    /**
     * Edge module is configured to run in privileged mode, with extensive Linux capabilities or with host-level network access (send/receive data to host machine).
     */
    readonly IoT_PrivilegedDockerOptions: "IoT_PrivilegedDockerOptions";
    /**
     * Same authentication credentials to the IoT Hub used by multiple devices. This could indicate an illegitimate device impersonating a legitimate device. It also exposes the risk of device impersonation by an attacker.
     */
    readonly IoT_SharedCredentials: "IoT_SharedCredentials";
    /**
     * Insecure TLS configurations detected. Immediate upgrade recommended.
     */
    readonly IoT_VulnerableTLSCipherSuite: "IoT_VulnerableTLSCipherSuite";
};
/**
 * The type of IoT Security recommendation.
 */
export declare type RecommendationType = (typeof RecommendationType)[keyof typeof RecommendationType];
export declare const Roles: {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    readonly AccountAdmin: "AccountAdmin";
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    readonly ServiceAdmin: "ServiceAdmin";
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    readonly Owner: "Owner";
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    readonly Contributor: "Contributor";
};
/**
 * A possible role to configure sending security notification alerts to
 */
export declare type Roles = (typeof Roles)[keyof typeof Roles];
export declare const RuleState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Expired: "Expired";
};
/**
 * Possible states of the rule
 */
export declare type RuleState = (typeof RuleState)[keyof typeof RuleState];
export declare const SecuritySolutionStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of the IoT Security solution.
 */
export declare type SecuritySolutionStatus = (typeof SecuritySolutionStatus)[keyof typeof SecuritySolutionStatus];
export declare const Severity: {
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
};
/**
 * The severity level of the assessment
 */
export declare type Severity = (typeof Severity)[keyof typeof Severity];
export declare const Source: {
    /**
     * Resource is in Azure
     */
    readonly Azure: "Azure";
    /**
     * Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremise: "OnPremise";
    /**
     * SQL Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremiseSql: "OnPremiseSql";
};
/**
 * The platform where the assessed resource resides
 */
export declare type Source = (typeof Source)[keyof typeof Source];
export declare const State: {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    readonly On: "On";
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    readonly Off: "Off";
};
/**
 * Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
 */
export declare type State = (typeof State)[keyof typeof State];
export declare const Status: {
    readonly Revoked: "Revoked";
    readonly Initiated: "Initiated";
};
/**
 * The status of the port
 */
export declare type Status = (typeof Status)[keyof typeof Status];
export declare const StatusReason: {
    readonly Expired: "Expired";
    readonly UserRequested: "UserRequested";
    readonly NewerRequestInitiated: "NewerRequestInitiated";
};
/**
 * A description of why the `status` has its value
 */
export declare type StatusReason = (typeof StatusReason)[keyof typeof StatusReason];
export declare const Threats: {
    readonly AccountBreach: "accountBreach";
    readonly DataExfiltration: "dataExfiltration";
    readonly DataSpillage: "dataSpillage";
    readonly MaliciousInsider: "maliciousInsider";
    readonly ElevationOfPrivilege: "elevationOfPrivilege";
    readonly ThreatResistance: "threatResistance";
    readonly MissingCoverage: "missingCoverage";
    readonly DenialOfService: "denialOfService";
};
/**
 * Threats impact of the assessment
 */
export declare type Threats = (typeof Threats)[keyof typeof Threats];
export declare const UnmaskedIpLoggingStatus: {
    /**
     * Unmasked IP logging is disabled
     */
    readonly Disabled: "Disabled";
    /**
     * Unmasked IP logging is enabled
     */
    readonly Enabled: "Enabled";
};
/**
 * Unmasked IP address logging status
 */
export declare type UnmaskedIpLoggingStatus = (typeof UnmaskedIpLoggingStatus)[keyof typeof UnmaskedIpLoggingStatus];
export declare const UserImpact: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The user impact of the assessment
 */
export declare type UserImpact = (typeof UserImpact)[keyof typeof UserImpact];
