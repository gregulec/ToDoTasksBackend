export declare const ActionType: {
    readonly LogicApp: "LogicApp";
    readonly EventHub: "EventHub";
    readonly Workspace: "Workspace";
};
/**
 * The type of the action that will be triggered by the Automation
 */
export declare type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const AssessmentStatusCode: {
    /**
     * The resource is healthy
     */
    readonly Healthy: "Healthy";
    /**
     * The resource has a security issue that needs to be addressed
     */
    readonly Unhealthy: "Unhealthy";
    /**
     * Assessment for this resource did not happen
     */
    readonly NotApplicable: "NotApplicable";
};
/**
 * Programmatic code for the status of the assessment
 */
export declare type AssessmentStatusCode = (typeof AssessmentStatusCode)[keyof typeof AssessmentStatusCode];
export declare const AssessmentType: {
    /**
     * Azure Security Center managed assessments
     */
    readonly BuiltIn: "BuiltIn";
    /**
     * User defined policies that are automatically ingested from Azure Policy to Azure Security Center
     */
    readonly CustomPolicy: "CustomPolicy";
    /**
     * User assessments pushed directly by the user or other third party to Azure Security Center
     */
    readonly CustomerManaged: "CustomerManaged";
};
/**
 * BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
 */
export declare type AssessmentType = (typeof AssessmentType)[keyof typeof AssessmentType];
export declare const Categories: {
    readonly Compute: "Compute";
    readonly Networking: "Networking";
    readonly Data: "Data";
    readonly IdentityAndAccess: "IdentityAndAccess";
    readonly IoT: "IoT";
};
/**
 * The categories of resource that is at risk when the assessment is unhealthy
 */
export declare type Categories = (typeof Categories)[keyof typeof Categories];
export declare const EventSource: {
    readonly Assessments: "Assessments";
    readonly SubAssessments: "SubAssessments";
    readonly Alerts: "Alerts";
    readonly SecureScores: "SecureScores";
    readonly SecureScoresSnapshot: "SecureScoresSnapshot";
    readonly SecureScoreControls: "SecureScoreControls";
    readonly SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot";
    readonly RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment";
    readonly RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot";
};
/**
 * A valid event source type.
 */
export declare type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const ImplementationEffort: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The implementation effort required to remediate this assessment
 */
export declare type ImplementationEffort = (typeof ImplementationEffort)[keyof typeof ImplementationEffort];
export declare const Operator: {
    /**
     * Applies for decimal and non-decimal operands
     */
    readonly Equals: "Equals";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThan: "GreaterThan";
    /**
     * Applies only for decimal operands
     */
    readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThan: "LesserThan";
    /**
     * Applies only for decimal operands
     */
    readonly LesserThanOrEqualTo: "LesserThanOrEqualTo";
    /**
     * Applies  for decimal and non-decimal operands
     */
    readonly NotEquals: "NotEquals";
    /**
     * Applies only for non-decimal operands
     */
    readonly Contains: "Contains";
    /**
     * Applies only for non-decimal operands
     */
    readonly StartsWith: "StartsWith";
    /**
     * Applies only for non-decimal operands
     */
    readonly EndsWith: "EndsWith";
};
/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 */
export declare type Operator = (typeof Operator)[keyof typeof Operator];
export declare const PropertyType: {
    readonly String: "String";
    readonly Integer: "Integer";
    readonly Number: "Number";
    readonly Boolean: "Boolean";
};
/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 */
export declare type PropertyType = (typeof PropertyType)[keyof typeof PropertyType];
export declare const RuleState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
    readonly Expired: "Expired";
};
/**
 * Possible states of the rule
 */
export declare type RuleState = (typeof RuleState)[keyof typeof RuleState];
export declare const Severity: {
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
};
/**
 * The severity level of the assessment
 */
export declare type Severity = (typeof Severity)[keyof typeof Severity];
export declare const Source: {
    /**
     * Resource is in Azure
     */
    readonly Azure: "Azure";
    /**
     * Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremise: "OnPremise";
    /**
     * SQL Resource in an on premise machine connected to Azure cloud
     */
    readonly OnPremiseSql: "OnPremiseSql";
};
/**
 * The platform where the assessed resource resides
 */
export declare type Source = (typeof Source)[keyof typeof Source];
export declare const Threats: {
    readonly AccountBreach: "accountBreach";
    readonly DataExfiltration: "dataExfiltration";
    readonly DataSpillage: "dataSpillage";
    readonly MaliciousInsider: "maliciousInsider";
    readonly ElevationOfPrivilege: "elevationOfPrivilege";
    readonly ThreatResistance: "threatResistance";
    readonly MissingCoverage: "missingCoverage";
    readonly DenialOfService: "denialOfService";
};
/**
 * Threats impact of the assessment
 */
export declare type Threats = (typeof Threats)[keyof typeof Threats];
export declare const UserImpact: {
    readonly Low: "Low";
    readonly Moderate: "Moderate";
    readonly High: "High";
};
/**
 * The user impact of the assessment
 */
export declare type UserImpact = (typeof UserImpact)[keyof typeof UserImpact];
