export declare const AutoUserScope: {
    readonly Task: "Task";
    readonly Pool: "Pool";
};
/**
 * pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
 */
export declare type AutoUserScope = (typeof AutoUserScope)[keyof typeof AutoUserScope];
export declare const CachingType: {
    readonly None: "None";
    readonly ReadOnly: "ReadOnly";
    readonly ReadWrite: "ReadWrite";
};
/**
 * Default value is none.
 */
export declare type CachingType = (typeof CachingType)[keyof typeof CachingType];
export declare const CertificateFormat: {
    readonly Pfx: "Pfx";
    readonly Cer: "Cer";
};
/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 */
export declare type CertificateFormat = (typeof CertificateFormat)[keyof typeof CertificateFormat];
export declare const CertificateStoreLocation: {
    readonly CurrentUser: "CurrentUser";
    readonly LocalMachine: "LocalMachine";
};
/**
 * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 */
export declare type CertificateStoreLocation = (typeof CertificateStoreLocation)[keyof typeof CertificateStoreLocation];
export declare const CertificateVisibility: {
    readonly StartTask: "StartTask";
    readonly Task: "Task";
    readonly RemoteUser: "RemoteUser";
};
export declare type CertificateVisibility = (typeof CertificateVisibility)[keyof typeof CertificateVisibility];
export declare const ComputeNodeDeallocationOption: {
    readonly Requeue: "Requeue";
    readonly Terminate: "Terminate";
    readonly TaskCompletion: "TaskCompletion";
    readonly RetainedData: "RetainedData";
};
/**
 * If omitted, the default value is Requeue.
 */
export declare type ComputeNodeDeallocationOption = (typeof ComputeNodeDeallocationOption)[keyof typeof ComputeNodeDeallocationOption];
export declare const ComputeNodeFillType: {
    readonly Spread: "Spread";
    readonly Pack: "Pack";
};
export declare type ComputeNodeFillType = (typeof ComputeNodeFillType)[keyof typeof ComputeNodeFillType];
export declare const ElevationLevel: {
    readonly NonAdmin: "NonAdmin";
    readonly Admin: "Admin";
};
/**
 * nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
 */
export declare type ElevationLevel = (typeof ElevationLevel)[keyof typeof ElevationLevel];
export declare const InboundEndpointProtocol: {
    readonly TCP: "TCP";
    readonly UDP: "UDP";
};
export declare type InboundEndpointProtocol = (typeof InboundEndpointProtocol)[keyof typeof InboundEndpointProtocol];
export declare const InterNodeCommunicationState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
 */
export declare type InterNodeCommunicationState = (typeof InterNodeCommunicationState)[keyof typeof InterNodeCommunicationState];
export declare const NetworkSecurityGroupRuleAccess: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
export declare type NetworkSecurityGroupRuleAccess = (typeof NetworkSecurityGroupRuleAccess)[keyof typeof NetworkSecurityGroupRuleAccess];
export declare const PoolAllocationMode: {
    readonly BatchService: "BatchService";
    readonly UserSubscription: "UserSubscription";
};
/**
 * The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
 */
export declare type PoolAllocationMode = (typeof PoolAllocationMode)[keyof typeof PoolAllocationMode];
export declare const StorageAccountType: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Premium_LRS: "Premium_LRS";
};
/**
 * If omitted, the default is "Standard_LRS". Values are:
 *
 *  Standard_LRS - The data disk should use standard locally redundant storage.
 *  Premium_LRS - The data disk should use premium locally redundant storage.
 */
export declare type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
