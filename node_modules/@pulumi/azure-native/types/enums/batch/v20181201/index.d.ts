export declare const AutoUserScope: {
    /**
     * Specifies that the service should create a new user for the task.
     */
    readonly Task: "Task";
    /**
     * Specifies that the task runs as the common auto user account which is created on every node in a pool.
     */
    readonly Pool: "Pool";
};
/**
 * The default value is task.
 */
export declare type AutoUserScope = (typeof AutoUserScope)[keyof typeof AutoUserScope];
export declare const CachingType: {
    /**
     * The caching mode for the disk is not enabled.
     */
    readonly None: "None";
    /**
     * The caching mode for the disk is read only.
     */
    readonly ReadOnly: "ReadOnly";
    /**
     * The caching mode for the disk is read and write.
     */
    readonly ReadWrite: "ReadWrite";
};
/**
 * Values are:
 *
 *  none - The caching mode for the disk is not enabled.
 *  readOnly - The caching mode for the disk is read only.
 *  readWrite - The caching mode for the disk is read and write.
 *
 *  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
 */
export declare type CachingType = (typeof CachingType)[keyof typeof CachingType];
export declare const CertificateFormat: {
    /**
     * The certificate is a PFX (PKCS#12) formatted certificate or certificate chain.
     */
    readonly Pfx: "Pfx";
    /**
     * The certificate is a base64-encoded X.509 certificate.
     */
    readonly Cer: "Cer";
};
/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 */
export declare type CertificateFormat = (typeof CertificateFormat)[keyof typeof CertificateFormat];
export declare const CertificateStoreLocation: {
    /**
     * Certificates should be installed to the CurrentUser certificate store.
     */
    readonly CurrentUser: "CurrentUser";
    /**
     * Certificates should be installed to the LocalMachine certificate store.
     */
    readonly LocalMachine: "LocalMachine";
};
/**
 * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 */
export declare type CertificateStoreLocation = (typeof CertificateStoreLocation)[keyof typeof CertificateStoreLocation];
export declare const CertificateVisibility: {
    /**
     * The certificate should be visible to the user account under which the start task is run.
     */
    readonly StartTask: "StartTask";
    /**
     * The certificate should be visible to the user accounts under which job tasks are run.
     */
    readonly Task: "Task";
    /**
     * The certificate should be visible to the user accounts under which users remotely access the node.
     */
    readonly RemoteUser: "RemoteUser";
};
export declare type CertificateVisibility = (typeof CertificateVisibility)[keyof typeof CertificateVisibility];
export declare const ComputeNodeDeallocationOption: {
    /**
     * Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Remove nodes as soon as tasks have been terminated.
     */
    readonly Requeue: "Requeue";
    /**
     * Terminate running tasks. The tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Remove nodes as soon as tasks have been terminated.
     */
    readonly Terminate: "Terminate";
    /**
     * Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.
     */
    readonly TaskCompletion: "TaskCompletion";
    /**
     * Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
     */
    readonly RetainedData: "RetainedData";
};
/**
 * If omitted, the default value is Requeue.
 */
export declare type ComputeNodeDeallocationOption = (typeof ComputeNodeDeallocationOption)[keyof typeof ComputeNodeDeallocationOption];
export declare const ComputeNodeFillType: {
    /**
     * Tasks should be assigned evenly across all nodes in the pool.
     */
    readonly Spread: "Spread";
    /**
     * As many tasks as possible (maxTasksPerNode) should be assigned to each node in the pool before any tasks are assigned to the next node in the pool.
     */
    readonly Pack: "Pack";
};
export declare type ComputeNodeFillType = (typeof ComputeNodeFillType)[keyof typeof ComputeNodeFillType];
export declare const ContainerType: {
    /**
     * A Docker compatible container technology will be used to launch the containers.
     */
    readonly DockerCompatible: "DockerCompatible";
};
export declare type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];
export declare const ElevationLevel: {
    /**
     * The user is a standard user without elevated access.
     */
    readonly NonAdmin: "NonAdmin";
    /**
     * The user is a user with elevated access and operates with full Administrator permissions.
     */
    readonly Admin: "Admin";
};
/**
 * nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
 */
export declare type ElevationLevel = (typeof ElevationLevel)[keyof typeof ElevationLevel];
export declare const InboundEndpointProtocol: {
    /**
     * Use TCP for the endpoint.
     */
    readonly TCP: "TCP";
    /**
     * Use UDP for the endpoint.
     */
    readonly UDP: "UDP";
};
export declare type InboundEndpointProtocol = (typeof InboundEndpointProtocol)[keyof typeof InboundEndpointProtocol];
export declare const InterNodeCommunicationState: {
    /**
     * Enable network communication between virtual machines.
     */
    readonly Enabled: "Enabled";
    /**
     * Disable network communication between virtual machines.
     */
    readonly Disabled: "Disabled";
};
/**
 * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
 */
export declare type InterNodeCommunicationState = (typeof InterNodeCommunicationState)[keyof typeof InterNodeCommunicationState];
export declare const LoginMode: {
    /**
     * The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is recommended for long running parallel processes.
     */
    readonly Batch: "Batch";
    /**
     * The LOGON32_LOGON_INTERACTIVE Win32 login mode. Some applications require having permissions associated with the interactive login mode. If this is the case for an application used in your task, then this option is recommended.
     */
    readonly Interactive: "Interactive";
};
/**
 * Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
 */
export declare type LoginMode = (typeof LoginMode)[keyof typeof LoginMode];
export declare const NetworkSecurityGroupRuleAccess: {
    /**
     * Allow access.
     */
    readonly Allow: "Allow";
    /**
     * Deny access.
     */
    readonly Deny: "Deny";
};
export declare type NetworkSecurityGroupRuleAccess = (typeof NetworkSecurityGroupRuleAccess)[keyof typeof NetworkSecurityGroupRuleAccess];
export declare const PoolAllocationMode: {
    /**
     * Pools will be allocated in subscriptions owned by the Batch service.
     */
    readonly BatchService: "BatchService";
    /**
     * Pools will be allocated in a subscription owned by the user.
     */
    readonly UserSubscription: "UserSubscription";
};
/**
 * The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
 */
export declare type PoolAllocationMode = (typeof PoolAllocationMode)[keyof typeof PoolAllocationMode];
export declare const StorageAccountType: {
    /**
     * The data disk should use standard locally redundant storage.
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * The data disk should use premium locally redundant storage.
     */
    readonly Premium_LRS: "Premium_LRS";
};
/**
 * If omitted, the default is "Standard_LRS". Values are:
 *
 *  Standard_LRS - The data disk should use standard locally redundant storage.
 *  Premium_LRS - The data disk should use premium locally redundant storage.
 */
export declare type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
