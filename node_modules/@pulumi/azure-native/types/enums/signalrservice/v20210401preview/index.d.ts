export declare const ACLAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * Default action when no other rule matches
 */
export declare type ACLAction = (typeof ACLAction)[keyof typeof ACLAction];
export declare const FeatureFlags: {
    readonly ServiceMode: "ServiceMode";
    readonly EnableConnectivityLogs: "EnableConnectivityLogs";
    readonly EnableMessagingLogs: "EnableMessagingLogs";
    readonly EnableLiveTrace: "EnableLiveTrace";
};
/**
 * FeatureFlags is the supported features of Azure SignalR service.
 * - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
 * - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
 * - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
 * - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be helpful when you developing your own Azure SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged. Values allowed: "true"/"false", to enable/disable live trace feature.
 */
export declare type FeatureFlags = (typeof FeatureFlags)[keyof typeof FeatureFlags];
export declare const ManagedIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
};
/**
 * Represent the identity type: systemAssigned, userAssigned, None
 */
export declare type ManagedIdentityType = (typeof ManagedIdentityType)[keyof typeof ManagedIdentityType];
export declare const PrivateLinkServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateLinkServiceConnectionStatus = (typeof PrivateLinkServiceConnectionStatus)[keyof typeof PrivateLinkServiceConnectionStatus];
export declare const ServiceKind: {
    readonly SignalR: "SignalR";
    readonly RawWebSockets: "RawWebSockets";
};
/**
 * The kind of the service - e.g. "SignalR" for "Microsoft.SignalRService/SignalR"
 */
export declare type ServiceKind = (typeof ServiceKind)[keyof typeof ServiceKind];
export declare const SignalRRequestType: {
    readonly ClientConnection: "ClientConnection";
    readonly ServerConnection: "ServerConnection";
    readonly RESTAPI: "RESTAPI";
    readonly Trace: "Trace";
};
/**
 * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
 */
export declare type SignalRRequestType = (typeof SignalRRequestType)[keyof typeof SignalRRequestType];
export declare const SignalRSkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * Optional tier of this particular SKU. 'Standard' or 'Free'.
 *
 * `Basic` is deprecated, use `Standard` instead.
 */
export declare type SignalRSkuTier = (typeof SignalRSkuTier)[keyof typeof SignalRSkuTier];
export declare const UpstreamAuthType: {
    readonly None: "None";
    readonly ManagedIdentity: "ManagedIdentity";
};
/**
 * Gets or sets the type of auth. None or ManagedIdentity is supported now.
 */
export declare type UpstreamAuthType = (typeof UpstreamAuthType)[keyof typeof UpstreamAuthType];
