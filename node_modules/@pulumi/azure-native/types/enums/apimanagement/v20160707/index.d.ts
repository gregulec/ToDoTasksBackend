export declare const ApiProtocolContract: {
    readonly Http: "Http";
    readonly Https: "Https";
};
export declare type ApiProtocolContract = (typeof ApiProtocolContract)[keyof typeof ApiProtocolContract];
export declare const ApiTypeContract: {
    readonly Http: "Http";
    readonly Soap: "Soap";
};
/**
 * Type of API.
 */
export declare type ApiTypeContract = (typeof ApiTypeContract)[keyof typeof ApiTypeContract];
export declare const BearerTokenSendingMethodsContract: {
    readonly AuthorizationHeader: "authorizationHeader";
    readonly Query: "query";
};
export declare type BearerTokenSendingMethodsContract = (typeof BearerTokenSendingMethodsContract)[keyof typeof BearerTokenSendingMethodsContract];
export declare const ClientAuthenticationMethodContract: {
    readonly Basic: "Basic";
    readonly Body: "Body";
};
export declare type ClientAuthenticationMethodContract = (typeof ClientAuthenticationMethodContract)[keyof typeof ClientAuthenticationMethodContract];
export declare const GrantTypesContract: {
    readonly AuthorizationCode: "authorizationCode";
    readonly Implicit: "implicit";
    readonly ResourceOwnerPassword: "resourceOwnerPassword";
    readonly ClientCredentials: "clientCredentials";
};
export declare type GrantTypesContract = (typeof GrantTypesContract)[keyof typeof GrantTypesContract];
export declare const GroupTypeContract: {
    readonly Custom: "Custom";
    readonly System: "System";
    readonly External: "External";
};
/**
 * Group type.
 */
export declare type GroupTypeContract = (typeof GroupTypeContract)[keyof typeof GroupTypeContract];
export declare const HostnameType: {
    readonly Proxy: "Proxy";
    readonly Portal: "Portal";
    readonly Management: "Management";
    readonly Scm: "Scm";
};
/**
 * Hostname type.
 */
export declare type HostnameType = (typeof HostnameType)[keyof typeof HostnameType];
export declare const IdentityProviderNameType: {
    readonly Facebook: "facebook";
    readonly Google: "google";
    readonly Microsoft: "microsoft";
    readonly Twitter: "twitter";
    readonly Aad: "aad";
};
/**
 * Identity Provider Type identifier.
 */
export declare type IdentityProviderNameType = (typeof IdentityProviderNameType)[keyof typeof IdentityProviderNameType];
export declare const LoggerTypeContract: {
    readonly AzureEventHub: "AzureEventHub";
};
/**
 * Logger type.
 */
export declare type LoggerTypeContract = (typeof LoggerTypeContract)[keyof typeof LoggerTypeContract];
export declare const MethodContract: {
    readonly HEAD: "HEAD";
    readonly OPTIONS: "OPTIONS";
    readonly TRACE: "TRACE";
    readonly GET: "GET";
    readonly POST: "POST";
    readonly PUT: "PUT";
    readonly PATCH: "PATCH";
    readonly DELETE: "DELETE";
};
export declare type MethodContract = (typeof MethodContract)[keyof typeof MethodContract];
export declare const ProductStateContract: {
    readonly NotPublished: "NotPublished";
    readonly Published: "Published";
};
/**
 * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.
 */
export declare type ProductStateContract = (typeof ProductStateContract)[keyof typeof ProductStateContract];
export declare const SkuType: {
    readonly Developer: "Developer";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * Name of the Sku.
 */
export declare type SkuType = (typeof SkuType)[keyof typeof SkuType];
export declare const SubscriptionStateContract: {
    readonly Suspended: "Suspended";
    readonly Active: "Active";
    readonly Expired: "Expired";
    readonly Submitted: "Submitted";
    readonly Rejected: "Rejected";
    readonly Cancelled: "Cancelled";
};
/**
 * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 */
export declare type SubscriptionStateContract = (typeof SubscriptionStateContract)[keyof typeof SubscriptionStateContract];
export declare const UserStateContract: {
    readonly Active: "Active";
    readonly Blocked: "Blocked";
};
/**
 * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
 */
export declare type UserStateContract = (typeof UserStateContract)[keyof typeof UserStateContract];
export declare const VirtualNetworkType: {
    readonly None: "None";
    readonly External: "External";
    readonly Internal: "Internal";
};
/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 */
export declare type VirtualNetworkType = (typeof VirtualNetworkType)[keyof typeof VirtualNetworkType];
