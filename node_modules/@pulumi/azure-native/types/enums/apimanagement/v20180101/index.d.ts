export declare const ApiType: {
    readonly Http: "http";
    readonly Soap: "soap";
};
/**
 * Type of API.
 */
export declare type ApiType = (typeof ApiType)[keyof typeof ApiType];
export declare const ApimIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type. Currently the only supported type is 'SystemAssigned'.
 */
export declare type ApimIdentityType = (typeof ApimIdentityType)[keyof typeof ApimIdentityType];
export declare const AuthorizationMethod: {
    readonly HEAD: "HEAD";
    readonly OPTIONS: "OPTIONS";
    readonly TRACE: "TRACE";
    readonly GET: "GET";
    readonly POST: "POST";
    readonly PUT: "PUT";
    readonly PATCH: "PATCH";
    readonly DELETE: "DELETE";
};
export declare type AuthorizationMethod = (typeof AuthorizationMethod)[keyof typeof AuthorizationMethod];
export declare const BackendProtocol: {
    /**
     * The Backend is a RESTful service.
     */
    readonly Http: "http";
    /**
     * The Backend is a SOAP service.
     */
    readonly Soap: "soap";
};
/**
 * Backend communication protocol.
 */
export declare type BackendProtocol = (typeof BackendProtocol)[keyof typeof BackendProtocol];
export declare const BearerTokenSendingMethod: {
    readonly AuthorizationHeader: "authorizationHeader";
    readonly Query: "query";
};
export declare type BearerTokenSendingMethod = (typeof BearerTokenSendingMethod)[keyof typeof BearerTokenSendingMethod];
export declare const BearerTokenSendingMethods: {
    /**
     * Access token will be transmitted in the Authorization header using Bearer schema
     */
    readonly AuthorizationHeader: "authorizationHeader";
    /**
     * Access token will be transmitted as query parameters.
     */
    readonly Query: "query";
};
/**
 * Form of an authorization grant, which the client uses to request the access token.
 */
export declare type BearerTokenSendingMethods = (typeof BearerTokenSendingMethods)[keyof typeof BearerTokenSendingMethods];
export declare const ClientAuthenticationMethod: {
    /**
     * Basic Client Authentication method.
     */
    readonly Basic: "Basic";
    /**
     * Body based Authentication method.
     */
    readonly Body: "Body";
};
export declare type ClientAuthenticationMethod = (typeof ClientAuthenticationMethod)[keyof typeof ClientAuthenticationMethod];
export declare const Confirmation: {
    /**
     * Send an e-mail to the user confirming they have successfully signed up.
     */
    readonly Signup: "signup";
    /**
     * Send an e-mail inviting the user to sign-up and complete registration.
     */
    readonly Invite: "invite";
};
/**
 * Determines the type of confirmation e-mail that will be sent to the newly created user.
 */
export declare type Confirmation = (typeof Confirmation)[keyof typeof Confirmation];
export declare const ContentFormat: {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    readonly Wadl_xml: "wadl-xml";
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    readonly Wadl_link_json: "wadl-link-json";
    /**
     * The contents are inline and Content Type is a OpenApi 2.0 Document.
     */
    readonly Swagger_json: "swagger-json";
    /**
     * The Open Api 2.0 document is hosted on a publicly accessible internet address.
     */
    readonly Swagger_link_json: "swagger-link-json";
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    readonly Wsdl: "wsdl";
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    readonly Wsdl_link: "wsdl-link";
};
/**
 * Format of the Content in which the API is getting imported.
 */
export declare type ContentFormat = (typeof ContentFormat)[keyof typeof ContentFormat];
export declare const GrantType: {
    /**
     * Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
     */
    readonly AuthorizationCode: "authorizationCode";
    /**
     * Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
     */
    readonly Implicit: "implicit";
    /**
     * Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
     */
    readonly ResourceOwnerPassword: "resourceOwnerPassword";
    /**
     * Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
     */
    readonly ClientCredentials: "clientCredentials";
};
export declare type GrantType = (typeof GrantType)[keyof typeof GrantType];
export declare const GroupType: {
    readonly Custom: "custom";
    readonly System: "system";
    readonly External: "external";
};
/**
 * Group type.
 */
export declare type GroupType = (typeof GroupType)[keyof typeof GroupType];
export declare const HostnameType: {
    readonly Proxy: "Proxy";
    readonly Portal: "Portal";
    readonly Management: "Management";
    readonly Scm: "Scm";
};
/**
 * Hostname type.
 */
export declare type HostnameType = (typeof HostnameType)[keyof typeof HostnameType];
export declare const IdentityProviderType: {
    /**
     * Facebook as Identity provider.
     */
    readonly Facebook: "facebook";
    /**
     * Google as Identity provider.
     */
    readonly Google: "google";
    /**
     * Microsoft Live as Identity provider.
     */
    readonly Microsoft: "microsoft";
    /**
     * Twitter as Identity provider.
     */
    readonly Twitter: "twitter";
    /**
     * Azure Active Directory as Identity provider.
     */
    readonly Aad: "aad";
    /**
     * Azure Active Directory B2C as Identity provider.
     */
    readonly AadB2C: "aadB2C";
};
/**
 * Identity Provider Type identifier.
 */
export declare type IdentityProviderType = (typeof IdentityProviderType)[keyof typeof IdentityProviderType];
export declare const KeyType: {
    readonly Primary: "primary";
    readonly Secondary: "secondary";
};
/**
 * The Key to be used to generate token for user.
 */
export declare type KeyType = (typeof KeyType)[keyof typeof KeyType];
export declare const LoggerType: {
    /**
     * Azure Event Hub as log destination.
     */
    readonly AzureEventHub: "azureEventHub";
    /**
     * Azure Application Insights as log destination.
     */
    readonly ApplicationInsights: "applicationInsights";
};
/**
 * Logger type.
 */
export declare type LoggerType = (typeof LoggerType)[keyof typeof LoggerType];
export declare const PolicyContentFormat: {
    /**
     * The contents are inline and Content type is an XML document.
     */
    readonly Xml: "xml";
    /**
     * The policy XML document is hosted on a http endpoint accessible from the API Management service.
     */
    readonly Xml_link: "xml-link";
    /**
     * The contents are inline and Content type is a non XML encoded policy document.
     */
    readonly Rawxml: "rawxml";
    /**
     * The policy document is not Xml encoded and is hosted on a http endpoint accessible from the API Management service.
     */
    readonly Rawxml_link: "rawxml-link";
};
/**
 * Format of the policyContent.
 */
export declare type PolicyContentFormat = (typeof PolicyContentFormat)[keyof typeof PolicyContentFormat];
export declare const ProductState: {
    readonly NotPublished: "notPublished";
    readonly Published: "published";
};
/**
 * whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
 */
export declare type ProductState = (typeof ProductState)[keyof typeof ProductState];
export declare const Protocol: {
    readonly Http: "http";
    readonly Https: "https";
};
export declare type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const SkuType: {
    /**
     * Developer SKU of Api Management.
     */
    readonly Developer: "Developer";
    /**
     * Standard SKU of Api Management.
     */
    readonly Standard: "Standard";
    /**
     * Premium SKU of Api Management.
     */
    readonly Premium: "Premium";
    /**
     * Basic SKU of Api Management.
     */
    readonly Basic: "Basic";
};
/**
 * Name of the Sku.
 */
export declare type SkuType = (typeof SkuType)[keyof typeof SkuType];
export declare const SoapApiType: {
    /**
     * Imports a SOAP API having a RESTful front end.
     */
    readonly SoapToRest: "http";
    /**
     * Imports the Soap API having a SOAP front end.
     */
    readonly SoapPassThrough: "soap";
};
/**
 * Type of Api to create.
 *  * `http` creates a SOAP to REST API
 *  * `soap` creates a SOAP pass-through API .
 */
export declare type SoapApiType = (typeof SoapApiType)[keyof typeof SoapApiType];
export declare const State: {
    /**
     * The issue is proposed.
     */
    readonly Proposed: "proposed";
    /**
     * The issue is opened.
     */
    readonly Open: "open";
    /**
     * The issue was removed.
     */
    readonly Removed: "removed";
    /**
     * The issue is now resolved.
     */
    readonly Resolved: "resolved";
    /**
     * The issue was closed.
     */
    readonly Closed: "closed";
};
/**
 * Status of the issue.
 */
export declare type State = (typeof State)[keyof typeof State];
export declare const SubscriptionState: {
    readonly Suspended: "suspended";
    readonly Active: "active";
    readonly Expired: "expired";
    readonly Submitted: "submitted";
    readonly Rejected: "rejected";
    readonly Cancelled: "cancelled";
};
/**
 * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 */
export declare type SubscriptionState = (typeof SubscriptionState)[keyof typeof SubscriptionState];
export declare const UserState: {
    /**
     * User state is active.
     */
    readonly Active: "active";
    /**
     * User is blocked. Blocked users cannot authenticate at developer portal or call API.
     */
    readonly Blocked: "blocked";
    /**
     * User account is pending. Requires identity confirmation before it can be made active.
     */
    readonly Pending: "pending";
    /**
     * User account is closed. All identities and related entities are removed.
     */
    readonly Deleted: "deleted";
};
/**
 * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
 */
export declare type UserState = (typeof UserState)[keyof typeof UserState];
export declare const VersioningScheme: {
    /**
     * The API Version is passed in a path segment.
     */
    readonly Segment: "Segment";
    /**
     * The API Version is passed in a query parameter.
     */
    readonly Query: "Query";
    /**
     * The API Version is passed in a HTTP header.
     */
    readonly Header: "Header";
};
/**
 * An value that determines where the API Version identifier will be located in a HTTP request.
 */
export declare type VersioningScheme = (typeof VersioningScheme)[keyof typeof VersioningScheme];
export declare const VirtualNetworkType: {
    /**
     * The service is not part of any Virtual Network.
     */
    readonly None: "None";
    /**
     * The service is part of Virtual Network and it is accessible from Internet.
     */
    readonly External: "External";
    /**
     * The service is part of Virtual Network and it is only accessible from within the virtual network.
     */
    readonly Internal: "Internal";
};
/**
 * The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
 */
export declare type VirtualNetworkType = (typeof VirtualNetworkType)[keyof typeof VirtualNetworkType];
