"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkType = exports.VersioningScheme = exports.UserState = exports.SubscriptionState = exports.State = exports.SkuType = exports.SamplingType = exports.Protocol = exports.ProductState = exports.LoggerType = exports.KeyType = exports.IdentityProviderType = exports.HostnameType = exports.GroupType = exports.GrantType = exports.ContentFormat = exports.Confirmation = exports.ClientAuthenticationMethod = exports.BearerTokenSendingMethod = exports.BackendProtocol = exports.AuthorizationMethod = exports.ApimIdentityType = exports.ApiType = void 0;
exports.ApiType = {
    Http: "http",
    Soap: "soap",
};
exports.ApimIdentityType = {
    SystemAssigned: "SystemAssigned",
};
exports.AuthorizationMethod = {
    HEAD: "HEAD",
    OPTIONS: "OPTIONS",
    TRACE: "TRACE",
    GET: "GET",
    POST: "POST",
    PUT: "PUT",
    PATCH: "PATCH",
    DELETE: "DELETE",
};
exports.BackendProtocol = {
    /**
     * The Backend is a RESTful service.
     */
    Http: "http",
    /**
     * The Backend is a SOAP service.
     */
    Soap: "soap",
};
exports.BearerTokenSendingMethod = {
    AuthorizationHeader: "authorizationHeader",
    Query: "query",
};
exports.ClientAuthenticationMethod = {
    /**
     * Basic Client Authentication method.
     */
    Basic: "Basic",
    /**
     * Body based Authentication method.
     */
    Body: "Body",
};
exports.Confirmation = {
    /**
     * Send an e-mail to the user confirming they have successfully signed up.
     */
    Signup: "signup",
    /**
     * Send an e-mail inviting the user to sign-up and complete registration.
     */
    Invite: "invite",
};
exports.ContentFormat = {
    /**
     * The contents are inline and Content type is a WADL document.
     */
    Wadl_xml: "wadl-xml",
    /**
     * The WADL document is hosted on a publicly accessible internet address.
     */
    Wadl_link_json: "wadl-link-json",
    /**
     * The contents are inline and Content Type is a OpenApi 2.0 Document.
     */
    Swagger_json: "swagger-json",
    /**
     * The Open Api 2.0 document is hosted on a publicly accessible internet address.
     */
    Swagger_link_json: "swagger-link-json",
    /**
     * The contents are inline and the document is a WSDL/Soap document.
     */
    Wsdl: "wsdl",
    /**
     * The WSDL document is hosted on a publicly accessible internet address.
     */
    Wsdl_link: "wsdl-link",
};
exports.GrantType = {
    /**
     * Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
     */
    AuthorizationCode: "authorizationCode",
    /**
     * Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
     */
    Implicit: "implicit",
    /**
     * Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
     */
    ResourceOwnerPassword: "resourceOwnerPassword",
    /**
     * Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
     */
    ClientCredentials: "clientCredentials",
};
exports.GroupType = {
    Custom: "custom",
    System: "system",
    External: "external",
};
exports.HostnameType = {
    Proxy: "Proxy",
    Portal: "Portal",
    Management: "Management",
    Scm: "Scm",
};
exports.IdentityProviderType = {
    /**
     * Facebook as Identity provider.
     */
    Facebook: "facebook",
    /**
     * Google as Identity provider.
     */
    Google: "google",
    /**
     * Microsoft Live as Identity provider.
     */
    Microsoft: "microsoft",
    /**
     * Twitter as Identity provider.
     */
    Twitter: "twitter",
    /**
     * Azure Active Directory as Identity provider.
     */
    Aad: "aad",
    /**
     * Azure Active Directory B2C as Identity provider.
     */
    AadB2C: "aadB2C",
};
exports.KeyType = {
    Primary: "primary",
    Secondary: "secondary",
};
exports.LoggerType = {
    /**
     * Azure Event Hub as log destination.
     */
    AzureEventHub: "azureEventHub",
    /**
     * Azure Application Insights as log destination.
     */
    ApplicationInsights: "applicationInsights",
};
exports.ProductState = {
    NotPublished: "notPublished",
    Published: "published",
};
exports.Protocol = {
    Http: "http",
    Https: "https",
};
exports.SamplingType = {
    /**
     * Fixed-rate sampling.
     */
    Fixed: "fixed",
    /**
     * Sampling with a dynamically adjustable rate.
     */
    Adaptive: "adaptive",
};
exports.SkuType = {
    /**
     * Developer SKU of Api Management.
     */
    Developer: "Developer",
    /**
     * Standard SKU of Api Management.
     */
    Standard: "Standard",
    /**
     * Premium SKU of Api Management.
     */
    Premium: "Premium",
    /**
     * Basic SKU of Api Management.
     */
    Basic: "Basic",
};
exports.State = {
    /**
     * The issue is proposed.
     */
    Proposed: "proposed",
    /**
     * The issue is opened.
     */
    Open: "open",
    /**
     * The issue was removed.
     */
    Removed: "removed",
    /**
     * The issue is now resolved.
     */
    Resolved: "resolved",
    /**
     * The issue was closed.
     */
    Closed: "closed",
};
exports.SubscriptionState = {
    Suspended: "suspended",
    Active: "active",
    Expired: "expired",
    Submitted: "submitted",
    Rejected: "rejected",
    Cancelled: "cancelled",
};
exports.UserState = {
    /**
     * User state is active.
     */
    Active: "active",
    /**
     * User is blocked. Blocked users cannot authenticate at developer portal or call API.
     */
    Blocked: "blocked",
    /**
     * User account is pending. Requires identity confirmation before it can be made active.
     */
    Pending: "pending",
    /**
     * User account is closed. All identities and related entities are removed.
     */
    Deleted: "deleted",
};
exports.VersioningScheme = {
    /**
     * The API Version is passed in a path segment.
     */
    Segment: "Segment",
    /**
     * The API Version is passed in a query parameter.
     */
    Query: "Query",
    /**
     * The API Version is passed in a HTTP header.
     */
    Header: "Header",
};
exports.VirtualNetworkType = {
    /**
     * The service is not part of any Virtual Network.
     */
    None: "None",
    /**
     * The service is part of Virtual Network and it is accessible from Internet.
     */
    External: "External",
    /**
     * The service is part of Virtual Network and it is only accessible from within the virtual network.
     */
    Internal: "Internal",
};
//# sourceMappingURL=index.js.map