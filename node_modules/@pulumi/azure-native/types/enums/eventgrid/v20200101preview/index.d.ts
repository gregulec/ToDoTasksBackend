export declare const AdvancedFilterOperatorType: {
    readonly NumberIn: "NumberIn";
    readonly NumberNotIn: "NumberNotIn";
    readonly NumberLessThan: "NumberLessThan";
    readonly NumberGreaterThan: "NumberGreaterThan";
    readonly NumberLessThanOrEquals: "NumberLessThanOrEquals";
    readonly NumberGreaterThanOrEquals: "NumberGreaterThanOrEquals";
    readonly BoolEquals: "BoolEquals";
    readonly StringIn: "StringIn";
    readonly StringNotIn: "StringNotIn";
    readonly StringBeginsWith: "StringBeginsWith";
    readonly StringEndsWith: "StringEndsWith";
    readonly StringContains: "StringContains";
};
/**
 * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
 */
export declare type AdvancedFilterOperatorType = (typeof AdvancedFilterOperatorType)[keyof typeof AdvancedFilterOperatorType];
export declare const DeadLetterEndPointType: {
    readonly StorageBlob: "StorageBlob";
};
/**
 * Type of the endpoint for the dead letter destination
 */
export declare type DeadLetterEndPointType = (typeof DeadLetterEndPointType)[keyof typeof DeadLetterEndPointType];
export declare const EndpointType: {
    readonly WebHook: "WebHook";
    readonly EventHub: "EventHub";
    readonly StorageQueue: "StorageQueue";
    readonly HybridConnection: "HybridConnection";
    readonly ServiceBusQueue: "ServiceBusQueue";
    readonly ServiceBusTopic: "ServiceBusTopic";
    readonly AzureFunction: "AzureFunction";
};
/**
 * Type of the endpoint for the event subscription destination
 */
export declare type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const EventDeliverySchema: {
    readonly EventGridSchema: "EventGridSchema";
    readonly CustomInputSchema: "CustomInputSchema";
    readonly CloudEventSchemaV1_0: "CloudEventSchemaV1_0";
};
/**
 * The event delivery schema for the event subscription.
 */
export declare type EventDeliverySchema = (typeof EventDeliverySchema)[keyof typeof EventDeliverySchema];
export declare const InputSchema: {
    readonly EventGridSchema: "EventGridSchema";
    readonly CustomEventSchema: "CustomEventSchema";
    readonly CloudEventSchemaV1_0: "CloudEventSchemaV1_0";
};
/**
 * This determines the format that Event Grid should expect for incoming events published to the topic.
 */
export declare type InputSchema = (typeof InputSchema)[keyof typeof InputSchema];
export declare const InputSchemaMappingType: {
    readonly Json: "Json";
};
/**
 * Type of the custom mapping
 */
export declare type InputSchemaMappingType = (typeof InputSchemaMappingType)[keyof typeof InputSchemaMappingType];
