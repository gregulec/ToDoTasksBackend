export declare const AccountType: {
    readonly GeneralPurposeStorage: "GeneralPurposeStorage";
    readonly BlobStorage: "BlobStorage";
};
/**
 * Type of storage accessed on the storage account.
 */
export declare type AccountType = (typeof AccountType)[keyof typeof AccountType];
export declare const AzureContainerDataFormat: {
    readonly BlockBlob: "BlockBlob";
    readonly PageBlob: "PageBlob";
    readonly AzureFile: "AzureFile";
};
/**
 * Storage format used for the file represented by the share.
 */
export declare type AzureContainerDataFormat = (typeof AzureContainerDataFormat)[keyof typeof AzureContainerDataFormat];
export declare const ClientPermissionType: {
    readonly NoAccess: "NoAccess";
    readonly ReadOnly: "ReadOnly";
    readonly ReadWrite: "ReadWrite";
};
/**
 * Type of access to be allowed for the client.
 */
export declare type ClientPermissionType = (typeof ClientPermissionType)[keyof typeof ClientPermissionType];
export declare const DataBoxEdgeDeviceStatus: {
    readonly ReadyToSetup: "ReadyToSetup";
    readonly Online: "Online";
    readonly Offline: "Offline";
    readonly NeedsAttention: "NeedsAttention";
    readonly Disconnected: "Disconnected";
    readonly PartiallyDisconnected: "PartiallyDisconnected";
    readonly Maintenance: "Maintenance";
};
/**
 * The status of the Data Box Edge/Gateway device.
 */
export declare type DataBoxEdgeDeviceStatus = (typeof DataBoxEdgeDeviceStatus)[keyof typeof DataBoxEdgeDeviceStatus];
export declare const DataPolicy: {
    readonly Cloud: "Cloud";
    readonly Local: "Local";
};
/**
 * Data policy of the share.
 */
export declare type DataPolicy = (typeof DataPolicy)[keyof typeof DataPolicy];
export declare const DayOfWeek: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
export declare type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const EncryptionAlgorithm: {
    readonly None: "None";
    readonly AES256: "AES256";
    readonly RSAES_PKCS1_v_1_5: "RSAES_PKCS1_v_1_5";
};
/**
 * The algorithm used to encrypt "Value".
 */
export declare type EncryptionAlgorithm = (typeof EncryptionAlgorithm)[keyof typeof EncryptionAlgorithm];
export declare const MonitoringStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Current monitoring status of the share.
 */
export declare type MonitoringStatus = (typeof MonitoringStatus)[keyof typeof MonitoringStatus];
export declare const OrderState: {
    readonly Untracked: "Untracked";
    readonly AwaitingFulfilment: "AwaitingFulfilment";
    readonly AwaitingPreparation: "AwaitingPreparation";
    readonly AwaitingShipment: "AwaitingShipment";
    readonly Shipped: "Shipped";
    readonly Arriving: "Arriving";
    readonly Delivered: "Delivered";
    readonly ReplacementRequested: "ReplacementRequested";
    readonly LostDevice: "LostDevice";
    readonly Declined: "Declined";
    readonly ReturnInitiated: "ReturnInitiated";
    readonly AwaitingReturnShipment: "AwaitingReturnShipment";
    readonly ShippedBack: "ShippedBack";
    readonly CollectedAtMicrosoft: "CollectedAtMicrosoft";
};
/**
 * Status of the order as per the allowed status types.
 */
export declare type OrderState = (typeof OrderState)[keyof typeof OrderState];
export declare const PlatformType: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * Host OS supported by the IoT role.
 */
export declare type PlatformType = (typeof PlatformType)[keyof typeof PlatformType];
export declare const RoleStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Role status.
 */
export declare type RoleStatus = (typeof RoleStatus)[keyof typeof RoleStatus];
export declare const RoleTypes: {
    readonly IOT: "IOT";
    readonly ASA: "ASA";
    readonly Functions: "Functions";
    readonly Cognitive: "Cognitive";
};
/**
 * Role type.
 */
export declare type RoleTypes = (typeof RoleTypes)[keyof typeof RoleTypes];
export declare const SSLStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Signifies whether SSL needs to be enabled or not.
 */
export declare type SSLStatus = (typeof SSLStatus)[keyof typeof SSLStatus];
export declare const ShareAccessProtocol: {
    readonly SMB: "SMB";
    readonly NFS: "NFS";
};
/**
 * Access protocol to be used by the share.
 */
export declare type ShareAccessProtocol = (typeof ShareAccessProtocol)[keyof typeof ShareAccessProtocol];
export declare const ShareAccessType: {
    readonly Change: "Change";
    readonly Read: "Read";
    readonly Custom: "Custom";
};
/**
 * Type of access to be allowed on the share for this user.
 */
export declare type ShareAccessType = (typeof ShareAccessType)[keyof typeof ShareAccessType];
export declare const ShareStatus: {
    readonly Offline: "Offline";
    readonly Unknown: "Unknown";
    readonly OK: "OK";
    readonly Updating: "Updating";
    readonly NeedsAttention: "NeedsAttention";
};
/**
 * Current status of the share.
 */
export declare type ShareStatus = (typeof ShareStatus)[keyof typeof ShareStatus];
export declare const SkuName: {
    readonly Gateway: "Gateway";
    readonly Edge: "Edge";
};
/**
 * SKU name.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SkuTier: {
    readonly Standard: "Standard";
};
/**
 * The SKU tier. This is based on the SKU name.
 */
export declare type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const TriggerEventType: {
    readonly FileEvent: "FileEvent";
    readonly PeriodicTimerEvent: "PeriodicTimerEvent";
};
/**
 * Trigger Kind.
 */
export declare type TriggerEventType = (typeof TriggerEventType)[keyof typeof TriggerEventType];
