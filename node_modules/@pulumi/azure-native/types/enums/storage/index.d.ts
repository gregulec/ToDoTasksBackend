import * as v20150501preview from "./v20150501preview";
import * as v20150615 from "./v20150615";
import * as v20160101 from "./v20160101";
import * as v20160501 from "./v20160501";
import * as v20161201 from "./v20161201";
import * as v20170601 from "./v20170601";
import * as v20171001 from "./v20171001";
import * as v20180201 from "./v20180201";
import * as v20180301preview from "./v20180301preview";
import * as v20180701 from "./v20180701";
import * as v20181101 from "./v20181101";
import * as v20190401 from "./v20190401";
import * as v20190601 from "./v20190601";
import * as v20200801preview from "./v20200801preview";
import * as v20210101 from "./v20210101";
import * as v20210201 from "./v20210201";
import * as v20210401 from "./v20210401";
export { v20150501preview, v20150615, v20160101, v20160501, v20161201, v20170601, v20171001, v20180201, v20180301preview, v20180701, v20181101, v20190401, v20190601, v20200801preview, v20210101, v20210201, v20210401, };
export declare const AccessTier: {
    readonly Hot: "Hot";
    readonly Cool: "Cool";
};
/**
 * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
 */
export declare type AccessTier = (typeof AccessTier)[keyof typeof AccessTier];
export declare const Action: {
    readonly Allow: "Allow";
};
/**
 * The action of virtual network rule.
 */
export declare type Action = (typeof Action)[keyof typeof Action];
export declare const BlobAccessTier: {
    /**
     * Optimized for storing data that is accessed frequently.
     */
    readonly Hot: "Hot";
    /**
     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
     */
    readonly Cool: "Cool";
    /**
     * Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
     */
    readonly Archive: "Archive";
};
/**
 * The access tier of a storage blob.
 */
export declare type BlobAccessTier = (typeof BlobAccessTier)[keyof typeof BlobAccessTier];
export declare const BlobType: {
    /**
     * Block blobs store text and binary data. Block blobs are made up of blocks of data that can be managed individually.
     */
    readonly Block: "Block";
    /**
     * Append blobs are made up of blocks like block blobs, but are optimized for append operations.
     */
    readonly Append: "Append";
};
/**
 * The type of a storage blob to be created.
 */
export declare type BlobType = (typeof BlobType)[keyof typeof BlobType];
export declare const Bypass: {
    readonly None: "None";
    readonly Logging: "Logging";
    readonly Metrics: "Metrics";
    readonly AzureServices: "AzureServices";
};
/**
 * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
 */
export declare type Bypass = (typeof Bypass)[keyof typeof Bypass];
export declare const DefaultAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * Specifies the default action of allow or deny when no other rules match.
 */
export declare type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const DirectoryServiceOptions: {
    readonly None: "None";
    readonly AADDS: "AADDS";
    readonly AD: "AD";
};
/**
 * Indicates the directory service used.
 */
export declare type DirectoryServiceOptions = (typeof DirectoryServiceOptions)[keyof typeof DirectoryServiceOptions];
export declare const EnabledProtocols: {
    readonly SMB: "SMB";
    readonly NFS: "NFS";
};
/**
 * The authentication protocol that is used for the file share. Can only be specified when creating a share.
 */
export declare type EnabledProtocols = (typeof EnabledProtocols)[keyof typeof EnabledProtocols];
export declare const EncryptionScopeSource: {
    readonly Microsoft_Storage: "Microsoft.Storage";
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
 */
export declare type EncryptionScopeSource = (typeof EncryptionScopeSource)[keyof typeof EncryptionScopeSource];
export declare const EncryptionScopeState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
 */
export declare type EncryptionScopeState = (typeof EncryptionScopeState)[keyof typeof EncryptionScopeState];
export declare const ExpirationAction: {
    readonly Log: "Log";
};
/**
 * The SAS expiration action. Can only be Log.
 */
export declare type ExpirationAction = (typeof ExpirationAction)[keyof typeof ExpirationAction];
export declare const ExtendedLocationTypes: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The type of the extended location.
 */
export declare type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const HttpProtocol: {
    readonly Https_http: "https,http";
    readonly Https: "https";
};
/**
 * The protocol permitted for a request made with the account SAS.
 */
export declare type HttpProtocol = (typeof HttpProtocol)[keyof typeof HttpProtocol];
export declare const IdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned";
};
/**
 * The identity type.
 */
export declare type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const InventoryRuleType: {
    readonly Inventory: "Inventory";
};
/**
 * The valid value is Inventory
 */
export declare type InventoryRuleType = (typeof InventoryRuleType)[keyof typeof InventoryRuleType];
export declare const KeySource: {
    readonly Microsoft_Storage: "Microsoft.Storage";
    readonly Microsoft_Keyvault: "Microsoft.Keyvault";
};
/**
 * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
 */
export declare type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const KeyType: {
    readonly Service: "Service";
    readonly Account: "Account";
};
/**
 * Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
 */
export declare type KeyType = (typeof KeyType)[keyof typeof KeyType];
export declare const Kind: {
    readonly Storage: "Storage";
    readonly StorageV2: "StorageV2";
    readonly BlobStorage: "BlobStorage";
    readonly FileStorage: "FileStorage";
    readonly BlockBlobStorage: "BlockBlobStorage";
};
/**
 * Required. Indicates the type of storage account.
 */
export declare type Kind = (typeof Kind)[keyof typeof Kind];
export declare const LargeFileSharesState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
 */
export declare type LargeFileSharesState = (typeof LargeFileSharesState)[keyof typeof LargeFileSharesState];
export declare const MinimumTlsVersion: {
    readonly TLS1_0: "TLS1_0";
    readonly TLS1_1: "TLS1_1";
    readonly TLS1_2: "TLS1_2";
};
/**
 * Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
 */
export declare type MinimumTlsVersion = (typeof MinimumTlsVersion)[keyof typeof MinimumTlsVersion];
export declare const Name: {
    readonly AccessTimeTracking: "AccessTimeTracking";
};
/**
 * Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
 */
export declare type Name = (typeof Name)[keyof typeof Name];
export declare const Permissions: {
    readonly R: "r";
    readonly D: "d";
    readonly W: "w";
    readonly L: "l";
    readonly A: "a";
    readonly C: "c";
    readonly U: "u";
    readonly P: "p";
};
/**
 * The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
 */
export declare type Permissions = (typeof Permissions)[keyof typeof Permissions];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicAccess: {
    readonly Container: "Container";
    readonly Blob: "Blob";
    readonly None: "None";
};
/**
 * Specifies whether data in the container may be accessed publicly and the level of access.
 */
export declare type PublicAccess = (typeof PublicAccess)[keyof typeof PublicAccess];
export declare const RootSquashType: {
    readonly NoRootSquash: "NoRootSquash";
    readonly RootSquash: "RootSquash";
    readonly AllSquash: "AllSquash";
};
/**
 * The property is for NFS share only. The default is NoRootSquash.
 */
export declare type RootSquashType = (typeof RootSquashType)[keyof typeof RootSquashType];
export declare const RoutingChoice: {
    readonly MicrosoftRouting: "MicrosoftRouting";
    readonly InternetRouting: "InternetRouting";
};
/**
 * Routing Choice defines the kind of network routing opted by the user.
 */
export declare type RoutingChoice = (typeof RoutingChoice)[keyof typeof RoutingChoice];
export declare const RuleType: {
    readonly Lifecycle: "Lifecycle";
};
/**
 * The valid value is Lifecycle
 */
export declare type RuleType = (typeof RuleType)[keyof typeof RuleType];
export declare const Services: {
    readonly B: "b";
    readonly Q: "q";
    readonly T: "t";
    readonly F: "f";
};
/**
 * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
 */
export declare type Services = (typeof Services)[keyof typeof Services];
export declare const ShareAccessTier: {
    readonly TransactionOptimized: "TransactionOptimized";
    readonly Hot: "Hot";
    readonly Cool: "Cool";
    readonly Premium: "Premium";
};
/**
 * Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
 */
export declare type ShareAccessTier = (typeof ShareAccessTier)[keyof typeof ShareAccessTier];
export declare const SignedResource: {
    readonly B: "b";
    readonly C: "c";
    readonly F: "f";
    readonly S: "s";
};
/**
 * The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
 */
export declare type SignedResource = (typeof SignedResource)[keyof typeof SignedResource];
export declare const SignedResourceTypes: {
    readonly S: "s";
    readonly C: "c";
    readonly O: "o";
};
/**
 * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
 */
export declare type SignedResourceTypes = (typeof SignedResourceTypes)[keyof typeof SignedResourceTypes];
export declare const SkuName: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Standard_GRS: "Standard_GRS";
    readonly Standard_RAGRS: "Standard_RAGRS";
    readonly Standard_ZRS: "Standard_ZRS";
    readonly Premium_LRS: "Premium_LRS";
    readonly Premium_ZRS: "Premium_ZRS";
    readonly Standard_GZRS: "Standard_GZRS";
    readonly Standard_RAGZRS: "Standard_RAGZRS";
};
/**
 * The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const State: {
    readonly Provisioning: "provisioning";
    readonly Deprovisioning: "deprovisioning";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly NetworkSourceDeleted: "networkSourceDeleted";
};
/**
 * Gets the state of virtual network rule.
 */
export declare type State = (typeof State)[keyof typeof State];
