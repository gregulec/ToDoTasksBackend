export declare const AccessTier: {
    readonly Hot: "Hot";
    readonly Cool: "Cool";
};
/**
 * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
 */
export declare type AccessTier = (typeof AccessTier)[keyof typeof AccessTier];
export declare const Action: {
    readonly Allow: "Allow";
};
/**
 * The action of virtual network rule.
 */
export declare type Action = (typeof Action)[keyof typeof Action];
export declare const Bypass: {
    readonly None: "None";
    readonly Logging: "Logging";
    readonly Metrics: "Metrics";
    readonly AzureServices: "AzureServices";
};
/**
 * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
 */
export declare type Bypass = (typeof Bypass)[keyof typeof Bypass];
export declare const DefaultAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * Specifies the default action of allow or deny when no other rules match.
 */
export declare type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const HttpProtocol: {
    readonly Https_http: "https,http";
    readonly Https: "https";
};
/**
 * The protocol permitted for a request made with the account SAS.
 */
export declare type HttpProtocol = (typeof HttpProtocol)[keyof typeof HttpProtocol];
export declare const IdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export declare type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const KeySource: {
    readonly Microsoft_Storage: "Microsoft.Storage";
    readonly Microsoft_Keyvault: "Microsoft.Keyvault";
};
/**
 * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
 */
export declare type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const Kind: {
    readonly Storage: "Storage";
    readonly StorageV2: "StorageV2";
    readonly BlobStorage: "BlobStorage";
};
/**
 * Required. Indicates the type of storage account.
 */
export declare type Kind = (typeof Kind)[keyof typeof Kind];
export declare const Permissions: {
    readonly R: "r";
    readonly D: "d";
    readonly W: "w";
    readonly L: "l";
    readonly A: "a";
    readonly C: "c";
    readonly U: "u";
    readonly P: "p";
};
/**
 * The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
 */
export declare type Permissions = (typeof Permissions)[keyof typeof Permissions];
export declare const ReasonCode: {
    readonly QuotaId: "QuotaId";
    readonly NotAvailableForSubscription: "NotAvailableForSubscription";
};
/**
 * The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
 */
export declare type ReasonCode = (typeof ReasonCode)[keyof typeof ReasonCode];
export declare const Services: {
    readonly B: "b";
    readonly Q: "q";
    readonly T: "t";
    readonly F: "f";
};
/**
 * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
 */
export declare type Services = (typeof Services)[keyof typeof Services];
export declare const SignedResource: {
    readonly B: "b";
    readonly C: "c";
    readonly F: "f";
    readonly S: "s";
};
/**
 * The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
 */
export declare type SignedResource = (typeof SignedResource)[keyof typeof SignedResource];
export declare const SignedResourceTypes: {
    readonly S: "s";
    readonly C: "c";
    readonly O: "o";
};
/**
 * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
 */
export declare type SignedResourceTypes = (typeof SignedResourceTypes)[keyof typeof SignedResourceTypes];
export declare const SkuName: {
    readonly Standard_LRS: "Standard_LRS";
    readonly Standard_GRS: "Standard_GRS";
    readonly Standard_RAGRS: "Standard_RAGRS";
    readonly Standard_ZRS: "Standard_ZRS";
    readonly Premium_LRS: "Premium_LRS";
};
/**
 * Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const State: {
    readonly Provisioning: "provisioning";
    readonly Deprovisioning: "deprovisioning";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly NetworkSourceDeleted: "networkSourceDeleted";
};
/**
 * Gets the state of virtual network rule.
 */
export declare type State = (typeof State)[keyof typeof State];
