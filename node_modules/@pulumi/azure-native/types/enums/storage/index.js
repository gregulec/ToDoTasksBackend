"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = exports.SkuName = exports.SignedResourceTypes = exports.SignedResource = exports.ShareAccessTier = exports.Services = exports.RuleType = exports.RoutingChoice = exports.RootSquashType = exports.PublicAccess = exports.PrivateEndpointServiceConnectionStatus = exports.Permissions = exports.Name = exports.MinimumTlsVersion = exports.LargeFileSharesState = exports.Kind = exports.KeyType = exports.KeySource = exports.InventoryRuleType = exports.IdentityType = exports.HttpProtocol = exports.ExtendedLocationTypes = exports.ExpirationAction = exports.EncryptionScopeState = exports.EncryptionScopeSource = exports.EnabledProtocols = exports.DirectoryServiceOptions = exports.DefaultAction = exports.Bypass = exports.BlobType = exports.BlobAccessTier = exports.Action = exports.AccessTier = exports.v20210401 = exports.v20210201 = exports.v20210101 = exports.v20200801preview = exports.v20190601 = exports.v20190401 = exports.v20181101 = exports.v20180701 = exports.v20180301preview = exports.v20180201 = exports.v20171001 = exports.v20170601 = exports.v20161201 = exports.v20160501 = exports.v20160101 = exports.v20150615 = exports.v20150501preview = void 0;
// Export sub-modules:
const v20150501preview = require("./v20150501preview");
exports.v20150501preview = v20150501preview;
const v20150615 = require("./v20150615");
exports.v20150615 = v20150615;
const v20160101 = require("./v20160101");
exports.v20160101 = v20160101;
const v20160501 = require("./v20160501");
exports.v20160501 = v20160501;
const v20161201 = require("./v20161201");
exports.v20161201 = v20161201;
const v20170601 = require("./v20170601");
exports.v20170601 = v20170601;
const v20171001 = require("./v20171001");
exports.v20171001 = v20171001;
const v20180201 = require("./v20180201");
exports.v20180201 = v20180201;
const v20180301preview = require("./v20180301preview");
exports.v20180301preview = v20180301preview;
const v20180701 = require("./v20180701");
exports.v20180701 = v20180701;
const v20181101 = require("./v20181101");
exports.v20181101 = v20181101;
const v20190401 = require("./v20190401");
exports.v20190401 = v20190401;
const v20190601 = require("./v20190601");
exports.v20190601 = v20190601;
const v20200801preview = require("./v20200801preview");
exports.v20200801preview = v20200801preview;
const v20210101 = require("./v20210101");
exports.v20210101 = v20210101;
const v20210201 = require("./v20210201");
exports.v20210201 = v20210201;
const v20210401 = require("./v20210401");
exports.v20210401 = v20210401;
exports.AccessTier = {
    Hot: "Hot",
    Cool: "Cool",
};
exports.Action = {
    Allow: "Allow",
};
exports.BlobAccessTier = {
    /**
     * Optimized for storing data that is accessed frequently.
     */
    Hot: "Hot",
    /**
     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
     */
    Cool: "Cool",
    /**
     * Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
     */
    Archive: "Archive",
};
exports.BlobType = {
    /**
     * Block blobs store text and binary data. Block blobs are made up of blocks of data that can be managed individually.
     */
    Block: "Block",
    /**
     * Append blobs are made up of blocks like block blobs, but are optimized for append operations.
     */
    Append: "Append",
};
exports.Bypass = {
    None: "None",
    Logging: "Logging",
    Metrics: "Metrics",
    AzureServices: "AzureServices",
};
exports.DefaultAction = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.DirectoryServiceOptions = {
    None: "None",
    AADDS: "AADDS",
    AD: "AD",
};
exports.EnabledProtocols = {
    SMB: "SMB",
    NFS: "NFS",
};
exports.EncryptionScopeSource = {
    Microsoft_Storage: "Microsoft.Storage",
    Microsoft_KeyVault: "Microsoft.KeyVault",
};
exports.EncryptionScopeState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ExpirationAction = {
    Log: "Log",
};
exports.ExtendedLocationTypes = {
    EdgeZone: "EdgeZone",
};
exports.HttpProtocol = {
    Https_http: "https,http",
    Https: "https",
};
exports.IdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
};
exports.InventoryRuleType = {
    Inventory: "Inventory",
};
exports.KeySource = {
    Microsoft_Storage: "Microsoft.Storage",
    Microsoft_Keyvault: "Microsoft.Keyvault",
};
exports.KeyType = {
    Service: "Service",
    Account: "Account",
};
exports.Kind = {
    Storage: "Storage",
    StorageV2: "StorageV2",
    BlobStorage: "BlobStorage",
    FileStorage: "FileStorage",
    BlockBlobStorage: "BlockBlobStorage",
};
exports.LargeFileSharesState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.MinimumTlsVersion = {
    TLS1_0: "TLS1_0",
    TLS1_1: "TLS1_1",
    TLS1_2: "TLS1_2",
};
exports.Name = {
    AccessTimeTracking: "AccessTimeTracking",
};
exports.Permissions = {
    R: "r",
    D: "d",
    W: "w",
    L: "l",
    A: "a",
    C: "c",
    U: "u",
    P: "p",
};
exports.PrivateEndpointServiceConnectionStatus = {
    Pending: "Pending",
    Approved: "Approved",
    Rejected: "Rejected",
};
exports.PublicAccess = {
    Container: "Container",
    Blob: "Blob",
    None: "None",
};
exports.RootSquashType = {
    NoRootSquash: "NoRootSquash",
    RootSquash: "RootSquash",
    AllSquash: "AllSquash",
};
exports.RoutingChoice = {
    MicrosoftRouting: "MicrosoftRouting",
    InternetRouting: "InternetRouting",
};
exports.RuleType = {
    Lifecycle: "Lifecycle",
};
exports.Services = {
    B: "b",
    Q: "q",
    T: "t",
    F: "f",
};
exports.ShareAccessTier = {
    TransactionOptimized: "TransactionOptimized",
    Hot: "Hot",
    Cool: "Cool",
    Premium: "Premium",
};
exports.SignedResource = {
    B: "b",
    C: "c",
    F: "f",
    S: "s",
};
exports.SignedResourceTypes = {
    S: "s",
    C: "c",
    O: "o",
};
exports.SkuName = {
    Standard_LRS: "Standard_LRS",
    Standard_GRS: "Standard_GRS",
    Standard_RAGRS: "Standard_RAGRS",
    Standard_ZRS: "Standard_ZRS",
    Premium_LRS: "Premium_LRS",
    Premium_ZRS: "Premium_ZRS",
    Standard_GZRS: "Standard_GZRS",
    Standard_RAGZRS: "Standard_RAGZRS",
};
exports.State = {
    Provisioning: "provisioning",
    Deprovisioning: "deprovisioning",
    Succeeded: "succeeded",
    Failed: "failed",
    NetworkSourceDeleted: "networkSourceDeleted",
};
//# sourceMappingURL=index.js.map