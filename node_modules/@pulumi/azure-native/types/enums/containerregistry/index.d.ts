import * as v20170601preview from "./v20170601preview";
import * as v20171001 from "./v20171001";
import * as v20180201preview from "./v20180201preview";
import * as v20180901 from "./v20180901";
import * as v20190401 from "./v20190401";
import * as v20190501 from "./v20190501";
import * as v20190501preview from "./v20190501preview";
import * as v20190601preview from "./v20190601preview";
import * as v20191201preview from "./v20191201preview";
import * as v20201101preview from "./v20201101preview";
import * as v20210601preview from "./v20210601preview";
export { v20170601preview, v20171001, v20180201preview, v20180901, v20190401, v20190501, v20190501preview, v20190601preview, v20191201preview, v20201101preview, v20210601preview, };
export declare const Action: {
    readonly Allow: "Allow";
};
/**
 * The action of virtual network rule.
 */
export declare type Action = (typeof Action)[keyof typeof Action];
export declare const ActionsRequired: {
    readonly None: "None";
    readonly Recreate: "Recreate";
};
/**
 * A message indicating if changes on the service provider require any updates on the consumer.
 */
export declare type ActionsRequired = (typeof ActionsRequired)[keyof typeof ActionsRequired];
export declare const Architecture: {
    readonly Amd64: "amd64";
    readonly X86: "x86";
    readonly Architecture_386: "386";
    readonly Arm: "arm";
    readonly Arm64: "arm64";
};
/**
 * The OS architecture.
 */
export declare type Architecture = (typeof Architecture)[keyof typeof Architecture];
export declare const AuditLogStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether audit logs are enabled on the connected registry.
 */
export declare type AuditLogStatus = (typeof AuditLogStatus)[keyof typeof AuditLogStatus];
export declare const BaseImageTriggerType: {
    readonly All: "All";
    readonly Runtime: "Runtime";
};
/**
 * The type of the auto trigger for base image dependency updates.
 */
export declare type BaseImageTriggerType = (typeof BaseImageTriggerType)[keyof typeof BaseImageTriggerType];
export declare const ConnectedRegistryMode: {
    readonly Registry: "Registry";
    readonly Mirror: "Mirror";
};
/**
 * The mode of the connected registry resource that indicates the permissions of the registry.
 */
export declare type ConnectedRegistryMode = (typeof ConnectedRegistryMode)[keyof typeof ConnectedRegistryMode];
export declare const ConnectionStatus: {
    readonly Approved: "Approved";
    readonly Pending: "Pending";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * The private link service connection status.
 */
export declare type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare const DefaultAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The default action of allow or deny when no other rules match.
 */
export declare type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const LogLevel: {
    readonly Debug: "Debug";
    readonly Information: "Information";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly None: "None";
};
/**
 * The verbosity of logs persisted on the connected registry.
 */
export declare type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const OS: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * The operating system type required for the run.
 */
export declare type OS = (typeof OS)[keyof typeof OS];
export declare const PipelineOptions: {
    readonly OverwriteTags: "OverwriteTags";
    readonly OverwriteBlobs: "OverwriteBlobs";
    readonly DeleteSourceBlobOnSuccess: "DeleteSourceBlobOnSuccess";
    readonly ContinueOnErrors: "ContinueOnErrors";
};
export declare type PipelineOptions = (typeof PipelineOptions)[keyof typeof PipelineOptions];
export declare const PipelineRunSourceType: {
    readonly AzureStorageBlob: "AzureStorageBlob";
};
/**
 * The type of the source.
 */
export declare type PipelineRunSourceType = (typeof PipelineRunSourceType)[keyof typeof PipelineRunSourceType];
export declare const PipelineRunTargetType: {
    readonly AzureStorageBlob: "AzureStorageBlob";
};
/**
 * The type of the target.
 */
export declare type PipelineRunTargetType = (typeof PipelineRunTargetType)[keyof typeof PipelineRunTargetType];
export declare const PipelineSourceType: {
    readonly AzureStorageBlobContainer: "AzureStorageBlobContainer";
};
/**
 * The type of source for the import pipeline.
 */
export declare type PipelineSourceType = (typeof PipelineSourceType)[keyof typeof PipelineSourceType];
export declare const PolicyStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The value that indicates whether the policy is enabled or not.
 */
export declare type PolicyStatus = (typeof PolicyStatus)[keyof typeof PolicyStatus];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SecretObjectType: {
    readonly Opaque: "Opaque";
    readonly Vaultsecret: "Vaultsecret";
};
/**
 * The type of the secret object which determines how the value of the secret object has to be
 * interpreted.
 */
export declare type SecretObjectType = (typeof SecretObjectType)[keyof typeof SecretObjectType];
export declare const SkuName: {
    readonly Classic: "Classic";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * The SKU name of the container registry. Required for registry creation.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const SourceControlType: {
    readonly Github: "Github";
    readonly VisualStudioTeamService: "VisualStudioTeamService";
};
/**
 * The type of source control service.
 */
export declare type SourceControlType = (typeof SourceControlType)[keyof typeof SourceControlType];
export declare const SourceRegistryLoginMode: {
    readonly None: "None";
    readonly Default: "Default";
};
/**
 * The authentication mode which determines the source registry login scope. The credentials for the source registry
 * will be generated using the given scope. These credentials will be used to login to
 * the source registry during the run.
 */
export declare type SourceRegistryLoginMode = (typeof SourceRegistryLoginMode)[keyof typeof SourceRegistryLoginMode];
export declare const SourceTriggerEvent: {
    readonly Commit: "commit";
    readonly Pullrequest: "pullrequest";
};
export declare type SourceTriggerEvent = (typeof SourceTriggerEvent)[keyof typeof SourceTriggerEvent];
export declare const StepType: {
    readonly Docker: "Docker";
    readonly FileTask: "FileTask";
    readonly EncodedTask: "EncodedTask";
};
/**
 * The type of the step.
 */
export declare type StepType = (typeof StepType)[keyof typeof StepType];
export declare const TaskStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The current status of task.
 */
export declare type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];
export declare const TokenCertificateName: {
    readonly Certificate1: "certificate1";
    readonly Certificate2: "certificate2";
};
export declare type TokenCertificateName = (typeof TokenCertificateName)[keyof typeof TokenCertificateName];
export declare const TokenPasswordName: {
    readonly Password1: "password1";
    readonly Password2: "password2";
};
/**
 * The password name "password1" or "password2"
 */
export declare type TokenPasswordName = (typeof TokenPasswordName)[keyof typeof TokenPasswordName];
export declare const TokenStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The status of the token example enabled or disabled.
 */
export declare type TokenStatus = (typeof TokenStatus)[keyof typeof TokenStatus];
export declare const TokenType: {
    readonly PAT: "PAT";
    readonly OAuth: "OAuth";
};
/**
 * The type of Auth token.
 */
export declare type TokenType = (typeof TokenType)[keyof typeof TokenType];
export declare const TriggerStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The current status of trigger.
 */
export declare type TriggerStatus = (typeof TriggerStatus)[keyof typeof TriggerStatus];
export declare const TrustPolicyType: {
    readonly Notary: "Notary";
};
/**
 * The type of trust policy.
 */
export declare type TrustPolicyType = (typeof TrustPolicyType)[keyof typeof TrustPolicyType];
export declare const UpdateTriggerPayloadType: {
    readonly Default: "Default";
    readonly Token: "Token";
};
/**
 * Type of Payload body for Base image update triggers.
 */
export declare type UpdateTriggerPayloadType = (typeof UpdateTriggerPayloadType)[keyof typeof UpdateTriggerPayloadType];
export declare const Variant: {
    readonly V6: "v6";
    readonly V7: "v7";
    readonly V8: "v8";
};
/**
 * Variant of the CPU.
 */
export declare type Variant = (typeof Variant)[keyof typeof Variant];
export declare const WebhookAction: {
    readonly Push: "push";
    readonly Delete: "delete";
    readonly Quarantine: "quarantine";
    readonly Chart_push: "chart_push";
    readonly Chart_delete: "chart_delete";
};
export declare type WebhookAction = (typeof WebhookAction)[keyof typeof WebhookAction];
export declare const WebhookStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The status of the webhook at the time the operation was called.
 */
export declare type WebhookStatus = (typeof WebhookStatus)[keyof typeof WebhookStatus];
