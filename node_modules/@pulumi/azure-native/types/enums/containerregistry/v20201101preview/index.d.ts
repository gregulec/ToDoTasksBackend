export declare const Action: {
    readonly Allow: "Allow";
};
/**
 * The action of virtual network rule.
 */
export declare type Action = (typeof Action)[keyof typeof Action];
export declare const ActionsRequired: {
    readonly None: "None";
    readonly Recreate: "Recreate";
};
/**
 * A message indicating if changes on the service provider require any updates on the consumer.
 */
export declare type ActionsRequired = (typeof ActionsRequired)[keyof typeof ActionsRequired];
export declare const AuditLogStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether audit logs are enabled on the connected registry.
 */
export declare type AuditLogStatus = (typeof AuditLogStatus)[keyof typeof AuditLogStatus];
export declare const ConnectedRegistryMode: {
    readonly Registry: "Registry";
    readonly Mirror: "Mirror";
};
/**
 * The mode of the connected registry resource that indicates the permissions of the registry.
 */
export declare type ConnectedRegistryMode = (typeof ConnectedRegistryMode)[keyof typeof ConnectedRegistryMode];
export declare const ConnectionStatus: {
    readonly Approved: "Approved";
    readonly Pending: "Pending";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * The private link service connection status.
 */
export declare type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare const DefaultAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The default action of allow or deny when no other rules match.
 */
export declare type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export declare const EncryptionStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Indicates whether or not the encryption is enabled for container registry.
 */
export declare type EncryptionStatus = (typeof EncryptionStatus)[keyof typeof EncryptionStatus];
export declare const LogLevel: {
    readonly Debug: "Debug";
    readonly Information: "Information";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly None: "None";
};
/**
 * The verbosity of logs persisted on the connected registry.
 */
export declare type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const NetworkRuleBypassOptions: {
    readonly AzureServices: "AzureServices";
    readonly None: "None";
};
/**
 * Whether to allow trusted Azure services to access a network restricted registry.
 */
export declare type NetworkRuleBypassOptions = (typeof NetworkRuleBypassOptions)[keyof typeof NetworkRuleBypassOptions];
export declare const PipelineOptions: {
    readonly OverwriteTags: "OverwriteTags";
    readonly OverwriteBlobs: "OverwriteBlobs";
    readonly DeleteSourceBlobOnSuccess: "DeleteSourceBlobOnSuccess";
    readonly ContinueOnErrors: "ContinueOnErrors";
};
export declare type PipelineOptions = (typeof PipelineOptions)[keyof typeof PipelineOptions];
export declare const PipelineRunSourceType: {
    readonly AzureStorageBlob: "AzureStorageBlob";
};
/**
 * The type of the source.
 */
export declare type PipelineRunSourceType = (typeof PipelineRunSourceType)[keyof typeof PipelineRunSourceType];
export declare const PipelineRunTargetType: {
    readonly AzureStorageBlob: "AzureStorageBlob";
};
/**
 * The type of the target.
 */
export declare type PipelineRunTargetType = (typeof PipelineRunTargetType)[keyof typeof PipelineRunTargetType];
export declare const PipelineSourceType: {
    readonly AzureStorageBlobContainer: "AzureStorageBlobContainer";
};
/**
 * The type of source for the import pipeline.
 */
export declare type PipelineSourceType = (typeof PipelineSourceType)[keyof typeof PipelineSourceType];
export declare const PolicyStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The value that indicates whether the policy is enabled or not.
 */
export declare type PolicyStatus = (typeof PolicyStatus)[keyof typeof PolicyStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public network access is allowed for the container registry.
 */
export declare type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * The identity type.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SkuName: {
    readonly Classic: "Classic";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * The SKU name of the container registry. Required for registry creation.
 */
export declare type SkuName = (typeof SkuName)[keyof typeof SkuName];
export declare const TokenCertificateName: {
    readonly Certificate1: "certificate1";
    readonly Certificate2: "certificate2";
};
export declare type TokenCertificateName = (typeof TokenCertificateName)[keyof typeof TokenCertificateName];
export declare const TokenPasswordName: {
    readonly Password1: "password1";
    readonly Password2: "password2";
};
/**
 * The password name "password1" or "password2"
 */
export declare type TokenPasswordName = (typeof TokenPasswordName)[keyof typeof TokenPasswordName];
export declare const TokenStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The status of the token example enabled or disabled.
 */
export declare type TokenStatus = (typeof TokenStatus)[keyof typeof TokenStatus];
export declare const TriggerStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The current status of the source trigger.
 */
export declare type TriggerStatus = (typeof TriggerStatus)[keyof typeof TriggerStatus];
export declare const TrustPolicyType: {
    readonly Notary: "Notary";
};
/**
 * The type of trust policy.
 */
export declare type TrustPolicyType = (typeof TrustPolicyType)[keyof typeof TrustPolicyType];
export declare const WebhookAction: {
    readonly Push: "push";
    readonly Delete: "delete";
    readonly Quarantine: "quarantine";
    readonly Chart_push: "chart_push";
    readonly Chart_delete: "chart_delete";
};
export declare type WebhookAction = (typeof WebhookAction)[keyof typeof WebhookAction];
export declare const WebhookStatus: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * The status of the webhook at the time the operation was called.
 */
export declare type WebhookStatus = (typeof WebhookStatus)[keyof typeof WebhookStatus];
export declare const ZoneRedundancy: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not zone redundancy is enabled for this container registry replication
 */
export declare type ZoneRedundancy = (typeof ZoneRedundancy)[keyof typeof ZoneRedundancy];
