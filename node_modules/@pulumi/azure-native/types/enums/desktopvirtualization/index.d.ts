import * as v20190123preview from "./v20190123preview";
import * as v20190924preview from "./v20190924preview";
import * as v20191210preview from "./v20191210preview";
import * as v20200921preview from "./v20200921preview";
import * as v20201019preview from "./v20201019preview";
import * as v20201102preview from "./v20201102preview";
import * as v20201110preview from "./v20201110preview";
import * as v20210114preview from "./v20210114preview";
import * as v20210201preview from "./v20210201preview";
import * as v20210309preview from "./v20210309preview";
import * as v20210401preview from "./v20210401preview";
import * as v20210513preview from "./v20210513preview";
import * as v20210712 from "./v20210712";
export { v20190123preview, v20190924preview, v20191210preview, v20200921preview, v20201019preview, v20201102preview, v20201110preview, v20210114preview, v20210201preview, v20210309preview, v20210401preview, v20210513preview, v20210712, };
export declare const ApplicationGroupType: {
    readonly RemoteApp: "RemoteApp";
    readonly Desktop: "Desktop";
};
/**
 * Resource Type of ApplicationGroup.
 */
export declare type ApplicationGroupType = (typeof ApplicationGroupType)[keyof typeof ApplicationGroupType];
export declare const CommandLineSetting: {
    readonly DoNotAllow: "DoNotAllow";
    readonly Allow: "Allow";
    readonly Require: "Require";
};
/**
 * Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
 */
export declare type CommandLineSetting = (typeof CommandLineSetting)[keyof typeof CommandLineSetting];
export declare const DomainJoinType: {
    /**
     * Using microsoft active directory.
     */
    readonly ActiveDirectory: "ActiveDirectory";
    /**
     * Using microsoft azure active directory.
     */
    readonly AzureActiveDirectory: "AzureActiveDirectory";
};
/**
 * The type of domain join done by the virtual machine.
 */
export declare type DomainJoinType = (typeof DomainJoinType)[keyof typeof DomainJoinType];
export declare const HostPoolType: {
    /**
     * Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
     */
    readonly Personal: "Personal";
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    readonly Pooled: "Pooled";
    /**
     * Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
     */
    readonly BYODesktop: "BYODesktop";
};
/**
 * HostPool type for desktop.
 */
export declare type HostPoolType = (typeof HostPoolType)[keyof typeof HostPoolType];
export declare const ImageType: {
    /**
     * Using default gallery images offered by Azure Marketplace.
     */
    readonly Gallery: "Gallery";
    /**
     * Using a VHD stored in a storage blob.
     */
    readonly StorageBlob: "StorageBlob";
    /**
     * Using custom image or custom shared image.
     */
    readonly CustomImage: "CustomImage";
};
/**
 * The type of image session hosts use in the hostpool.
 */
export declare type ImageType = (typeof ImageType)[keyof typeof ImageType];
export declare const LoadBalancerType: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
    readonly Persistent: "Persistent";
};
/**
 * The type of the load balancer.
 */
export declare type LoadBalancerType = (typeof LoadBalancerType)[keyof typeof LoadBalancerType];
export declare const Operation: {
    /**
     * Start the migration.
     */
    readonly Start: "Start";
    /**
     * Revoke the migration.
     */
    readonly Revoke: "Revoke";
    /**
     * Complete the migration.
     */
    readonly Complete: "Complete";
    /**
     * Hide the hostpool.
     */
    readonly Hide: "Hide";
    /**
     * Unhide the hostpool.
     */
    readonly Unhide: "Unhide";
};
/**
 * The type of operation for migration.
 */
export declare type Operation = (typeof Operation)[keyof typeof Operation];
export declare const PersonalDesktopAssignmentType: {
    readonly Automatic: "Automatic";
    readonly Direct: "Direct";
};
/**
 * PersonalDesktopAssignment type for HostPool.
 */
export declare type PersonalDesktopAssignmentType = (typeof PersonalDesktopAssignmentType)[keyof typeof PersonalDesktopAssignmentType];
export declare const PreferredAppGroupType: {
    readonly None: "None";
    readonly Desktop: "Desktop";
    readonly RailApplications: "RailApplications";
};
/**
 * The type of preferred application group type, default to Desktop Application Group
 */
export declare type PreferredAppGroupType = (typeof PreferredAppGroupType)[keyof typeof PreferredAppGroupType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const RegistrationTokenOperation: {
    readonly Delete: "Delete";
    readonly None: "None";
    readonly Update: "Update";
};
/**
 * The type of resetting the token.
 */
export declare type RegistrationTokenOperation = (typeof RegistrationTokenOperation)[keyof typeof RegistrationTokenOperation];
export declare const RemoteApplicationType: {
    readonly InBuilt: "InBuilt";
    readonly MsixApplication: "MsixApplication";
};
/**
 * Resource Type of Application.
 */
export declare type RemoteApplicationType = (typeof RemoteApplicationType)[keyof typeof RemoteApplicationType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * The identity type.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const SSOSecretType: {
    readonly SharedKey: "SharedKey";
    readonly Certificate: "Certificate";
    readonly SharedKeyInKeyVault: "SharedKeyInKeyVault";
    readonly CertificateInKeyVault: "CertificateInKeyVault";
};
/**
 * The type of single sign on Secret Type.
 */
export declare type SSOSecretType = (typeof SSOSecretType)[keyof typeof SSOSecretType];
export declare const SessionHostLoadBalancingAlgorithm: {
    readonly BreadthFirst: "BreadthFirst";
    readonly DepthFirst: "DepthFirst";
};
/**
 * Load balancing algorithm for ramp up period.
 */
export declare type SessionHostLoadBalancingAlgorithm = (typeof SessionHostLoadBalancingAlgorithm)[keyof typeof SessionHostLoadBalancingAlgorithm];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export declare type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
export declare const StopHostsWhen: {
    readonly ZeroSessions: "ZeroSessions";
    readonly ZeroActiveSessions: "ZeroActiveSessions";
};
/**
 * Specifies when to stop hosts during ramp down period.
 */
export declare type StopHostsWhen = (typeof StopHostsWhen)[keyof typeof StopHostsWhen];
export declare const VirtualMachineDiskType: {
    /**
     * Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
     */
    readonly Standard_LRS: "Standard_LRS";
    /**
     * Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
     */
    readonly Premium_LRS: "Premium_LRS";
    /**
     * Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
     */
    readonly StandardSSD_LRS: "StandardSSD_LRS";
    /**
     * Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads.
     */
    readonly UltraSSD_LRS: "UltraSSD_LRS";
};
/**
 * The disk type used by virtual machine in hostpool session host.
 */
export declare type VirtualMachineDiskType = (typeof VirtualMachineDiskType)[keyof typeof VirtualMachineDiskType];
