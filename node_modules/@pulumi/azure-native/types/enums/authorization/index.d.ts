import * as v20150101 from "./v20150101";
import * as v20151001preview from "./v20151001preview";
import * as v20160401 from "./v20160401";
import * as v20160901 from "./v20160901";
import * as v20161201 from "./v20161201";
import * as v20170601preview from "./v20170601preview";
import * as v20180301 from "./v20180301";
import * as v20180501 from "./v20180501";
import * as v20180501preview from "./v20180501preview";
import * as v20180901preview from "./v20180901preview";
import * as v20190101 from "./v20190101";
import * as v20190601 from "./v20190601";
import * as v20190901 from "./v20190901";
import * as v20200301 from "./v20200301";
import * as v20200301preview from "./v20200301preview";
import * as v20200401preview from "./v20200401preview";
import * as v20200701preview from "./v20200701preview";
import * as v20200801preview from "./v20200801preview";
import * as v20200901 from "./v20200901";
import * as v20201001preview from "./v20201001preview";
import * as v20210301preview from "./v20210301preview";
import * as v20210601 from "./v20210601";
import * as v20210701preview from "./v20210701preview";
export { v20150101, v20151001preview, v20160401, v20160901, v20161201, v20170601preview, v20180301, v20180501, v20180501preview, v20180901preview, v20190101, v20190601, v20190901, v20200301, v20200301preview, v20200401preview, v20200701preview, v20200801preview, v20200901, v20201001preview, v20210301preview, v20210601, v20210701preview, };
export declare const AccessReviewRecurrencePatternType: {
    readonly Weekly: "weekly";
    readonly AbsoluteMonthly: "absoluteMonthly";
};
/**
 * The recurrence type : weekly, monthly, etc.
 */
export declare type AccessReviewRecurrencePatternType = (typeof AccessReviewRecurrencePatternType)[keyof typeof AccessReviewRecurrencePatternType];
export declare const AccessReviewRecurrenceRangeType: {
    readonly EndDate: "endDate";
    readonly NoEnd: "noEnd";
    readonly Numbered: "numbered";
};
/**
 * The recurrence range type. The possible values are: endDate, noEnd, numbered.
 */
export declare type AccessReviewRecurrenceRangeType = (typeof AccessReviewRecurrenceRangeType)[keyof typeof AccessReviewRecurrenceRangeType];
export declare const DefaultDecisionType: {
    readonly Approve: "Approve";
    readonly Deny: "Deny";
    readonly Recommendation: "Recommendation";
};
/**
 * This specifies the behavior for the autoReview feature when an access review completes.
 */
export declare type DefaultDecisionType = (typeof DefaultDecisionType)[keyof typeof DefaultDecisionType];
export declare const EnforcementMode: {
    /**
     * The policy effect is enforced during resource creation or update.
     */
    readonly Default: "Default";
    /**
     * The policy effect is not enforced during resource creation or update.
     */
    readonly DoNotEnforce: "DoNotEnforce";
};
/**
 * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
 */
export declare type EnforcementMode = (typeof EnforcementMode)[keyof typeof EnforcementMode];
export declare const ExemptionCategory: {
    /**
     * This category of exemptions usually means the scope is not applicable for the policy.
     */
    readonly Waiver: "Waiver";
    /**
     * This category of exemptions usually means the mitigation actions have been applied to the scope.
     */
    readonly Mitigated: "Mitigated";
};
/**
 * The policy exemption category. Possible values are Waiver and Mitigated.
 */
export declare type ExemptionCategory = (typeof ExemptionCategory)[keyof typeof ExemptionCategory];
export declare const LockLevel: {
    readonly NotSpecified: "NotSpecified";
    readonly CanNotDelete: "CanNotDelete";
    readonly ReadOnly: "ReadOnly";
};
/**
 * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
 */
export declare type LockLevel = (typeof LockLevel)[keyof typeof LockLevel];
export declare const ParameterType: {
    readonly String: "String";
    readonly Array: "Array";
    readonly Object: "Object";
    readonly Boolean: "Boolean";
    readonly Integer: "Integer";
    readonly Float: "Float";
    readonly DateTime: "DateTime";
};
/**
 * The data type of the parameter.
 */
export declare type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export declare const PolicyType: {
    readonly NotSpecified: "NotSpecified";
    readonly BuiltIn: "BuiltIn";
    readonly Custom: "Custom";
    readonly Static: "Static";
};
/**
 * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
 */
export declare type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const PrincipalType: {
    readonly User: "User";
    readonly Group: "Group";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly Unknown: "Unknown";
    readonly DirectoryRoleTemplate: "DirectoryRoleTemplate";
    readonly ForeignGroup: "ForeignGroup";
    readonly Application: "Application";
    readonly MSI: "MSI";
    readonly DirectoryObjectOrGroup: "DirectoryObjectOrGroup";
    readonly Everyone: "Everyone";
};
/**
 * The principal type of the assigned principal ID.
 */
export declare type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export declare const ResourceIdentityType: {
    /**
     * Indicates that a system assigned identity is associated with the resource.
     */
    readonly SystemAssigned: "SystemAssigned";
    /**
     * Indicates that no identity is associated with the resource or that the existing identity should be removed.
     */
    readonly None: "None";
};
/**
 * The identity type. This is the only required field when adding a system assigned identity to a resource.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
