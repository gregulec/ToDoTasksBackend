export declare const AccessControlEntryAction: {
    readonly Permit: "Permit";
    readonly Deny: "Deny";
};
/**
 * Action object.
 */
export declare type AccessControlEntryAction = (typeof AccessControlEntryAction)[keyof typeof AccessControlEntryAction];
export declare const AutoHealActionType: {
    readonly Recycle: "Recycle";
    readonly LogEvent: "LogEvent";
    readonly CustomAction: "CustomAction";
};
/**
 * Predefined action to be taken.
 */
export declare type AutoHealActionType = (typeof AutoHealActionType)[keyof typeof AutoHealActionType];
export declare const AzureResourceType: {
    readonly Website: "Website";
    readonly TrafficManager: "TrafficManager";
};
/**
 * Azure resource type.
 */
export declare type AzureResourceType = (typeof AzureResourceType)[keyof typeof AzureResourceType];
export declare const AzureStorageType: {
    readonly AzureFiles: "AzureFiles";
    readonly AzureBlob: "AzureBlob";
};
/**
 * Type of storage.
 */
export declare type AzureStorageType = (typeof AzureStorageType)[keyof typeof AzureStorageType];
export declare const BuiltInAuthenticationProvider: {
    readonly AzureActiveDirectory: "AzureActiveDirectory";
    readonly Facebook: "Facebook";
    readonly Google: "Google";
    readonly MicrosoftAccount: "MicrosoftAccount";
    readonly Twitter: "Twitter";
};
/**
 * The default authentication provider to use when multiple providers are configured.
 * This setting is only needed if multiple providers are configured and the unauthenticated client
 * action is set to "RedirectToLoginPage".
 */
export declare type BuiltInAuthenticationProvider = (typeof BuiltInAuthenticationProvider)[keyof typeof BuiltInAuthenticationProvider];
export declare const ComputeModeOptions: {
    readonly Shared: "Shared";
    readonly Dedicated: "Dedicated";
    readonly Dynamic: "Dynamic";
};
/**
 * Shared or dedicated app hosting.
 */
export declare type ComputeModeOptions = (typeof ComputeModeOptions)[keyof typeof ComputeModeOptions];
export declare const ConnectionStringType: {
    readonly MySql: "MySql";
    readonly SQLServer: "SQLServer";
    readonly SQLAzure: "SQLAzure";
    readonly Custom: "Custom";
    readonly NotificationHub: "NotificationHub";
    readonly ServiceBus: "ServiceBus";
    readonly EventHub: "EventHub";
    readonly ApiHub: "ApiHub";
    readonly DocDb: "DocDb";
    readonly RedisCache: "RedisCache";
    readonly PostgreSQL: "PostgreSQL";
};
/**
 * Type of database.
 */
export declare type ConnectionStringType = (typeof ConnectionStringType)[keyof typeof ConnectionStringType];
export declare const CustomHostNameDnsRecordType: {
    readonly CName: "CName";
    readonly A: "A";
};
/**
 * Custom DNS record type.
 */
export declare type CustomHostNameDnsRecordType = (typeof CustomHostNameDnsRecordType)[keyof typeof CustomHostNameDnsRecordType];
export declare const DatabaseType: {
    readonly SqlAzure: "SqlAzure";
    readonly MySql: "MySql";
    readonly LocalMySql: "LocalMySql";
    readonly PostgreSql: "PostgreSql";
};
/**
 * Database type (e.g. SqlAzure / MySql).
 */
export declare type DatabaseType = (typeof DatabaseType)[keyof typeof DatabaseType];
export declare const FrequencyUnit: {
    readonly Day: "Day";
    readonly Hour: "Hour";
};
/**
 * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
 */
export declare type FrequencyUnit = (typeof FrequencyUnit)[keyof typeof FrequencyUnit];
export declare const FtpsState: {
    readonly AllAllowed: "AllAllowed";
    readonly FtpsOnly: "FtpsOnly";
    readonly Disabled: "Disabled";
};
/**
 * State of FTP / FTPS service
 */
export declare type FtpsState = (typeof FtpsState)[keyof typeof FtpsState];
export declare const HostNameType: {
    readonly Verified: "Verified";
    readonly Managed: "Managed";
};
/**
 * Hostname type.
 */
export declare type HostNameType = (typeof HostNameType)[keyof typeof HostNameType];
export declare const HostType: {
    readonly Standard: "Standard";
    readonly Repository: "Repository";
};
/**
 * Indicates whether the hostname is a standard or repository hostname.
 */
export declare type HostType = (typeof HostType)[keyof typeof HostType];
export declare const InternalLoadBalancingMode: {
    readonly None: "None";
    readonly Web: "Web";
    readonly Publishing: "Publishing";
};
/**
 * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
 */
export declare type InternalLoadBalancingMode = (typeof InternalLoadBalancingMode)[keyof typeof InternalLoadBalancingMode];
export declare const IpFilterTag: {
    readonly Default: "Default";
    readonly XffProxy: "XffProxy";
};
/**
 * Defines what this IP filter will be used for. This is to support IP filtering on proxies.
 */
export declare type IpFilterTag = (typeof IpFilterTag)[keyof typeof IpFilterTag];
export declare const LogLevel: {
    readonly Off: "Off";
    readonly Verbose: "Verbose";
    readonly Information: "Information";
    readonly Warning: "Warning";
    readonly Error: "Error";
};
/**
 * Log level.
 */
export declare type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const ManagedPipelineMode: {
    readonly Integrated: "Integrated";
    readonly Classic: "Classic";
};
/**
 * Managed pipeline mode.
 */
export declare type ManagedPipelineMode = (typeof ManagedPipelineMode)[keyof typeof ManagedPipelineMode];
export declare const ManagedServiceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
    readonly None: "None";
};
/**
 * Type of managed service identity.
 */
export declare type ManagedServiceIdentityType = (typeof ManagedServiceIdentityType)[keyof typeof ManagedServiceIdentityType];
export declare const PublicCertificateLocation: {
    readonly CurrentUserMy: "CurrentUserMy";
    readonly LocalMachineMy: "LocalMachineMy";
    readonly Unknown: "Unknown";
};
/**
 * Public Certificate Location
 */
export declare type PublicCertificateLocation = (typeof PublicCertificateLocation)[keyof typeof PublicCertificateLocation];
export declare const RedundancyMode: {
    readonly None: "None";
    readonly Manual: "Manual";
    readonly Failover: "Failover";
    readonly ActiveActive: "ActiveActive";
    readonly GeoRedundant: "GeoRedundant";
};
/**
 * Site redundancy mode
 */
export declare type RedundancyMode = (typeof RedundancyMode)[keyof typeof RedundancyMode];
export declare const RouteType: {
    readonly DEFAULT: "DEFAULT";
    readonly INHERITED: "INHERITED";
    readonly STATIC: "STATIC";
};
/**
 * The type of route this is:
 * DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
 * INHERITED - Routes inherited from the real Virtual Network routes
 * STATIC - Static route set on the app only
 *
 * These values will be used for syncing an app's routes with those from a Virtual Network.
 */
export declare type RouteType = (typeof RouteType)[keyof typeof RouteType];
export declare const ScmType: {
    readonly None: "None";
    readonly Dropbox: "Dropbox";
    readonly Tfs: "Tfs";
    readonly LocalGit: "LocalGit";
    readonly GitHub: "GitHub";
    readonly CodePlexGit: "CodePlexGit";
    readonly CodePlexHg: "CodePlexHg";
    readonly BitbucketGit: "BitbucketGit";
    readonly BitbucketHg: "BitbucketHg";
    readonly ExternalGit: "ExternalGit";
    readonly ExternalHg: "ExternalHg";
    readonly OneDrive: "OneDrive";
    readonly VSO: "VSO";
    readonly VSTSRM: "VSTSRM";
};
/**
 * SCM type.
 */
export declare type ScmType = (typeof ScmType)[keyof typeof ScmType];
export declare const SiteLoadBalancing: {
    readonly WeightedRoundRobin: "WeightedRoundRobin";
    readonly LeastRequests: "LeastRequests";
    readonly LeastResponseTime: "LeastResponseTime";
    readonly WeightedTotalTraffic: "WeightedTotalTraffic";
    readonly RequestHash: "RequestHash";
};
/**
 * Site load balancing.
 */
export declare type SiteLoadBalancing = (typeof SiteLoadBalancing)[keyof typeof SiteLoadBalancing];
export declare const SslState: {
    readonly Disabled: "Disabled";
    readonly SniEnabled: "SniEnabled";
    readonly IpBasedEnabled: "IpBasedEnabled";
};
/**
 * SSL type.
 */
export declare type SslState = (typeof SslState)[keyof typeof SslState];
export declare const SupportedTlsVersions: {
    readonly SupportedTlsVersions_1_0: "1.0";
    readonly SupportedTlsVersions_1_1: "1.1";
    readonly SupportedTlsVersions_1_2: "1.2";
};
/**
 * MinTlsVersion: configures the minimum version of TLS required for SSL requests
 */
export declare type SupportedTlsVersions = (typeof SupportedTlsVersions)[keyof typeof SupportedTlsVersions];
export declare const UnauthenticatedClientAction: {
    readonly RedirectToLoginPage: "RedirectToLoginPage";
    readonly AllowAnonymous: "AllowAnonymous";
};
/**
 * The action to take when an unauthenticated client attempts to access the app.
 */
export declare type UnauthenticatedClientAction = (typeof UnauthenticatedClientAction)[keyof typeof UnauthenticatedClientAction];
