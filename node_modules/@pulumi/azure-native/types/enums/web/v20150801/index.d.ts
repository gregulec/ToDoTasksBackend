export declare const AccessControlEntryAction: {
    readonly Permit: "Permit";
    readonly Deny: "Deny";
};
export declare type AccessControlEntryAction = (typeof AccessControlEntryAction)[keyof typeof AccessControlEntryAction];
export declare const AutoHealActionType: {
    readonly Recycle: "Recycle";
    readonly LogEvent: "LogEvent";
    readonly CustomAction: "CustomAction";
};
/**
 * ActionType - predefined action to be taken
 */
export declare type AutoHealActionType = (typeof AutoHealActionType)[keyof typeof AutoHealActionType];
export declare const AzureResourceType: {
    readonly Website: "Website";
    readonly TrafficManager: "TrafficManager";
};
/**
 * Azure resource type
 */
export declare type AzureResourceType = (typeof AzureResourceType)[keyof typeof AzureResourceType];
export declare const BackupRestoreOperationType: {
    readonly Default: "Default";
    readonly Clone: "Clone";
    readonly Relocation: "Relocation";
};
/**
 * Type of the backup
 */
export declare type BackupRestoreOperationType = (typeof BackupRestoreOperationType)[keyof typeof BackupRestoreOperationType];
export declare const BuiltInAuthenticationProvider: {
    readonly AzureActiveDirectory: "AzureActiveDirectory";
    readonly Facebook: "Facebook";
    readonly Google: "Google";
    readonly MicrosoftAccount: "MicrosoftAccount";
    readonly Twitter: "Twitter";
};
/**
 * Gets or sets the default authentication provider to use when multiple providers are configured.
 *             This setting is only needed if multiple providers are configured and the unauthenticated client
 *             action is set to "RedirectToLoginPage".
 */
export declare type BuiltInAuthenticationProvider = (typeof BuiltInAuthenticationProvider)[keyof typeof BuiltInAuthenticationProvider];
export declare const ComputeModeOptions: {
    readonly Shared: "Shared";
    readonly Dedicated: "Dedicated";
    readonly Dynamic: "Dynamic";
};
/**
 * Shared or dedicated web app hosting
 */
export declare type ComputeModeOptions = (typeof ComputeModeOptions)[keyof typeof ComputeModeOptions];
export declare const CustomHostNameDnsRecordType: {
    readonly CName: "CName";
    readonly A: "A";
};
/**
 * Custom DNS record type
 */
export declare type CustomHostNameDnsRecordType = (typeof CustomHostNameDnsRecordType)[keyof typeof CustomHostNameDnsRecordType];
export declare const DatabaseServerType: {
    readonly MySql: "MySql";
    readonly SQLServer: "SQLServer";
    readonly SQLAzure: "SQLAzure";
    readonly Custom: "Custom";
};
/**
 * Type of database
 */
export declare type DatabaseServerType = (typeof DatabaseServerType)[keyof typeof DatabaseServerType];
export declare const FrequencyUnit: {
    readonly Day: "Day";
    readonly Hour: "Hour";
};
/**
 * How often should be the backup executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
 */
export declare type FrequencyUnit = (typeof FrequencyUnit)[keyof typeof FrequencyUnit];
export declare const HostNameType: {
    readonly Verified: "Verified";
    readonly Managed: "Managed";
};
/**
 * Host name type
 */
export declare type HostNameType = (typeof HostNameType)[keyof typeof HostNameType];
export declare const HostingEnvironmentStatus: {
    readonly Preparing: "Preparing";
    readonly Ready: "Ready";
    readonly Scaling: "Scaling";
    readonly Deleting: "Deleting";
};
/**
 * Current status of the hostingEnvironment (App Service Environment)
 */
export declare type HostingEnvironmentStatus = (typeof HostingEnvironmentStatus)[keyof typeof HostingEnvironmentStatus];
export declare const InternalLoadBalancingMode: {
    readonly None: "None";
    readonly Web: "Web";
    readonly Publishing: "Publishing";
};
/**
 * Specifies which endpoints to serve internally in the hostingEnvironment's (App Service Environment) VNET
 */
export declare type InternalLoadBalancingMode = (typeof InternalLoadBalancingMode)[keyof typeof InternalLoadBalancingMode];
export declare const LogLevel: {
    readonly Off: "Off";
    readonly Verbose: "Verbose";
    readonly Information: "Information";
    readonly Warning: "Warning";
    readonly Error: "Error";
};
/**
 * Log level
 */
export declare type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const ManagedPipelineMode: {
    readonly Integrated: "Integrated";
    readonly Classic: "Classic";
};
/**
 * Managed pipeline mode
 */
export declare type ManagedPipelineMode = (typeof ManagedPipelineMode)[keyof typeof ManagedPipelineMode];
export declare const ProvisioningState: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly InProgress: "InProgress";
    readonly Deleting: "Deleting";
};
/**
 * Provisioning state of the hostingEnvironment (App Service Environment)
 */
export declare type ProvisioningState = (typeof ProvisioningState)[keyof typeof ProvisioningState];
export declare const SiteLoadBalancing: {
    readonly WeightedRoundRobin: "WeightedRoundRobin";
    readonly LeastRequests: "LeastRequests";
    readonly LeastResponseTime: "LeastResponseTime";
    readonly WeightedTotalTraffic: "WeightedTotalTraffic";
    readonly RequestHash: "RequestHash";
};
/**
 * Site load balancing
 */
export declare type SiteLoadBalancing = (typeof SiteLoadBalancing)[keyof typeof SiteLoadBalancing];
export declare const SslState: {
    readonly Disabled: "Disabled";
    readonly SniEnabled: "SniEnabled";
    readonly IpBasedEnabled: "IpBasedEnabled";
};
/**
 * SSL type
 */
export declare type SslState = (typeof SslState)[keyof typeof SslState];
export declare const UnauthenticatedClientAction: {
    readonly RedirectToLoginPage: "RedirectToLoginPage";
    readonly AllowAnonymous: "AllowAnonymous";
};
/**
 * Gets or sets the action to take when an unauthenticated client attempts to access the app.
 */
export declare type UnauthenticatedClientAction = (typeof UnauthenticatedClientAction)[keyof typeof UnauthenticatedClientAction];
export declare const WorkerSizeOptions: {
    readonly Default: "Default";
    readonly Small: "Small";
    readonly Medium: "Medium";
    readonly Large: "Large";
};
/**
 * Size of the machines
 */
export declare type WorkerSizeOptions = (typeof WorkerSizeOptions)[keyof typeof WorkerSizeOptions];
