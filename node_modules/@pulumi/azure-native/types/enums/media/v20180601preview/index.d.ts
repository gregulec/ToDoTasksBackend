export declare const AacAudioProfile: {
    /**
     * Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC).
     */
    readonly AacLc: "AacLc";
    /**
     * Specifies that the output audio is to be encoded into HE-AAC v1 profile.
     */
    readonly HeAacV1: "HeAacV1";
    /**
     * Specifies that the output audio is to be encoded into HE-AAC v2 profile.
     */
    readonly HeAacV2: "HeAacV2";
};
/**
 * The encoding profile to be used when encoding audio with AAC.
 */
export declare type AacAudioProfile = (typeof AacAudioProfile)[keyof typeof AacAudioProfile];
export declare const AssetContainerPermission: {
    /**
     * The SAS URL will allow read access to the container.
     */
    readonly Read: "Read";
    /**
     * The SAS URL will allow read and write access to the container.
     */
    readonly ReadWrite: "ReadWrite";
    /**
     * The SAS URL will allow read, write and delete access to the container.
     */
    readonly ReadWriteDelete: "ReadWriteDelete";
};
/**
 * The permissions to set on the SAS URL.
 */
export declare type AssetContainerPermission = (typeof AssetContainerPermission)[keyof typeof AssetContainerPermission];
export declare const ContentKeyPolicyFairPlayRentalAndLeaseKeyType: {
    /**
     * Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Key duration is not specified.
     */
    readonly Undefined: "Undefined";
    /**
     * Content key can be persisted with an unlimited duration
     */
    readonly PersistentUnlimited: "PersistentUnlimited";
    /**
     * Content key can be persisted and the valid duration is limited by the Rental Duration value
     */
    readonly PersistentLimited: "PersistentLimited";
};
/**
 * The rental and lease key type.
 */
export declare type ContentKeyPolicyFairPlayRentalAndLeaseKeyType = (typeof ContentKeyPolicyFairPlayRentalAndLeaseKeyType)[keyof typeof ContentKeyPolicyFairPlayRentalAndLeaseKeyType];
export declare const ContentKeyPolicyPlayReadyContentType: {
    /**
     * Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Unspecified content type.
     */
    readonly Unspecified: "Unspecified";
    /**
     * Ultraviolet download content type.
     */
    readonly UltraVioletDownload: "UltraVioletDownload";
    /**
     * Ultraviolet streaming content type.
     */
    readonly UltraVioletStreaming: "UltraVioletStreaming";
};
/**
 * The PlayReady content type.
 */
export declare type ContentKeyPolicyPlayReadyContentType = (typeof ContentKeyPolicyPlayReadyContentType)[keyof typeof ContentKeyPolicyPlayReadyContentType];
export declare const ContentKeyPolicyPlayReadyLicenseType: {
    /**
     * Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Non persistent license.
     */
    readonly NonPersistent: "NonPersistent";
    /**
     * Persistent license. Allows offline playback.
     */
    readonly Persistent: "Persistent";
};
/**
 * The license type.
 */
export declare type ContentKeyPolicyPlayReadyLicenseType = (typeof ContentKeyPolicyPlayReadyLicenseType)[keyof typeof ContentKeyPolicyPlayReadyLicenseType];
export declare const ContentKeyPolicyPlayReadyUnknownOutputPassingOption: {
    /**
     * Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Passing the video portion of protected content to an Unknown Output is not allowed.
     */
    readonly NotAllowed: "NotAllowed";
    /**
     * Passing the video portion of protected content to an Unknown Output is allowed.
     */
    readonly Allowed: "Allowed";
    /**
     * Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
     */
    readonly AllowedWithVideoConstriction: "AllowedWithVideoConstriction";
};
/**
 * Configures Unknown output handling settings of the license.
 */
export declare type ContentKeyPolicyPlayReadyUnknownOutputPassingOption = (typeof ContentKeyPolicyPlayReadyUnknownOutputPassingOption)[keyof typeof ContentKeyPolicyPlayReadyUnknownOutputPassingOption];
export declare const ContentKeyPolicyRestrictionTokenType: {
    /**
     * Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
     */
    readonly Unknown: "Unknown";
    /**
     * Simple Web Token.
     */
    readonly Swt: "Swt";
    /**
     * JSON Web Token.
     */
    readonly Jwt: "Jwt";
};
/**
 * The type of token.
 */
export declare type ContentKeyPolicyRestrictionTokenType = (typeof ContentKeyPolicyRestrictionTokenType)[keyof typeof ContentKeyPolicyRestrictionTokenType];
export declare const DeinterlaceMode: {
    /**
     * Disables de-interlacing of the source video.
     */
    readonly Off: "Off";
    /**
     * Apply automatic pixel adaptive de-interlacing on each frame in the input video.
     */
    readonly AutoPixelAdaptive: "AutoPixelAdaptive";
};
/**
 * The deinterlacing mode. Defaults to AutoPixelAdaptive.
 */
export declare type DeinterlaceMode = (typeof DeinterlaceMode)[keyof typeof DeinterlaceMode];
export declare const DeinterlaceParity: {
    /**
     * Automatically detect the order of fields
     */
    readonly Auto: "Auto";
    /**
     * Apply top field first processing of input video.
     */
    readonly TopFieldFirst: "TopFieldFirst";
    /**
     * Apply bottom field first processing of input video.
     */
    readonly BottomFieldFirst: "BottomFieldFirst";
};
/**
 * The field parity for de-interlacing, defaults to Auto.
 */
export declare type DeinterlaceParity = (typeof DeinterlaceParity)[keyof typeof DeinterlaceParity];
export declare const EncoderNamedPreset: {
    /**
     * Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution and bitrate. The auto-generated preset will never exceed the input resolution and bitrate. For example, if the input is 720p at 3 Mbps, output will remain 720p at best, and will start at rates lower than 3 Mbps. The output will have video and audio in separate MP4 files, which is optimal for adaptive streaming.
     */
    readonly AdaptiveStreaming: "AdaptiveStreaming";
    /**
     * Produces a single MP4 file containing only stereo audio encoded at 192 kbps.
     */
    readonly AACGoodQualityAudio: "AACGoodQualityAudio";
    /**
     * Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 360p.
     */
    readonly H264MultipleBitrate1080p: "H264MultipleBitrate1080p";
    /**
     * Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 360p.
     */
    readonly H264MultipleBitrate720p: "H264MultipleBitrate720p";
    /**
     * Produces a set of 5 GOP-aligned MP4 files, ranging from 1600kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 360p.
     */
    readonly H264MultipleBitrateSD: "H264MultipleBitrateSD";
};
/**
 * The built-in preset to be used for encoding videos.
 */
export declare type EncoderNamedPreset = (typeof EncoderNamedPreset)[keyof typeof EncoderNamedPreset];
export declare const EntropyMode: {
    /**
     * Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding.
     */
    readonly Cabac: "Cabac";
    /**
     * Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
     */
    readonly Cavlc: "Cavlc";
};
/**
 * The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
 */
export declare type EntropyMode = (typeof EntropyMode)[keyof typeof EntropyMode];
export declare const H264Complexity: {
    /**
     * Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
     */
    readonly Speed: "Speed";
    /**
     * Tells the encoder to use settings that achieve a balance between speed and quality.
     */
    readonly Balanced: "Balanced";
    /**
     * Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
     */
    readonly Quality: "Quality";
};
/**
 * Tells the encoder how to choose its encoding settings. The default value is Balanced.
 */
export declare type H264Complexity = (typeof H264Complexity)[keyof typeof H264Complexity];
export declare const H264VideoProfile: {
    /**
     * Tells the encoder to automatically determine the appropriate H.264 profile.
     */
    readonly Auto: "Auto";
    /**
     * Baseline profile
     */
    readonly Baseline: "Baseline";
    /**
     * Main profile
     */
    readonly Main: "Main";
    /**
     * High profile.
     */
    readonly High: "High";
    /**
     * High 4:2:2 profile.
     */
    readonly High422: "High422";
    /**
     * High 4:4:4 predictive profile.
     */
    readonly High444: "High444";
};
/**
 * Which profile of the H.264 standard should be used when encoding this layer. Default is Auto.
 */
export declare type H264VideoProfile = (typeof H264VideoProfile)[keyof typeof H264VideoProfile];
export declare const LiveEventEncodingType: {
    readonly None: "None";
    readonly Basic: "Basic";
};
/**
 * The encoding type for Live Event.
 */
export declare type LiveEventEncodingType = (typeof LiveEventEncodingType)[keyof typeof LiveEventEncodingType];
export declare const LiveEventInputProtocol: {
    readonly FragmentedMP4: "FragmentedMP4";
    readonly RTMP: "RTMP";
};
/**
 * The streaming protocol for the Live Event.
 */
export declare type LiveEventInputProtocol = (typeof LiveEventInputProtocol)[keyof typeof LiveEventInputProtocol];
export declare const OnErrorType: {
    /**
     * Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped.
     */
    readonly StopProcessingJob: "StopProcessingJob";
    /**
     * Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
     */
    readonly ContinueJob: "ContinueJob";
};
/**
 * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The default is stop.
 */
export declare type OnErrorType = (typeof OnErrorType)[keyof typeof OnErrorType];
export declare const Priority: {
    /**
     * Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs.
     */
    readonly Low: "Low";
    /**
     * Used for TransformOutputs that can be generated at Normal priority.
     */
    readonly Normal: "Normal";
    /**
     * Used for TransformOutputs that should take precedence over others.
     */
    readonly High: "High";
};
/**
 * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
 */
export declare type Priority = (typeof Priority)[keyof typeof Priority];
export declare const Rotation: {
    /**
     * Automatically detect and rotate as needed.
     */
    readonly Auto: "Auto";
    /**
     * Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact.
     */
    readonly None: "None";
    /**
     * Do not rotate the video but remove any metadata about the rotation.
     */
    readonly Rotate0: "Rotate0";
    /**
     * Rotate 90 degrees clockwise.
     */
    readonly Rotate90: "Rotate90";
    /**
     * Rotate 180 degrees clockwise.
     */
    readonly Rotate180: "Rotate180";
    /**
     * Rotate 270 degrees clockwise.
     */
    readonly Rotate270: "Rotate270";
};
/**
 * The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
 */
export declare type Rotation = (typeof Rotation)[keyof typeof Rotation];
export declare const StorageAccountType: {
    /**
     * The primary storage account for the Media Services account.
     */
    readonly Primary: "Primary";
    /**
     * A secondary storage account for the Media Services account.
     */
    readonly Secondary: "Secondary";
};
/**
 * The type of the storage account.
 */
export declare type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
export declare const StreamOptionsFlag: {
    readonly Default: "Default";
    readonly LowLatency: "LowLatency";
};
export declare type StreamOptionsFlag = (typeof StreamOptionsFlag)[keyof typeof StreamOptionsFlag];
export declare const StretchMode: {
    /**
     * Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video.
     */
    readonly None: "None";
    /**
     * Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
     */
    readonly AutoSize: "AutoSize";
    /**
     * Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
     */
    readonly AutoFit: "AutoFit";
};
/**
 * The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
 */
export declare type StretchMode = (typeof StretchMode)[keyof typeof StretchMode];
export declare const TrackPropertyCompareOperation: {
    /**
     * Unknown track property compare operation
     */
    readonly Unknown: "Unknown";
    /**
     * Equal operation
     */
    readonly Equal: "Equal";
};
/**
 * Track property condition operation
 */
export declare type TrackPropertyCompareOperation = (typeof TrackPropertyCompareOperation)[keyof typeof TrackPropertyCompareOperation];
export declare const TrackPropertyType: {
    /**
     * Unknown track property
     */
    readonly Unknown: "Unknown";
    /**
     * Track FourCC
     */
    readonly FourCC: "FourCC";
};
/**
 * Track property type
 */
export declare type TrackPropertyType = (typeof TrackPropertyType)[keyof typeof TrackPropertyType];
