"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurrenceFrequency = exports.QueryType = exports.Operator = exports.OperationType = exports.Odatatype = exports.MetricTriggerType = exports.MetricStatisticType = exports.KnownWindowsEventLogDataSourceStreams = exports.KnownSyslogDataSourceStreams = exports.KnownSyslogDataSourceLogLevels = exports.KnownSyslogDataSourceFacilityNames = exports.KnownPublicNetworkAccessOptions = exports.KnownPerfCounterDataSourceStreams = exports.KnownExtensionDataSourceStreams = exports.KnownDataFlowStreams = exports.KnownDataCollectionRuleResourceKind = exports.KnownDataCollectionEndpointResourceKind = exports.Kind = exports.ItemType = exports.ItemScope = exports.IngestionMode = exports.FlowType = exports.FavoriteType = exports.Enabled = exports.DynamicThresholdSensitivity = exports.DynamicThresholdOperator = exports.CriterionType = exports.ConditionalOperator = exports.ConditionOperator = exports.ComparisonOperationType = exports.ApplicationType = exports.AlertSeverity = exports.AggregationTypeEnum = exports.v20210401 = exports.v20210308 = exports.v20210201preview = exports.v20201020 = exports.v20201005preview = exports.v20200501preview = exports.v20200202preview = exports.v20200202 = exports.v20191101preview = exports.v20180617preview = exports.v20180501preview = exports.v20180416 = exports.v20180301 = exports.v20160301 = exports.v20150501 = exports.v20150401 = exports.v20140401 = void 0;
exports.WebTestKind = exports.TimeAggregationType = exports.TimeAggregationOperator = exports.ScaleType = exports.ScaleRuleMetricDimensionOperationType = exports.ScaleDirection = exports.RequestSource = void 0;
// Export sub-modules:
const v20140401 = require("./v20140401");
exports.v20140401 = v20140401;
const v20150401 = require("./v20150401");
exports.v20150401 = v20150401;
const v20150501 = require("./v20150501");
exports.v20150501 = v20150501;
const v20160301 = require("./v20160301");
exports.v20160301 = v20160301;
const v20180301 = require("./v20180301");
exports.v20180301 = v20180301;
const v20180416 = require("./v20180416");
exports.v20180416 = v20180416;
const v20180501preview = require("./v20180501preview");
exports.v20180501preview = v20180501preview;
const v20180617preview = require("./v20180617preview");
exports.v20180617preview = v20180617preview;
const v20191101preview = require("./v20191101preview");
exports.v20191101preview = v20191101preview;
const v20200202 = require("./v20200202");
exports.v20200202 = v20200202;
const v20200202preview = require("./v20200202preview");
exports.v20200202preview = v20200202preview;
const v20200501preview = require("./v20200501preview");
exports.v20200501preview = v20200501preview;
const v20201005preview = require("./v20201005preview");
exports.v20201005preview = v20201005preview;
const v20201020 = require("./v20201020");
exports.v20201020 = v20201020;
const v20210201preview = require("./v20210201preview");
exports.v20210201preview = v20210201preview;
const v20210308 = require("./v20210308");
exports.v20210308 = v20210308;
const v20210401 = require("./v20210401");
exports.v20210401 = v20210401;
exports.AggregationTypeEnum = {
    Average: "Average",
    Count: "Count",
    Minimum: "Minimum",
    Maximum: "Maximum",
    Total: "Total",
};
exports.AlertSeverity = {
    Zero: "0",
    One: "1",
    Two: "2",
    Three: "3",
    Four: "4",
};
exports.ApplicationType = {
    Web: "web",
    Other: "other",
};
exports.ComparisonOperationType = {
    Equals: "Equals",
    NotEquals: "NotEquals",
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
};
exports.ConditionOperator = {
    GreaterThan: "GreaterThan",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    LessThan: "LessThan",
    LessThanOrEqual: "LessThanOrEqual",
};
exports.ConditionalOperator = {
    GreaterThanOrEqual: "GreaterThanOrEqual",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThan: "GreaterThan",
    LessThan: "LessThan",
    Equal: "Equal",
};
exports.CriterionType = {
    StaticThresholdCriterion: "StaticThresholdCriterion",
    DynamicThresholdCriterion: "DynamicThresholdCriterion",
};
exports.DynamicThresholdOperator = {
    GreaterThan: "GreaterThan",
    LessThan: "LessThan",
    GreaterOrLessThan: "GreaterOrLessThan",
};
exports.DynamicThresholdSensitivity = {
    Low: "Low",
    Medium: "Medium",
    High: "High",
};
exports.Enabled = {
    True: "true",
    False: "false",
};
exports.FavoriteType = {
    Shared: "shared",
    User: "user",
};
exports.FlowType = {
    Bluefield: "Bluefield",
};
exports.IngestionMode = {
    ApplicationInsights: "ApplicationInsights",
    ApplicationInsightsWithDiagnosticSettings: "ApplicationInsightsWithDiagnosticSettings",
    LogAnalytics: "LogAnalytics",
};
exports.ItemScope = {
    Shared: "shared",
    User: "user",
};
exports.ItemType = {
    Query: "query",
    Function: "function",
    Folder: "folder",
    Recent: "recent",
};
exports.Kind = {
    User: "user",
    Shared: "shared",
};
exports.KnownDataCollectionEndpointResourceKind = {
    Linux: "Linux",
    Windows: "Windows",
};
exports.KnownDataCollectionRuleResourceKind = {
    Linux: "Linux",
    Windows: "Windows",
};
exports.KnownDataFlowStreams = {
    Microsoft_Event: "Microsoft-Event",
    Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics",
    Microsoft_Perf: "Microsoft-Perf",
    Microsoft_Syslog: "Microsoft-Syslog",
    Microsoft_WindowsEvent: "Microsoft-WindowsEvent",
};
exports.KnownExtensionDataSourceStreams = {
    Microsoft_Event: "Microsoft-Event",
    Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics",
    Microsoft_Perf: "Microsoft-Perf",
    Microsoft_Syslog: "Microsoft-Syslog",
    Microsoft_WindowsEvent: "Microsoft-WindowsEvent",
};
exports.KnownPerfCounterDataSourceStreams = {
    Microsoft_Perf: "Microsoft-Perf",
    Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics",
};
exports.KnownPublicNetworkAccessOptions = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.KnownSyslogDataSourceFacilityNames = {
    Auth: "auth",
    Authpriv: "authpriv",
    Cron: "cron",
    Daemon: "daemon",
    Kern: "kern",
    Lpr: "lpr",
    Mail: "mail",
    Mark: "mark",
    News: "news",
    Syslog: "syslog",
    User: "user",
    Uucp: "uucp",
    Local0: "local0",
    Local1: "local1",
    Local2: "local2",
    Local3: "local3",
    Local4: "local4",
    Local5: "local5",
    Local6: "local6",
    Local7: "local7",
    Asterisk: "*",
};
exports.KnownSyslogDataSourceLogLevels = {
    Debug: "Debug",
    Info: "Info",
    Notice: "Notice",
    Warning: "Warning",
    Error: "Error",
    Critical: "Critical",
    Alert: "Alert",
    Emergency: "Emergency",
    Asterisk: "*",
};
exports.KnownSyslogDataSourceStreams = {
    Microsoft_Syslog: "Microsoft-Syslog",
};
exports.KnownWindowsEventLogDataSourceStreams = {
    Microsoft_WindowsEvent: "Microsoft-WindowsEvent",
    Microsoft_Event: "Microsoft-Event",
};
exports.MetricStatisticType = {
    Average: "Average",
    Min: "Min",
    Max: "Max",
    Sum: "Sum",
    Count: "Count",
};
exports.MetricTriggerType = {
    Consecutive: "Consecutive",
    Total: "Total",
};
exports.Odatatype = {
    Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
    Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
    Microsoft_Azure_Monitor_WebtestLocationAvailabilityCriteria: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
};
exports.OperationType = {
    Scale: "Scale",
};
exports.Operator = {
    Include: "Include",
};
exports.QueryType = {
    ResultCount: "ResultCount",
};
exports.RecurrenceFrequency = {
    None: "None",
    Second: "Second",
    Minute: "Minute",
    Hour: "Hour",
    Day: "Day",
    Week: "Week",
    Month: "Month",
    Year: "Year",
};
exports.RequestSource = {
    Rest: "rest",
};
exports.ScaleDirection = {
    None: "None",
    Increase: "Increase",
    Decrease: "Decrease",
};
exports.ScaleRuleMetricDimensionOperationType = {
    Equals: "Equals",
    NotEquals: "NotEquals",
};
exports.ScaleType = {
    ChangeCount: "ChangeCount",
    PercentChangeCount: "PercentChangeCount",
    ExactCount: "ExactCount",
    ServiceAllowedNextValue: "ServiceAllowedNextValue",
};
exports.TimeAggregationOperator = {
    Average: "Average",
    Minimum: "Minimum",
    Maximum: "Maximum",
    Total: "Total",
    Last: "Last",
};
exports.TimeAggregationType = {
    Average: "Average",
    Minimum: "Minimum",
    Maximum: "Maximum",
    Total: "Total",
    Count: "Count",
    Last: "Last",
};
exports.WebTestKind = {
    Ping: "ping",
    Multistep: "multistep",
};
//# sourceMappingURL=index.js.map