import * as v20140401 from "./v20140401";
import * as v20150401 from "./v20150401";
import * as v20150501 from "./v20150501";
import * as v20160301 from "./v20160301";
import * as v20180301 from "./v20180301";
import * as v20180416 from "./v20180416";
import * as v20180501preview from "./v20180501preview";
import * as v20180617preview from "./v20180617preview";
import * as v20191101preview from "./v20191101preview";
import * as v20200202 from "./v20200202";
import * as v20200202preview from "./v20200202preview";
import * as v20200501preview from "./v20200501preview";
import * as v20201005preview from "./v20201005preview";
import * as v20201020 from "./v20201020";
import * as v20210201preview from "./v20210201preview";
import * as v20210308 from "./v20210308";
import * as v20210401 from "./v20210401";
export { v20140401, v20150401, v20150501, v20160301, v20180301, v20180416, v20180501preview, v20180617preview, v20191101preview, v20200202, v20200202preview, v20200501preview, v20201005preview, v20201020, v20210201preview, v20210308, v20210401, };
export declare const AggregationTypeEnum: {
    readonly Average: "Average";
    readonly Count: "Count";
    readonly Minimum: "Minimum";
    readonly Maximum: "Maximum";
    readonly Total: "Total";
};
/**
 * the criteria time aggregation types.
 */
export declare type AggregationTypeEnum = (typeof AggregationTypeEnum)[keyof typeof AggregationTypeEnum];
export declare const AlertSeverity: {
    readonly Zero: "0";
    readonly One: "1";
    readonly Two: "2";
    readonly Three: "3";
    readonly Four: "4";
};
/**
 * Severity of the alert
 */
export declare type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity];
export declare const ApplicationType: {
    readonly Web: "web";
    readonly Other: "other";
};
/**
 * Type of application being monitored.
 */
export declare type ApplicationType = (typeof ApplicationType)[keyof typeof ApplicationType];
export declare const ComparisonOperationType: {
    readonly Equals: "Equals";
    readonly NotEquals: "NotEquals";
    readonly GreaterThan: "GreaterThan";
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly LessThan: "LessThan";
    readonly LessThanOrEqual: "LessThanOrEqual";
};
/**
 * the operator that is used to compare the metric data and the threshold.
 */
export declare type ComparisonOperationType = (typeof ComparisonOperationType)[keyof typeof ComparisonOperationType];
export declare const ConditionOperator: {
    readonly GreaterThan: "GreaterThan";
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly LessThan: "LessThan";
    readonly LessThanOrEqual: "LessThanOrEqual";
};
/**
 * the operator used to compare the data and the threshold.
 */
export declare type ConditionOperator = (typeof ConditionOperator)[keyof typeof ConditionOperator];
export declare const ConditionalOperator: {
    readonly GreaterThanOrEqual: "GreaterThanOrEqual";
    readonly LessThanOrEqual: "LessThanOrEqual";
    readonly GreaterThan: "GreaterThan";
    readonly LessThan: "LessThan";
    readonly Equal: "Equal";
};
/**
 * Evaluation operation for rule - 'GreaterThan' or 'LessThan.
 */
export declare type ConditionalOperator = (typeof ConditionalOperator)[keyof typeof ConditionalOperator];
export declare const CriterionType: {
    readonly StaticThresholdCriterion: "StaticThresholdCriterion";
    readonly DynamicThresholdCriterion: "DynamicThresholdCriterion";
};
/**
 * Specifies the type of threshold criteria
 */
export declare type CriterionType = (typeof CriterionType)[keyof typeof CriterionType];
export declare const DynamicThresholdOperator: {
    readonly GreaterThan: "GreaterThan";
    readonly LessThan: "LessThan";
    readonly GreaterOrLessThan: "GreaterOrLessThan";
};
/**
 * The operator used to compare the metric value against the threshold.
 */
export declare type DynamicThresholdOperator = (typeof DynamicThresholdOperator)[keyof typeof DynamicThresholdOperator];
export declare const DynamicThresholdSensitivity: {
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
};
/**
 * The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
 */
export declare type DynamicThresholdSensitivity = (typeof DynamicThresholdSensitivity)[keyof typeof DynamicThresholdSensitivity];
export declare const Enabled: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * The flag which indicates whether the Log Search rule is enabled. Value should be true or false
 */
export declare type Enabled = (typeof Enabled)[keyof typeof Enabled];
export declare const FavoriteType: {
    readonly Shared: "shared";
    readonly User: "user";
};
/**
 * Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
 */
export declare type FavoriteType = (typeof FavoriteType)[keyof typeof FavoriteType];
export declare const FlowType: {
    readonly Bluefield: "Bluefield";
};
/**
 * Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
 */
export declare type FlowType = (typeof FlowType)[keyof typeof FlowType];
export declare const IngestionMode: {
    readonly ApplicationInsights: "ApplicationInsights";
    readonly ApplicationInsightsWithDiagnosticSettings: "ApplicationInsightsWithDiagnosticSettings";
    readonly LogAnalytics: "LogAnalytics";
};
/**
 * Indicates the flow of the ingestion.
 */
export declare type IngestionMode = (typeof IngestionMode)[keyof typeof IngestionMode];
export declare const ItemScope: {
    readonly Shared: "shared";
    readonly User: "user";
};
/**
 * Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.
 */
export declare type ItemScope = (typeof ItemScope)[keyof typeof ItemScope];
export declare const ItemType: {
    readonly Query: "query";
    readonly Function: "function";
    readonly Folder: "folder";
    readonly Recent: "recent";
};
/**
 * Enum indicating the type of the Analytics item.
 */
export declare type ItemType = (typeof ItemType)[keyof typeof ItemType];
export declare const Kind: {
    readonly User: "user";
    readonly Shared: "shared";
};
/**
 * The kind of workbook. Choices are user and shared.
 */
export declare type Kind = (typeof Kind)[keyof typeof Kind];
export declare const KnownDataCollectionEndpointResourceKind: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The kind of the resource.
 */
export declare type KnownDataCollectionEndpointResourceKind = (typeof KnownDataCollectionEndpointResourceKind)[keyof typeof KnownDataCollectionEndpointResourceKind];
export declare const KnownDataCollectionRuleResourceKind: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * The kind of the resource.
 */
export declare type KnownDataCollectionRuleResourceKind = (typeof KnownDataCollectionRuleResourceKind)[keyof typeof KnownDataCollectionRuleResourceKind];
export declare const KnownDataFlowStreams: {
    readonly Microsoft_Event: "Microsoft-Event";
    readonly Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics";
    readonly Microsoft_Perf: "Microsoft-Perf";
    readonly Microsoft_Syslog: "Microsoft-Syslog";
    readonly Microsoft_WindowsEvent: "Microsoft-WindowsEvent";
};
export declare type KnownDataFlowStreams = (typeof KnownDataFlowStreams)[keyof typeof KnownDataFlowStreams];
export declare const KnownExtensionDataSourceStreams: {
    readonly Microsoft_Event: "Microsoft-Event";
    readonly Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics";
    readonly Microsoft_Perf: "Microsoft-Perf";
    readonly Microsoft_Syslog: "Microsoft-Syslog";
    readonly Microsoft_WindowsEvent: "Microsoft-WindowsEvent";
};
export declare type KnownExtensionDataSourceStreams = (typeof KnownExtensionDataSourceStreams)[keyof typeof KnownExtensionDataSourceStreams];
export declare const KnownPerfCounterDataSourceStreams: {
    readonly Microsoft_Perf: "Microsoft-Perf";
    readonly Microsoft_InsightsMetrics: "Microsoft-InsightsMetrics";
};
export declare type KnownPerfCounterDataSourceStreams = (typeof KnownPerfCounterDataSourceStreams)[keyof typeof KnownPerfCounterDataSourceStreams];
export declare const KnownPublicNetworkAccessOptions: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * The configuration to set whether network access from public internet to the endpoints are allowed.
 */
export declare type KnownPublicNetworkAccessOptions = (typeof KnownPublicNetworkAccessOptions)[keyof typeof KnownPublicNetworkAccessOptions];
export declare const KnownSyslogDataSourceFacilityNames: {
    readonly Auth: "auth";
    readonly Authpriv: "authpriv";
    readonly Cron: "cron";
    readonly Daemon: "daemon";
    readonly Kern: "kern";
    readonly Lpr: "lpr";
    readonly Mail: "mail";
    readonly Mark: "mark";
    readonly News: "news";
    readonly Syslog: "syslog";
    readonly User: "user";
    readonly Uucp: "uucp";
    readonly Local0: "local0";
    readonly Local1: "local1";
    readonly Local2: "local2";
    readonly Local3: "local3";
    readonly Local4: "local4";
    readonly Local5: "local5";
    readonly Local6: "local6";
    readonly Local7: "local7";
    readonly Asterisk: "*";
};
export declare type KnownSyslogDataSourceFacilityNames = (typeof KnownSyslogDataSourceFacilityNames)[keyof typeof KnownSyslogDataSourceFacilityNames];
export declare const KnownSyslogDataSourceLogLevels: {
    readonly Debug: "Debug";
    readonly Info: "Info";
    readonly Notice: "Notice";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly Critical: "Critical";
    readonly Alert: "Alert";
    readonly Emergency: "Emergency";
    readonly Asterisk: "*";
};
export declare type KnownSyslogDataSourceLogLevels = (typeof KnownSyslogDataSourceLogLevels)[keyof typeof KnownSyslogDataSourceLogLevels];
export declare const KnownSyslogDataSourceStreams: {
    readonly Microsoft_Syslog: "Microsoft-Syslog";
};
export declare type KnownSyslogDataSourceStreams = (typeof KnownSyslogDataSourceStreams)[keyof typeof KnownSyslogDataSourceStreams];
export declare const KnownWindowsEventLogDataSourceStreams: {
    readonly Microsoft_WindowsEvent: "Microsoft-WindowsEvent";
    readonly Microsoft_Event: "Microsoft-Event";
};
export declare type KnownWindowsEventLogDataSourceStreams = (typeof KnownWindowsEventLogDataSourceStreams)[keyof typeof KnownWindowsEventLogDataSourceStreams];
export declare const MetricStatisticType: {
    readonly Average: "Average";
    readonly Min: "Min";
    readonly Max: "Max";
    readonly Sum: "Sum";
    readonly Count: "Count";
};
/**
 * the metric statistic type. How the metrics from multiple instances are combined.
 */
export declare type MetricStatisticType = (typeof MetricStatisticType)[keyof typeof MetricStatisticType];
export declare const MetricTriggerType: {
    readonly Consecutive: "Consecutive";
    readonly Total: "Total";
};
/**
 * Metric Trigger Type - 'Consecutive' or 'Total'
 */
export declare type MetricTriggerType = (typeof MetricTriggerType)[keyof typeof MetricTriggerType];
export declare const Odatatype: {
    readonly Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria";
    readonly Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria";
    readonly Microsoft_Azure_Monitor_WebtestLocationAvailabilityCriteria: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria";
};
/**
 * specifies the type of the alert criteria.
 */
export declare type Odatatype = (typeof Odatatype)[keyof typeof Odatatype];
export declare const OperationType: {
    readonly Scale: "Scale";
};
/**
 * the operation associated with the notification and its value must be "scale"
 */
export declare type OperationType = (typeof OperationType)[keyof typeof OperationType];
export declare const Operator: {
    readonly Include: "Include";
};
/**
 * Operator for dimension values
 */
export declare type Operator = (typeof Operator)[keyof typeof Operator];
export declare const QueryType: {
    readonly ResultCount: "ResultCount";
};
/**
 * Set value to 'ResultCount' .
 */
export declare type QueryType = (typeof QueryType)[keyof typeof QueryType];
export declare const RecurrenceFrequency: {
    readonly None: "None";
    readonly Second: "Second";
    readonly Minute: "Minute";
    readonly Hour: "Hour";
    readonly Day: "Day";
    readonly Week: "Week";
    readonly Month: "Month";
    readonly Year: "Year";
};
/**
 * the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
 */
export declare type RecurrenceFrequency = (typeof RecurrenceFrequency)[keyof typeof RecurrenceFrequency];
export declare const RequestSource: {
    readonly Rest: "rest";
};
/**
 * Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
 */
export declare type RequestSource = (typeof RequestSource)[keyof typeof RequestSource];
export declare const ScaleDirection: {
    readonly None: "None";
    readonly Increase: "Increase";
    readonly Decrease: "Decrease";
};
/**
 * the scale direction. Whether the scaling action increases or decreases the number of instances.
 */
export declare type ScaleDirection = (typeof ScaleDirection)[keyof typeof ScaleDirection];
export declare const ScaleRuleMetricDimensionOperationType: {
    readonly Equals: "Equals";
    readonly NotEquals: "NotEquals";
};
/**
 * the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
 */
export declare type ScaleRuleMetricDimensionOperationType = (typeof ScaleRuleMetricDimensionOperationType)[keyof typeof ScaleRuleMetricDimensionOperationType];
export declare const ScaleType: {
    readonly ChangeCount: "ChangeCount";
    readonly PercentChangeCount: "PercentChangeCount";
    readonly ExactCount: "ExactCount";
    readonly ServiceAllowedNextValue: "ServiceAllowedNextValue";
};
/**
 * the type of action that should occur when the scale rule fires.
 */
export declare type ScaleType = (typeof ScaleType)[keyof typeof ScaleType];
export declare const TimeAggregationOperator: {
    readonly Average: "Average";
    readonly Minimum: "Minimum";
    readonly Maximum: "Maximum";
    readonly Total: "Total";
    readonly Last: "Last";
};
/**
 * the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
 */
export declare type TimeAggregationOperator = (typeof TimeAggregationOperator)[keyof typeof TimeAggregationOperator];
export declare const TimeAggregationType: {
    readonly Average: "Average";
    readonly Minimum: "Minimum";
    readonly Maximum: "Maximum";
    readonly Total: "Total";
    readonly Count: "Count";
    readonly Last: "Last";
};
/**
 * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
 */
export declare type TimeAggregationType = (typeof TimeAggregationType)[keyof typeof TimeAggregationType];
export declare const WebTestKind: {
    readonly Ping: "ping";
    readonly Multistep: "multistep";
};
/**
 * The kind of web test this is, valid choices are ping and multistep.
 */
export declare type WebTestKind = (typeof WebTestKind)[keyof typeof WebTestKind];
