export declare const CatalogCollationType: {
    readonly DATABASE_DEFAULT: "DATABASE_DEFAULT";
    readonly SQL_Latin1_General_CP1_CI_AS: "SQL_Latin1_General_CP1_CI_AS";
};
/**
 * Collation of the metadata catalog.
 */
export declare type CatalogCollationType = (typeof CatalogCollationType)[keyof typeof CatalogCollationType];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Copy: "Copy";
    readonly Secondary: "Secondary";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Restore: "Restore";
    readonly Recovery: "Recovery";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly RestoreExternalBackupSecondary: "RestoreExternalBackupSecondary";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
    readonly OnlineSecondary: "OnlineSecondary";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: regular database creation.
 *
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 *
 * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 *
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 *
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 *
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 *
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 *
 * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export declare type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const DatabaseLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
 */
export declare type DatabaseLicenseType = (typeof DatabaseLicenseType)[keyof typeof DatabaseLicenseType];
export declare const DatabaseReadScale: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
 */
export declare type DatabaseReadScale = (typeof DatabaseReadScale)[keyof typeof DatabaseReadScale];
export declare const ElasticPoolLicenseType: {
    readonly LicenseIncluded: "LicenseIncluded";
    readonly BasePrice: "BasePrice";
};
/**
 * The license type to apply for this elastic pool.
 */
export declare type ElasticPoolLicenseType = (typeof ElasticPoolLicenseType)[keyof typeof ElasticPoolLicenseType];
export declare const ReadOnlyEndpointFailoverPolicy: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Failover policy of the read-only endpoint for the failover group.
 */
export declare type ReadOnlyEndpointFailoverPolicy = (typeof ReadOnlyEndpointFailoverPolicy)[keyof typeof ReadOnlyEndpointFailoverPolicy];
export declare const ReadWriteEndpointFailoverPolicy: {
    readonly Manual: "Manual";
    readonly Automatic: "Automatic";
};
/**
 * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
 */
export declare type ReadWriteEndpointFailoverPolicy = (typeof ReadWriteEndpointFailoverPolicy)[keyof typeof ReadWriteEndpointFailoverPolicy];
export declare const SampleName: {
    readonly AdventureWorksLT: "AdventureWorksLT";
    readonly WideWorldImportersStd: "WideWorldImportersStd";
    readonly WideWorldImportersFull: "WideWorldImportersFull";
};
/**
 * The name of the sample schema to apply when creating this database.
 */
export declare type SampleName = (typeof SampleName)[keyof typeof SampleName];
export declare const ServerKeyType: {
    readonly ServiceManaged: "ServiceManaged";
    readonly AzureKeyVault: "AzureKeyVault";
};
/**
 * The key type like 'ServiceManaged', 'AzureKeyVault'.
 */
export declare type ServerKeyType = (typeof ServerKeyType)[keyof typeof ServerKeyType];
