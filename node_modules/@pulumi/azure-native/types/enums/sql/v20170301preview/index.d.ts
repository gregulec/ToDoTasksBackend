export declare const BlobAuditingPolicyState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
 */
export declare type BlobAuditingPolicyState = (typeof BlobAuditingPolicyState)[keyof typeof BlobAuditingPolicyState];
export declare const CatalogCollationType: {
    readonly DATABASE_DEFAULT: "DATABASE_DEFAULT";
    readonly SQL_Latin1_General_CP1_CI_AS: "SQL_Latin1_General_CP1_CI_AS";
};
/**
 * Collation of the metadata catalog.
 */
export declare type CatalogCollationType = (typeof CatalogCollationType)[keyof typeof CatalogCollationType];
export declare const CreateMode: {
    readonly Default: "Default";
    readonly Copy: "Copy";
    readonly Secondary: "Secondary";
    readonly OnlineSecondary: "OnlineSecondary";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Restore: "Restore";
    readonly Recovery: "Recovery";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly RestoreExternalBackupSecondary: "RestoreExternalBackupSecondary";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
};
/**
 * Specifies the mode of database creation.
 *
 * Default: regular database creation.
 *
 * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 *
 * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 *
 * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 *
 * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 *
 * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 *
 * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 *
 * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
 */
export declare type CreateMode = (typeof CreateMode)[keyof typeof CreateMode];
export declare const JobScheduleType: {
    readonly Once: "Once";
    readonly Recurring: "Recurring";
};
/**
 * Schedule interval type
 */
export declare type JobScheduleType = (typeof JobScheduleType)[keyof typeof JobScheduleType];
export declare const JobStepActionSource: {
    readonly Inline: "Inline";
};
/**
 * The source of the action to execute.
 */
export declare type JobStepActionSource = (typeof JobStepActionSource)[keyof typeof JobStepActionSource];
export declare const JobStepActionType: {
    readonly TSql: "TSql";
};
/**
 * Type of action being executed by the job step.
 */
export declare type JobStepActionType = (typeof JobStepActionType)[keyof typeof JobStepActionType];
export declare const JobStepOutputType: {
    readonly SqlDatabase: "SqlDatabase";
};
/**
 * The output destination type.
 */
export declare type JobStepOutputType = (typeof JobStepOutputType)[keyof typeof JobStepOutputType];
export declare const JobTargetGroupMembershipType: {
    readonly Include: "Include";
    readonly Exclude: "Exclude";
};
/**
 * Whether the target is included or excluded from the group.
 */
export declare type JobTargetGroupMembershipType = (typeof JobTargetGroupMembershipType)[keyof typeof JobTargetGroupMembershipType];
export declare const JobTargetType: {
    readonly TargetGroup: "TargetGroup";
    readonly SqlDatabase: "SqlDatabase";
    readonly SqlElasticPool: "SqlElasticPool";
    readonly SqlShardMap: "SqlShardMap";
    readonly SqlServer: "SqlServer";
};
/**
 * The target type.
 */
export declare type JobTargetType = (typeof JobTargetType)[keyof typeof JobTargetType];
export declare const ManagedDatabaseCreateMode: {
    readonly Default: "Default";
    readonly RestoreExternalBackup: "RestoreExternalBackup";
    readonly PointInTimeRestore: "PointInTimeRestore";
    readonly Recovery: "Recovery";
    readonly RestoreLongTermRetentionBackup: "RestoreLongTermRetentionBackup";
};
/**
 * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
 */
export declare type ManagedDatabaseCreateMode = (typeof ManagedDatabaseCreateMode)[keyof typeof ManagedDatabaseCreateMode];
export declare const ManagedInstanceAdministratorType: {
    readonly ActiveDirectory: "ActiveDirectory";
};
/**
 * Type of the managed instance administrator.
 */
export declare type ManagedInstanceAdministratorType = (typeof ManagedInstanceAdministratorType)[keyof typeof ManagedInstanceAdministratorType];
export declare const SampleName: {
    readonly AdventureWorksLT: "AdventureWorksLT";
    readonly WideWorldImportersStd: "WideWorldImportersStd";
    readonly WideWorldImportersFull: "WideWorldImportersFull";
};
/**
 * The name of the sample schema to apply when creating this database.
 */
export declare type SampleName = (typeof SampleName)[keyof typeof SampleName];
export declare const SecurityAlertPolicyState: {
    readonly New: "New";
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
 */
export declare type SecurityAlertPolicyState = (typeof SecurityAlertPolicyState)[keyof typeof SecurityAlertPolicyState];
export declare const SensitivityLabelRank: {
    readonly None: "None";
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
    readonly Critical: "Critical";
};
export declare type SensitivityLabelRank = (typeof SensitivityLabelRank)[keyof typeof SensitivityLabelRank];
