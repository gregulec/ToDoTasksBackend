import * as v20180531 from "./v20180531";
import * as v20180801preview from "./v20180801preview";
import * as v20190101 from "./v20190101";
import * as v20190301preview from "./v20190301preview";
import * as v20190401preview from "./v20190401preview";
import * as v20190901 from "./v20190901";
import * as v20191001 from "./v20191001";
import * as v20191101 from "./v20191101";
import * as v20200301preview from "./v20200301preview";
import * as v20200601 from "./v20200601";
import * as v20201201preview from "./v20201201preview";
import * as v20210101 from "./v20210101";
export { v20180531, v20180801preview, v20190101, v20190301preview, v20190401preview, v20190901, v20191001, v20191101, v20200301preview, v20200601, v20201201preview, v20210101, };
export declare const AccumulatedType: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Show costs accumulated over time.
 */
export declare type AccumulatedType = (typeof AccumulatedType)[keyof typeof AccumulatedType];
export declare const ChartType: {
    readonly Area: "Area";
    readonly Line: "Line";
    readonly StackedColumn: "StackedColumn";
    readonly GroupedColumn: "GroupedColumn";
    readonly Table: "Table";
};
/**
 * Chart type of the main view in Cost Analysis. Required.
 */
export declare type ChartType = (typeof ChartType)[keyof typeof ChartType];
export declare const ConnectorBillingModel: {
    readonly Trial: "trial";
    readonly AutoUpgrade: "autoUpgrade";
    readonly Premium: "premium";
    readonly Expired: "expired";
};
/**
 * Connector billing model
 */
export declare type ConnectorBillingModel = (typeof ConnectorBillingModel)[keyof typeof ConnectorBillingModel];
export declare const CostAllocationPolicyType: {
    readonly FixedProportion: "FixedProportion";
};
/**
 * Method of cost allocation for the rule
 */
export declare type CostAllocationPolicyType = (typeof CostAllocationPolicyType)[keyof typeof CostAllocationPolicyType];
export declare const CostAllocationResourceType: {
    /**
     * Indicates an Azure dimension such as a subscription id or resource group name is being used for allocation.
     */
    readonly Dimension: "Dimension";
    /**
     * Allocates cost based on Azure Tag key value pairs.
     */
    readonly Tag: "Tag";
};
/**
 * Type of resources contained in this cost allocation rule
 */
export declare type CostAllocationResourceType = (typeof CostAllocationResourceType)[keyof typeof CostAllocationResourceType];
export declare const ExportType: {
    readonly Usage: "Usage";
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
};
/**
 * The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
 */
export declare type ExportType = (typeof ExportType)[keyof typeof ExportType];
export declare const FormatType: {
    readonly Csv: "Csv";
};
/**
 * The format of the report being delivered.
 */
export declare type FormatType = (typeof FormatType)[keyof typeof FormatType];
export declare const FunctionType: {
    readonly Avg: "Avg";
    readonly Max: "Max";
    readonly Min: "Min";
    readonly Sum: "Sum";
};
/**
 * The name of the aggregation function to use.
 */
export declare type FunctionType = (typeof FunctionType)[keyof typeof FunctionType];
export declare const GranularityType: {
    readonly Daily: "Daily";
    readonly Hourly: "Hourly";
};
/**
 * The granularity of rows in the report.
 */
export declare type GranularityType = (typeof GranularityType)[keyof typeof GranularityType];
export declare const KpiTypeType: {
    readonly Forecast: "Forecast";
    readonly Budget: "Budget";
};
/**
 * KPI type (Forecast, Budget).
 */
export declare type KpiTypeType = (typeof KpiTypeType)[keyof typeof KpiTypeType];
export declare const MetricType: {
    readonly ActualCost: "ActualCost";
    readonly AmortizedCost: "AmortizedCost";
    readonly AHUB: "AHUB";
};
/**
 * Metric to use when displaying costs.
 */
export declare type MetricType = (typeof MetricType)[keyof typeof MetricType];
export declare const OperatorType: {
    readonly In: "In";
    readonly Contains: "Contains";
};
/**
 * The operator to use for comparison.
 */
export declare type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export declare const PivotTypeType: {
    readonly Dimension: "Dimension";
    readonly TagKey: "TagKey";
};
/**
 * Data type to show in view.
 */
export declare type PivotTypeType = (typeof PivotTypeType)[keyof typeof PivotTypeType];
export declare const RecurrenceType: {
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
    readonly Monthly: "Monthly";
    readonly Annually: "Annually";
};
/**
 * The schedule recurrence.
 */
export declare type RecurrenceType = (typeof RecurrenceType)[keyof typeof RecurrenceType];
export declare const ReportColumnType: {
    readonly Tag: "Tag";
    readonly Dimension: "Dimension";
};
/**
 * Has type of the column to group.
 */
export declare type ReportColumnType = (typeof ReportColumnType)[keyof typeof ReportColumnType];
export declare const ReportConfigColumnType: {
    readonly Tag: "Tag";
    readonly Dimension: "Dimension";
};
/**
 * Has type of the column to group.
 */
export declare type ReportConfigColumnType = (typeof ReportConfigColumnType)[keyof typeof ReportConfigColumnType];
export declare const ReportGranularityType: {
    readonly Daily: "Daily";
    readonly Monthly: "Monthly";
};
/**
 * The granularity of rows in the report.
 */
export declare type ReportGranularityType = (typeof ReportGranularityType)[keyof typeof ReportGranularityType];
export declare const ReportTimeframeType: {
    readonly WeekToDate: "WeekToDate";
    readonly MonthToDate: "MonthToDate";
    readonly YearToDate: "YearToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
 */
export declare type ReportTimeframeType = (typeof ReportTimeframeType)[keyof typeof ReportTimeframeType];
export declare const ReportType: {
    readonly Usage: "Usage";
};
/**
 * The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
 */
export declare type ReportType = (typeof ReportType)[keyof typeof ReportType];
export declare const RuleStatus: {
    /**
     * Rule is saved but not used to allocate costs.
     */
    readonly NotActive: "NotActive";
    /**
     * Rule is saved and impacting cost allocation.
     */
    readonly Active: "Active";
    /**
     * Rule is saved and cost allocation is being updated. Readonly value that cannot be submitted in a put request.
     */
    readonly Processing: "Processing";
};
/**
 * Status of the rule
 */
export declare type RuleStatus = (typeof RuleStatus)[keyof typeof RuleStatus];
export declare const StatusType: {
    readonly Active: "Active";
    readonly Inactive: "Inactive";
};
/**
 * The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
 */
export declare type StatusType = (typeof StatusType)[keyof typeof StatusType];
export declare const TimeframeType: {
    readonly WeekToDate: "WeekToDate";
    readonly MonthToDate: "MonthToDate";
    readonly Custom: "Custom";
};
/**
 * The time frame for pulling data for the report. If custom, then a specific time period must be provided.
 */
export declare type TimeframeType = (typeof TimeframeType)[keyof typeof TimeframeType];
