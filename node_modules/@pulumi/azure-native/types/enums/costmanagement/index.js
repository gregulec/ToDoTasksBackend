"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeframeType = exports.StatusType = exports.RuleStatus = exports.ReportType = exports.ReportTimeframeType = exports.ReportGranularityType = exports.ReportConfigColumnType = exports.ReportColumnType = exports.RecurrenceType = exports.PivotTypeType = exports.OperatorType = exports.MetricType = exports.KpiTypeType = exports.GranularityType = exports.FunctionType = exports.FormatType = exports.ExportType = exports.CostAllocationResourceType = exports.CostAllocationPolicyType = exports.ConnectorBillingModel = exports.ChartType = exports.AccumulatedType = exports.v20210101 = exports.v20201201preview = exports.v20200601 = exports.v20200301preview = exports.v20191101 = exports.v20191001 = exports.v20190901 = exports.v20190401preview = exports.v20190301preview = exports.v20190101 = exports.v20180801preview = exports.v20180531 = void 0;
// Export sub-modules:
const v20180531 = require("./v20180531");
exports.v20180531 = v20180531;
const v20180801preview = require("./v20180801preview");
exports.v20180801preview = v20180801preview;
const v20190101 = require("./v20190101");
exports.v20190101 = v20190101;
const v20190301preview = require("./v20190301preview");
exports.v20190301preview = v20190301preview;
const v20190401preview = require("./v20190401preview");
exports.v20190401preview = v20190401preview;
const v20190901 = require("./v20190901");
exports.v20190901 = v20190901;
const v20191001 = require("./v20191001");
exports.v20191001 = v20191001;
const v20191101 = require("./v20191101");
exports.v20191101 = v20191101;
const v20200301preview = require("./v20200301preview");
exports.v20200301preview = v20200301preview;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20201201preview = require("./v20201201preview");
exports.v20201201preview = v20201201preview;
const v20210101 = require("./v20210101");
exports.v20210101 = v20210101;
exports.AccumulatedType = {
    True: "true",
    False: "false",
};
exports.ChartType = {
    Area: "Area",
    Line: "Line",
    StackedColumn: "StackedColumn",
    GroupedColumn: "GroupedColumn",
    Table: "Table",
};
exports.ConnectorBillingModel = {
    Trial: "trial",
    AutoUpgrade: "autoUpgrade",
    Premium: "premium",
    Expired: "expired",
};
exports.CostAllocationPolicyType = {
    FixedProportion: "FixedProportion",
};
exports.CostAllocationResourceType = {
    /**
     * Indicates an Azure dimension such as a subscription id or resource group name is being used for allocation.
     */
    Dimension: "Dimension",
    /**
     * Allocates cost based on Azure Tag key value pairs.
     */
    Tag: "Tag",
};
exports.ExportType = {
    Usage: "Usage",
    ActualCost: "ActualCost",
    AmortizedCost: "AmortizedCost",
};
exports.FormatType = {
    Csv: "Csv",
};
exports.FunctionType = {
    Avg: "Avg",
    Max: "Max",
    Min: "Min",
    Sum: "Sum",
};
exports.GranularityType = {
    Daily: "Daily",
    Hourly: "Hourly",
};
exports.KpiTypeType = {
    Forecast: "Forecast",
    Budget: "Budget",
};
exports.MetricType = {
    ActualCost: "ActualCost",
    AmortizedCost: "AmortizedCost",
    AHUB: "AHUB",
};
exports.OperatorType = {
    In: "In",
    Contains: "Contains",
};
exports.PivotTypeType = {
    Dimension: "Dimension",
    TagKey: "TagKey",
};
exports.RecurrenceType = {
    Daily: "Daily",
    Weekly: "Weekly",
    Monthly: "Monthly",
    Annually: "Annually",
};
exports.ReportColumnType = {
    Tag: "Tag",
    Dimension: "Dimension",
};
exports.ReportConfigColumnType = {
    Tag: "Tag",
    Dimension: "Dimension",
};
exports.ReportGranularityType = {
    Daily: "Daily",
    Monthly: "Monthly",
};
exports.ReportTimeframeType = {
    WeekToDate: "WeekToDate",
    MonthToDate: "MonthToDate",
    YearToDate: "YearToDate",
    Custom: "Custom",
};
exports.ReportType = {
    Usage: "Usage",
};
exports.RuleStatus = {
    /**
     * Rule is saved but not used to allocate costs.
     */
    NotActive: "NotActive",
    /**
     * Rule is saved and impacting cost allocation.
     */
    Active: "Active",
    /**
     * Rule is saved and cost allocation is being updated. Readonly value that cannot be submitted in a put request.
     */
    Processing: "Processing",
};
exports.StatusType = {
    Active: "Active",
    Inactive: "Inactive",
};
exports.TimeframeType = {
    WeekToDate: "WeekToDate",
    MonthToDate: "MonthToDate",
    Custom: "Custom",
};
//# sourceMappingURL=index.js.map