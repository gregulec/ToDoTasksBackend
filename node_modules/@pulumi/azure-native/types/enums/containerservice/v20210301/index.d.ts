export declare const AgentPoolMode: {
    readonly System: "System";
    readonly User: "User";
};
/**
 * AgentPoolMode represents mode of an agent pool
 */
export declare type AgentPoolMode = (typeof AgentPoolMode)[keyof typeof AgentPoolMode];
export declare const AgentPoolType: {
    readonly VirtualMachineScaleSets: "VirtualMachineScaleSets";
    readonly AvailabilitySet: "AvailabilitySet";
};
/**
 * AgentPoolType represents types of an agent pool
 */
export declare type AgentPoolType = (typeof AgentPoolType)[keyof typeof AgentPoolType];
export declare const ConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * The private link service connection status.
 */
export declare type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare const Expander: {
    readonly Least_waste: "least-waste";
    readonly Most_pods: "most-pods";
    readonly Priority: "priority";
    readonly Random: "random";
};
export declare type Expander = (typeof Expander)[keyof typeof Expander];
export declare const ExtendedLocationTypes: {
    readonly EdgeZone: "EdgeZone";
};
/**
 * The type of the extended location.
 */
export declare type ExtendedLocationTypes = (typeof ExtendedLocationTypes)[keyof typeof ExtendedLocationTypes];
export declare const GPUInstanceProfile: {
    readonly MIG1g: "MIG1g";
    readonly MIG2g: "MIG2g";
    readonly MIG3g: "MIG3g";
    readonly MIG4g: "MIG4g";
    readonly MIG7g: "MIG7g";
};
/**
 * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
 */
export declare type GPUInstanceProfile = (typeof GPUInstanceProfile)[keyof typeof GPUInstanceProfile];
export declare const KubeletDiskType: {
    readonly OS: "OS";
    readonly Temporary: "Temporary";
};
/**
 * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
 */
export declare type KubeletDiskType = (typeof KubeletDiskType)[keyof typeof KubeletDiskType];
export declare const LicenseType: {
    readonly None: "None";
    readonly Windows_Server: "Windows_Server";
};
/**
 * The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs.
 */
export declare type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];
export declare const LoadBalancerSku: {
    readonly Standard: "standard";
    readonly Basic: "basic";
};
/**
 * The load balancer sku for the managed cluster.
 */
export declare type LoadBalancerSku = (typeof LoadBalancerSku)[keyof typeof LoadBalancerSku];
export declare const ManagedClusterSKUName: {
    readonly Basic: "Basic";
};
/**
 * Name of a managed cluster SKU.
 */
export declare type ManagedClusterSKUName = (typeof ManagedClusterSKUName)[keyof typeof ManagedClusterSKUName];
export declare const ManagedClusterSKUTier: {
    readonly Paid: "Paid";
    readonly Free: "Free";
};
/**
 * Tier of a managed cluster SKU.
 */
export declare type ManagedClusterSKUTier = (typeof ManagedClusterSKUTier)[keyof typeof ManagedClusterSKUTier];
export declare const NetworkMode: {
    readonly Transparent: "transparent";
    readonly Bridge: "bridge";
};
/**
 * Network mode used for building Kubernetes network.
 */
export declare type NetworkMode = (typeof NetworkMode)[keyof typeof NetworkMode];
export declare const NetworkPlugin: {
    readonly Azure: "azure";
    readonly Kubenet: "kubenet";
};
/**
 * Network plugin used for building Kubernetes network.
 */
export declare type NetworkPlugin = (typeof NetworkPlugin)[keyof typeof NetworkPlugin];
export declare const NetworkPolicy: {
    readonly Calico: "calico";
    readonly Azure: "azure";
};
/**
 * Network policy used for building Kubernetes network.
 */
export declare type NetworkPolicy = (typeof NetworkPolicy)[keyof typeof NetworkPolicy];
export declare const OSDiskType: {
    readonly Managed: "Managed";
    readonly Ephemeral: "Ephemeral";
};
/**
 * OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and 'Managed'. If unspecified, defaults to 'Ephemeral' when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation.
 */
export declare type OSDiskType = (typeof OSDiskType)[keyof typeof OSDiskType];
export declare const OSSKU: {
    readonly Ubuntu: "Ubuntu";
    readonly CBLMariner: "CBLMariner";
};
/**
 * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
 */
export declare type OSSKU = (typeof OSSKU)[keyof typeof OSSKU];
export declare const OSType: {
    readonly Linux: "Linux";
    readonly Windows: "Windows";
};
/**
 * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
 */
export declare type OSType = (typeof OSType)[keyof typeof OSType];
export declare const OutboundType: {
    readonly LoadBalancer: "loadBalancer";
    readonly UserDefinedRouting: "userDefinedRouting";
};
/**
 * The outbound (egress) routing method.
 */
export declare type OutboundType = (typeof OutboundType)[keyof typeof OutboundType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the managed cluster. Type 'SystemAssigned' will use an implicitly created identity in master components and an auto-created user assigned identity in MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster, service principal will be used instead.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const ScaleSetEvictionPolicy: {
    readonly Delete: "Delete";
    readonly Deallocate: "Deallocate";
};
/**
 * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
 */
export declare type ScaleSetEvictionPolicy = (typeof ScaleSetEvictionPolicy)[keyof typeof ScaleSetEvictionPolicy];
export declare const ScaleSetPriority: {
    readonly Spot: "Spot";
    readonly Regular: "Regular";
};
/**
 * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
 */
export declare type ScaleSetPriority = (typeof ScaleSetPriority)[keyof typeof ScaleSetPriority];
export declare const UpgradeChannel: {
    readonly Rapid: "rapid";
    readonly Stable: "stable";
    readonly Patch: "patch";
    readonly Node_image: "node-image";
    readonly None: "none";
};
/**
 * upgrade channel for auto upgrade.
 */
export declare type UpgradeChannel = (typeof UpgradeChannel)[keyof typeof UpgradeChannel];
export declare const WeekDay: {
    readonly Sunday: "Sunday";
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
};
/**
 * A day in a week.
 */
export declare type WeekDay = (typeof WeekDay)[keyof typeof WeekDay];
