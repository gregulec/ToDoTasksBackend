import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * Information about appliance definition.
 */
export declare function getApplianceDefinition(args: GetApplianceDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceDefinitionResult>;
export interface GetApplianceDefinitionArgs {
    /**
     * The name of the appliance definition.
     */
    applianceDefinitionName: string;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: string;
}
/**
 * Information about appliance definition.
 */
export interface GetApplianceDefinitionResult {
    /**
     * The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
     */
    readonly artifacts?: outputs.solutions.v20160901preview.ApplianceArtifactResponse[];
    /**
     * The appliance provider authorizations.
     */
    readonly authorizations: outputs.solutions.v20160901preview.ApplianceProviderAuthorizationResponse[];
    /**
     * The appliance definition description.
     */
    readonly description?: string;
    /**
     * The appliance definition display name.
     */
    readonly displayName?: string;
    /**
     * Resource ID
     */
    readonly id: string;
    /**
     * The identity of the resource.
     */
    readonly identity?: outputs.solutions.v20160901preview.IdentityResponse;
    /**
     * Resource location
     */
    readonly location?: string;
    /**
     * The appliance lock level.
     */
    readonly lockLevel: string;
    /**
     * ID of the resource that manages this resource.
     */
    readonly managedBy?: string;
    /**
     * Resource name
     */
    readonly name: string;
    /**
     * The appliance definition package file Uri.
     */
    readonly packageFileUri: string;
    /**
     * The SKU of the resource.
     */
    readonly sku?: outputs.solutions.v20160901preview.SkuResponse;
    /**
     * Resource tags
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Resource type
     */
    readonly type: string;
}
