"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A SQL server.
 * API Version: 2019-07-24-preview.
 */
class SqlServer extends pulumi.CustomResource {
    /**
     * Create a SqlServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sqlServerRegistrationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlServerRegistrationName'");
            }
            inputs["cores"] = args ? args.cores : undefined;
            inputs["edition"] = args ? args.edition : undefined;
            inputs["propertyBag"] = args ? args.propertyBag : undefined;
            inputs["registrationID"] = args ? args.registrationID : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sqlServerName"] = args ? args.sqlServerName : undefined;
            inputs["sqlServerRegistrationName"] = args ? args.sqlServerRegistrationName : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["cores"] = undefined /*out*/;
            inputs["edition"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["propertyBag"] = undefined /*out*/;
            inputs["registrationID"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:azuredata:SqlServer" }, { type: "azure-native:azuredata/v20170301preview:SqlServer" }, { type: "azure-nextgen:azuredata/v20170301preview:SqlServer" }, { type: "azure-native:azuredata/v20190724preview:SqlServer" }, { type: "azure-nextgen:azuredata/v20190724preview:SqlServer" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SqlServer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SqlServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new SqlServer(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SqlServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlServer.__pulumiType;
    }
}
exports.SqlServer = SqlServer;
/** @internal */
SqlServer.__pulumiType = 'azure-native:azuredata:SqlServer';
//# sourceMappingURL=sqlServer.js.map