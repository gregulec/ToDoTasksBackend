"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./api"), exports);
__exportStar(require("./apiDiagnostic"), exports);
__exportStar(require("./apiIssue"), exports);
__exportStar(require("./apiIssueAttachment"), exports);
__exportStar(require("./apiIssueComment"), exports);
__exportStar(require("./apiManagementService"), exports);
__exportStar(require("./apiOperation"), exports);
__exportStar(require("./apiOperationPolicy"), exports);
__exportStar(require("./apiPolicy"), exports);
__exportStar(require("./apiRelease"), exports);
__exportStar(require("./apiSchema"), exports);
__exportStar(require("./apiTagDescription"), exports);
__exportStar(require("./apiVersionSet"), exports);
__exportStar(require("./authorizationServer"), exports);
__exportStar(require("./backend"), exports);
__exportStar(require("./cache"), exports);
__exportStar(require("./certificate"), exports);
__exportStar(require("./contentItem"), exports);
__exportStar(require("./contentType"), exports);
__exportStar(require("./diagnostic"), exports);
__exportStar(require("./emailTemplate"), exports);
__exportStar(require("./gateway"), exports);
__exportStar(require("./gatewayApiEntityTag"), exports);
__exportStar(require("./gatewayHostnameConfiguration"), exports);
__exportStar(require("./getApi"), exports);
__exportStar(require("./getApiDiagnostic"), exports);
__exportStar(require("./getApiIssue"), exports);
__exportStar(require("./getApiIssueAttachment"), exports);
__exportStar(require("./getApiIssueComment"), exports);
__exportStar(require("./getApiManagementService"), exports);
__exportStar(require("./getApiManagementServiceSsoToken"), exports);
__exportStar(require("./getApiOperation"), exports);
__exportStar(require("./getApiOperationPolicy"), exports);
__exportStar(require("./getApiPolicy"), exports);
__exportStar(require("./getApiRelease"), exports);
__exportStar(require("./getApiSchema"), exports);
__exportStar(require("./getApiTagDescription"), exports);
__exportStar(require("./getApiVersionSet"), exports);
__exportStar(require("./getAuthorizationServer"), exports);
__exportStar(require("./getBackend"), exports);
__exportStar(require("./getCache"), exports);
__exportStar(require("./getCertificate"), exports);
__exportStar(require("./getContentItem"), exports);
__exportStar(require("./getContentType"), exports);
__exportStar(require("./getDiagnostic"), exports);
__exportStar(require("./getEmailTemplate"), exports);
__exportStar(require("./getGateway"), exports);
__exportStar(require("./getGatewayHostnameConfiguration"), exports);
__exportStar(require("./getGroup"), exports);
__exportStar(require("./getIdentityProvider"), exports);
__exportStar(require("./getLogger"), exports);
__exportStar(require("./getNamedValue"), exports);
__exportStar(require("./getOpenIdConnectProvider"), exports);
__exportStar(require("./getPolicy"), exports);
__exportStar(require("./getProduct"), exports);
__exportStar(require("./getProductPolicy"), exports);
__exportStar(require("./getSubscription"), exports);
__exportStar(require("./getTag"), exports);
__exportStar(require("./getTagByApi"), exports);
__exportStar(require("./getTagByOperation"), exports);
__exportStar(require("./getTagByProduct"), exports);
__exportStar(require("./getUser"), exports);
__exportStar(require("./getUserSharedAccessToken"), exports);
__exportStar(require("./group"), exports);
__exportStar(require("./groupUser"), exports);
__exportStar(require("./identityProvider"), exports);
__exportStar(require("./listAuthorizationServerSecrets"), exports);
__exportStar(require("./listDelegationSettingSecrets"), exports);
__exportStar(require("./listGatewayKeys"), exports);
__exportStar(require("./listIdentityProviderSecrets"), exports);
__exportStar(require("./listNamedValue"), exports);
__exportStar(require("./listOpenIdConnectProviderSecrets"), exports);
__exportStar(require("./listSubscriptionSecrets"), exports);
__exportStar(require("./listTenantAccessGitSecrets"), exports);
__exportStar(require("./listTenantAccessSecrets"), exports);
__exportStar(require("./logger"), exports);
__exportStar(require("./namedValue"), exports);
__exportStar(require("./notificationRecipientEmail"), exports);
__exportStar(require("./notificationRecipientUser"), exports);
__exportStar(require("./openIdConnectProvider"), exports);
__exportStar(require("./policy"), exports);
__exportStar(require("./product"), exports);
__exportStar(require("./productApi"), exports);
__exportStar(require("./productGroup"), exports);
__exportStar(require("./productPolicy"), exports);
__exportStar(require("./subscription"), exports);
__exportStar(require("./tag"), exports);
__exportStar(require("./tagByApi"), exports);
__exportStar(require("./tagByOperation"), exports);
__exportStar(require("./tagByProduct"), exports);
__exportStar(require("./user"), exports);
// Export enums:
__exportStar(require("../../types/enums/apimanagement/v20191201"), exports);
// Import resources to register:
const api_1 = require("./api");
const apiDiagnostic_1 = require("./apiDiagnostic");
const apiIssue_1 = require("./apiIssue");
const apiIssueAttachment_1 = require("./apiIssueAttachment");
const apiIssueComment_1 = require("./apiIssueComment");
const apiManagementService_1 = require("./apiManagementService");
const apiOperation_1 = require("./apiOperation");
const apiOperationPolicy_1 = require("./apiOperationPolicy");
const apiPolicy_1 = require("./apiPolicy");
const apiRelease_1 = require("./apiRelease");
const apiSchema_1 = require("./apiSchema");
const apiTagDescription_1 = require("./apiTagDescription");
const apiVersionSet_1 = require("./apiVersionSet");
const authorizationServer_1 = require("./authorizationServer");
const backend_1 = require("./backend");
const cache_1 = require("./cache");
const certificate_1 = require("./certificate");
const contentItem_1 = require("./contentItem");
const contentType_1 = require("./contentType");
const diagnostic_1 = require("./diagnostic");
const emailTemplate_1 = require("./emailTemplate");
const gateway_1 = require("./gateway");
const gatewayApiEntityTag_1 = require("./gatewayApiEntityTag");
const gatewayHostnameConfiguration_1 = require("./gatewayHostnameConfiguration");
const group_1 = require("./group");
const groupUser_1 = require("./groupUser");
const identityProvider_1 = require("./identityProvider");
const logger_1 = require("./logger");
const namedValue_1 = require("./namedValue");
const notificationRecipientEmail_1 = require("./notificationRecipientEmail");
const notificationRecipientUser_1 = require("./notificationRecipientUser");
const openIdConnectProvider_1 = require("./openIdConnectProvider");
const policy_1 = require("./policy");
const product_1 = require("./product");
const productApi_1 = require("./productApi");
const productGroup_1 = require("./productGroup");
const productPolicy_1 = require("./productPolicy");
const subscription_1 = require("./subscription");
const tag_1 = require("./tag");
const tagByApi_1 = require("./tagByApi");
const tagByOperation_1 = require("./tagByOperation");
const tagByProduct_1 = require("./tagByProduct");
const user_1 = require("./user");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:apimanagement/v20191201:Api":
                return new api_1.Api(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiDiagnostic":
                return new apiDiagnostic_1.ApiDiagnostic(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiIssue":
                return new apiIssue_1.ApiIssue(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiIssueAttachment":
                return new apiIssueAttachment_1.ApiIssueAttachment(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiIssueComment":
                return new apiIssueComment_1.ApiIssueComment(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiManagementService":
                return new apiManagementService_1.ApiManagementService(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiOperation":
                return new apiOperation_1.ApiOperation(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiOperationPolicy":
                return new apiOperationPolicy_1.ApiOperationPolicy(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiPolicy":
                return new apiPolicy_1.ApiPolicy(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiRelease":
                return new apiRelease_1.ApiRelease(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiSchema":
                return new apiSchema_1.ApiSchema(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiTagDescription":
                return new apiTagDescription_1.ApiTagDescription(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ApiVersionSet":
                return new apiVersionSet_1.ApiVersionSet(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:AuthorizationServer":
                return new authorizationServer_1.AuthorizationServer(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Backend":
                return new backend_1.Backend(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Cache":
                return new cache_1.Cache(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ContentItem":
                return new contentItem_1.ContentItem(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ContentType":
                return new contentType_1.ContentType(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Diagnostic":
                return new diagnostic_1.Diagnostic(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:EmailTemplate":
                return new emailTemplate_1.EmailTemplate(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Gateway":
                return new gateway_1.Gateway(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:GatewayApiEntityTag":
                return new gatewayApiEntityTag_1.GatewayApiEntityTag(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:GatewayHostnameConfiguration":
                return new gatewayHostnameConfiguration_1.GatewayHostnameConfiguration(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:GroupUser":
                return new groupUser_1.GroupUser(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:IdentityProvider":
                return new identityProvider_1.IdentityProvider(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Logger":
                return new logger_1.Logger(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:NamedValue":
                return new namedValue_1.NamedValue(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:NotificationRecipientEmail":
                return new notificationRecipientEmail_1.NotificationRecipientEmail(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:NotificationRecipientUser":
                return new notificationRecipientUser_1.NotificationRecipientUser(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:OpenIdConnectProvider":
                return new openIdConnectProvider_1.OpenIdConnectProvider(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Product":
                return new product_1.Product(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ProductApi":
                return new productApi_1.ProductApi(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ProductGroup":
                return new productGroup_1.ProductGroup(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:ProductPolicy":
                return new productPolicy_1.ProductPolicy(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Subscription":
                return new subscription_1.Subscription(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:Tag":
                return new tag_1.Tag(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:TagByApi":
                return new tagByApi_1.TagByApi(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:TagByOperation":
                return new tagByOperation_1.TagByOperation(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:TagByProduct":
                return new tagByProduct_1.TagByProduct(name, undefined, { urn });
            case "azure-native:apimanagement/v20191201:User":
                return new user_1.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "apimanagement/v20191201", _module);
//# sourceMappingURL=index.js.map