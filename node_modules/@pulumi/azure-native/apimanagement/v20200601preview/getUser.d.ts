import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * User details.
 */
export declare function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult>;
export interface GetUserArgs {
    /**
     * The name of the resource group.
     */
    resourceGroupName: string;
    /**
     * The name of the API Management service.
     */
    serviceName: string;
    /**
     * User identifier. Must be unique in the current API Management service instance.
     */
    userId: string;
}
/**
 * User details.
 */
export interface GetUserResult {
    /**
     * Email address.
     */
    readonly email?: string;
    /**
     * First name.
     */
    readonly firstName?: string;
    /**
     * Collection of groups user is part of.
     */
    readonly groups: outputs.apimanagement.v20200601preview.GroupContractPropertiesResponse[];
    /**
     * Resource ID.
     */
    readonly id: string;
    /**
     * Collection of user identities.
     */
    readonly identities?: outputs.apimanagement.v20200601preview.UserIdentityContractResponse[];
    /**
     * Last name.
     */
    readonly lastName?: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * Optional note about a user set by the administrator.
     */
    readonly note?: string;
    /**
     * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     */
    readonly registrationDate?: string;
    /**
     * Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
     */
    readonly state?: string;
    /**
     * Resource type for API Management resource.
     */
    readonly type: string;
}
