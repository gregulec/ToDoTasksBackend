"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeType = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 */
class NodeType extends pulumi.CustomResource {
    /**
     * Create a NodeType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.dataDiskSizeGB === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataDiskSizeGB'");
            }
            if ((!args || args.isPrimary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isPrimary'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.vmInstanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmInstanceCount'");
            }
            inputs["applicationPorts"] = args ? args.applicationPorts : undefined;
            inputs["capacities"] = args ? args.capacities : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["dataDiskSizeGB"] = args ? args.dataDiskSizeGB : undefined;
            inputs["ephemeralPorts"] = args ? args.ephemeralPorts : undefined;
            inputs["isPrimary"] = args ? args.isPrimary : undefined;
            inputs["nodeTypeName"] = args ? args.nodeTypeName : undefined;
            inputs["placementProperties"] = args ? args.placementProperties : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vmExtensions"] = args ? args.vmExtensions : undefined;
            inputs["vmImageOffer"] = args ? args.vmImageOffer : undefined;
            inputs["vmImagePublisher"] = args ? args.vmImagePublisher : undefined;
            inputs["vmImageSku"] = args ? args.vmImageSku : undefined;
            inputs["vmImageVersion"] = args ? args.vmImageVersion : undefined;
            inputs["vmInstanceCount"] = args ? args.vmInstanceCount : undefined;
            inputs["vmSecrets"] = args ? args.vmSecrets : undefined;
            inputs["vmSize"] = args ? args.vmSize : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["applicationPorts"] = undefined /*out*/;
            inputs["capacities"] = undefined /*out*/;
            inputs["dataDiskSizeGB"] = undefined /*out*/;
            inputs["ephemeralPorts"] = undefined /*out*/;
            inputs["isPrimary"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["placementProperties"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["vmExtensions"] = undefined /*out*/;
            inputs["vmImageOffer"] = undefined /*out*/;
            inputs["vmImagePublisher"] = undefined /*out*/;
            inputs["vmImageSku"] = undefined /*out*/;
            inputs["vmImageVersion"] = undefined /*out*/;
            inputs["vmInstanceCount"] = undefined /*out*/;
            inputs["vmSecrets"] = undefined /*out*/;
            inputs["vmSize"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:servicefabric/v20200101preview:NodeType" }, { type: "azure-native:servicefabric:NodeType" }, { type: "azure-nextgen:servicefabric:NodeType" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(NodeType.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NodeType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new NodeType(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NodeType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeType.__pulumiType;
    }
}
exports.NodeType = NodeType;
/** @internal */
NodeType.__pulumiType = 'azure-native:servicefabric/v20200101preview:NodeType';
//# sourceMappingURL=nodeType.js.map