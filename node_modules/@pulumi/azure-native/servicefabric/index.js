"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210601 = exports.v20201201preview = exports.v20200301 = exports.v20200101preview = exports.v20191101preview = exports.v20190601preview = exports.v20190301preview = exports.v20190301 = exports.v20180201 = exports.v20170701preview = exports.v20160901 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./application"), exports);
__exportStar(require("./applicationType"), exports);
__exportStar(require("./applicationTypeVersion"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./getApplication"), exports);
__exportStar(require("./getApplicationType"), exports);
__exportStar(require("./getApplicationTypeVersion"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getManagedCluster"), exports);
__exportStar(require("./getNodeType"), exports);
__exportStar(require("./getService"), exports);
__exportStar(require("./listListUpgradableVersionPost"), exports);
__exportStar(require("./managedCluster"), exports);
__exportStar(require("./nodeType"), exports);
__exportStar(require("./service"), exports);
// Export enums:
__exportStar(require("../types/enums/servicefabric"), exports);
// Export sub-modules:
const v20160901 = require("./v20160901");
exports.v20160901 = v20160901;
const v20170701preview = require("./v20170701preview");
exports.v20170701preview = v20170701preview;
const v20180201 = require("./v20180201");
exports.v20180201 = v20180201;
const v20190301 = require("./v20190301");
exports.v20190301 = v20190301;
const v20190301preview = require("./v20190301preview");
exports.v20190301preview = v20190301preview;
const v20190601preview = require("./v20190601preview");
exports.v20190601preview = v20190601preview;
const v20191101preview = require("./v20191101preview");
exports.v20191101preview = v20191101preview;
const v20200101preview = require("./v20200101preview");
exports.v20200101preview = v20200101preview;
const v20200301 = require("./v20200301");
exports.v20200301 = v20200301;
const v20201201preview = require("./v20201201preview");
exports.v20201201preview = v20201201preview;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
// Import resources to register:
const application_1 = require("./application");
const applicationType_1 = require("./applicationType");
const applicationTypeVersion_1 = require("./applicationTypeVersion");
const cluster_1 = require("./cluster");
const managedCluster_1 = require("./managedCluster");
const nodeType_1 = require("./nodeType");
const service_1 = require("./service");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:servicefabric:Application":
                return new application_1.Application(name, undefined, { urn });
            case "azure-native:servicefabric:ApplicationType":
                return new applicationType_1.ApplicationType(name, undefined, { urn });
            case "azure-native:servicefabric:ApplicationTypeVersion":
                return new applicationTypeVersion_1.ApplicationTypeVersion(name, undefined, { urn });
            case "azure-native:servicefabric:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure-native:servicefabric:ManagedCluster":
                return new managedCluster_1.ManagedCluster(name, undefined, { urn });
            case "azure-native:servicefabric:NodeType":
                return new nodeType_1.NodeType(name, undefined, { urn });
            case "azure-native:servicefabric:Service":
                return new service_1.Service(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "servicefabric", _module);
//# sourceMappingURL=index.js.map