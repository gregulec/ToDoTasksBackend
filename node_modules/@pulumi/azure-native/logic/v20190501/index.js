"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./getIntegrationAccount"), exports);
__exportStar(require("./getIntegrationAccountAgreement"), exports);
__exportStar(require("./getIntegrationAccountAssembly"), exports);
__exportStar(require("./getIntegrationAccountBatchConfiguration"), exports);
__exportStar(require("./getIntegrationAccountCertificate"), exports);
__exportStar(require("./getIntegrationAccountMap"), exports);
__exportStar(require("./getIntegrationAccountPartner"), exports);
__exportStar(require("./getIntegrationAccountSchema"), exports);
__exportStar(require("./getIntegrationAccountSession"), exports);
__exportStar(require("./getIntegrationServiceEnvironment"), exports);
__exportStar(require("./getIntegrationServiceEnvironmentManagedApi"), exports);
__exportStar(require("./getWorkflow"), exports);
__exportStar(require("./integrationAccount"), exports);
__exportStar(require("./integrationAccountAgreement"), exports);
__exportStar(require("./integrationAccountAssembly"), exports);
__exportStar(require("./integrationAccountBatchConfiguration"), exports);
__exportStar(require("./integrationAccountCertificate"), exports);
__exportStar(require("./integrationAccountMap"), exports);
__exportStar(require("./integrationAccountPartner"), exports);
__exportStar(require("./integrationAccountSchema"), exports);
__exportStar(require("./integrationAccountSession"), exports);
__exportStar(require("./integrationServiceEnvironment"), exports);
__exportStar(require("./integrationServiceEnvironmentManagedApi"), exports);
__exportStar(require("./listIntegrationAccountAgreementContentCallbackUrl"), exports);
__exportStar(require("./listIntegrationAccountAssemblyContentCallbackUrl"), exports);
__exportStar(require("./listIntegrationAccountCallbackUrl"), exports);
__exportStar(require("./listIntegrationAccountKeyVaultKeys"), exports);
__exportStar(require("./listIntegrationAccountMapContentCallbackUrl"), exports);
__exportStar(require("./listIntegrationAccountPartnerContentCallbackUrl"), exports);
__exportStar(require("./listIntegrationAccountSchemaContentCallbackUrl"), exports);
__exportStar(require("./listWorkflowCallbackUrl"), exports);
__exportStar(require("./listWorkflowRunActionExpressionTraces"), exports);
__exportStar(require("./listWorkflowRunActionRepetitionExpressionTraces"), exports);
__exportStar(require("./listWorkflowTriggerCallbackUrl"), exports);
__exportStar(require("./listWorkflowVersionTriggerCallbackUrl"), exports);
__exportStar(require("./workflow"), exports);
// Export enums:
__exportStar(require("../../types/enums/logic/v20190501"), exports);
// Import resources to register:
const integrationAccount_1 = require("./integrationAccount");
const integrationAccountAgreement_1 = require("./integrationAccountAgreement");
const integrationAccountAssembly_1 = require("./integrationAccountAssembly");
const integrationAccountBatchConfiguration_1 = require("./integrationAccountBatchConfiguration");
const integrationAccountCertificate_1 = require("./integrationAccountCertificate");
const integrationAccountMap_1 = require("./integrationAccountMap");
const integrationAccountPartner_1 = require("./integrationAccountPartner");
const integrationAccountSchema_1 = require("./integrationAccountSchema");
const integrationAccountSession_1 = require("./integrationAccountSession");
const integrationServiceEnvironment_1 = require("./integrationServiceEnvironment");
const integrationServiceEnvironmentManagedApi_1 = require("./integrationServiceEnvironmentManagedApi");
const workflow_1 = require("./workflow");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:logic/v20190501:IntegrationAccount":
                return new integrationAccount_1.IntegrationAccount(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountAgreement":
                return new integrationAccountAgreement_1.IntegrationAccountAgreement(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountAssembly":
                return new integrationAccountAssembly_1.IntegrationAccountAssembly(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountBatchConfiguration":
                return new integrationAccountBatchConfiguration_1.IntegrationAccountBatchConfiguration(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountCertificate":
                return new integrationAccountCertificate_1.IntegrationAccountCertificate(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountMap":
                return new integrationAccountMap_1.IntegrationAccountMap(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountPartner":
                return new integrationAccountPartner_1.IntegrationAccountPartner(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountSchema":
                return new integrationAccountSchema_1.IntegrationAccountSchema(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationAccountSession":
                return new integrationAccountSession_1.IntegrationAccountSession(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationServiceEnvironment":
                return new integrationServiceEnvironment_1.IntegrationServiceEnvironment(name, undefined, { urn });
            case "azure-native:logic/v20190501:IntegrationServiceEnvironmentManagedApi":
                return new integrationServiceEnvironmentManagedApi_1.IntegrationServiceEnvironmentManagedApi(name, undefined, { urn });
            case "azure-native:logic/v20190501:Workflow":
                return new workflow_1.Workflow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "logic/v20190501", _module);
//# sourceMappingURL=index.js.map