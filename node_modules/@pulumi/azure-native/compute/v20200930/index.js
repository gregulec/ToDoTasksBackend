"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./disk"), exports);
__exportStar(require("./diskAccess"), exports);
__exportStar(require("./diskAccessAPrivateEndpointConnection"), exports);
__exportStar(require("./diskEncryptionSet"), exports);
__exportStar(require("./gallery"), exports);
__exportStar(require("./galleryApplication"), exports);
__exportStar(require("./galleryApplicationVersion"), exports);
__exportStar(require("./galleryImage"), exports);
__exportStar(require("./galleryImageVersion"), exports);
__exportStar(require("./getDisk"), exports);
__exportStar(require("./getDiskAccess"), exports);
__exportStar(require("./getDiskAccessAPrivateEndpointConnection"), exports);
__exportStar(require("./getDiskEncryptionSet"), exports);
__exportStar(require("./getGallery"), exports);
__exportStar(require("./getGalleryApplication"), exports);
__exportStar(require("./getGalleryApplicationVersion"), exports);
__exportStar(require("./getGalleryImage"), exports);
__exportStar(require("./getGalleryImageVersion"), exports);
__exportStar(require("./getSnapshot"), exports);
__exportStar(require("./snapshot"), exports);
// Export enums:
__exportStar(require("../../types/enums/compute/v20200930"), exports);
// Import resources to register:
const disk_1 = require("./disk");
const diskAccess_1 = require("./diskAccess");
const diskAccessAPrivateEndpointConnection_1 = require("./diskAccessAPrivateEndpointConnection");
const diskEncryptionSet_1 = require("./diskEncryptionSet");
const gallery_1 = require("./gallery");
const galleryApplication_1 = require("./galleryApplication");
const galleryApplicationVersion_1 = require("./galleryApplicationVersion");
const galleryImage_1 = require("./galleryImage");
const galleryImageVersion_1 = require("./galleryImageVersion");
const snapshot_1 = require("./snapshot");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:compute/v20200930:Disk":
                return new disk_1.Disk(name, undefined, { urn });
            case "azure-native:compute/v20200930:DiskAccess":
                return new diskAccess_1.DiskAccess(name, undefined, { urn });
            case "azure-native:compute/v20200930:DiskAccessAPrivateEndpointConnection":
                return new diskAccessAPrivateEndpointConnection_1.DiskAccessAPrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:compute/v20200930:DiskEncryptionSet":
                return new diskEncryptionSet_1.DiskEncryptionSet(name, undefined, { urn });
            case "azure-native:compute/v20200930:Gallery":
                return new gallery_1.Gallery(name, undefined, { urn });
            case "azure-native:compute/v20200930:GalleryApplication":
                return new galleryApplication_1.GalleryApplication(name, undefined, { urn });
            case "azure-native:compute/v20200930:GalleryApplicationVersion":
                return new galleryApplicationVersion_1.GalleryApplicationVersion(name, undefined, { urn });
            case "azure-native:compute/v20200930:GalleryImage":
                return new galleryImage_1.GalleryImage(name, undefined, { urn });
            case "azure-native:compute/v20200930:GalleryImageVersion":
                return new galleryImageVersion_1.GalleryImageVersion(name, undefined, { urn });
            case "azure-native:compute/v20200930:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "compute/v20200930", _module);
//# sourceMappingURL=index.js.map