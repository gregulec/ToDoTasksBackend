import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../../types";
/**
 * Specifies information about the gallery image version that you want to create or update.
 */
export declare function getGalleryImageVersion(args: GetGalleryImageVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetGalleryImageVersionResult>;
export interface GetGalleryImageVersionArgs {
    /**
     * The expand expression to apply on the operation.
     */
    expand?: string;
    /**
     * The name of the gallery image definition in which the Image Version resides.
     */
    galleryImageName: string;
    /**
     * The name of the gallery image version to be retrieved.
     */
    galleryImageVersionName: string;
    /**
     * The name of the Shared Image Gallery in which the Image Definition resides.
     */
    galleryName: string;
    /**
     * The name of the resource group.
     */
    resourceGroupName: string;
}
/**
 * Specifies information about the gallery image version that you want to create or update.
 */
export interface GetGalleryImageVersionResult {
    /**
     * Resource Id
     */
    readonly id: string;
    /**
     * Resource location
     */
    readonly location: string;
    /**
     * Resource name
     */
    readonly name: string;
    /**
     * The provisioning state, which only appears in the response.
     */
    readonly provisioningState: string;
    /**
     * The publishing profile of a gallery image Version.
     */
    readonly publishingProfile?: outputs.compute.v20200930.GalleryImageVersionPublishingProfileResponse;
    /**
     * This is the replication status of the gallery image version.
     */
    readonly replicationStatus: outputs.compute.v20200930.ReplicationStatusResponse;
    /**
     * This is the storage profile of a Gallery Image Version.
     */
    readonly storageProfile: outputs.compute.v20200930.GalleryImageVersionStorageProfileResponse;
    /**
     * Resource tags
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Resource type
     */
    readonly type: string;
}
