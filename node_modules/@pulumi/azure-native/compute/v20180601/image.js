"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
 */
class Image extends pulumi.CustomResource {
    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["imageName"] = args ? args.imageName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sourceVirtualMachine"] = args ? args.sourceVirtualMachine : undefined;
            inputs["storageProfile"] = args ? args.storageProfile : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["location"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["sourceVirtualMachine"] = undefined /*out*/;
            inputs["storageProfile"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:compute/v20180601:Image" }, { type: "azure-native:compute:Image" }, { type: "azure-nextgen:compute:Image" }, { type: "azure-native:compute/v20160430preview:Image" }, { type: "azure-nextgen:compute/v20160430preview:Image" }, { type: "azure-native:compute/v20170330:Image" }, { type: "azure-nextgen:compute/v20170330:Image" }, { type: "azure-native:compute/v20171201:Image" }, { type: "azure-nextgen:compute/v20171201:Image" }, { type: "azure-native:compute/v20180401:Image" }, { type: "azure-nextgen:compute/v20180401:Image" }, { type: "azure-native:compute/v20181001:Image" }, { type: "azure-nextgen:compute/v20181001:Image" }, { type: "azure-native:compute/v20190301:Image" }, { type: "azure-nextgen:compute/v20190301:Image" }, { type: "azure-native:compute/v20190701:Image" }, { type: "azure-nextgen:compute/v20190701:Image" }, { type: "azure-native:compute/v20191201:Image" }, { type: "azure-nextgen:compute/v20191201:Image" }, { type: "azure-native:compute/v20200601:Image" }, { type: "azure-nextgen:compute/v20200601:Image" }, { type: "azure-native:compute/v20201201:Image" }, { type: "azure-nextgen:compute/v20201201:Image" }, { type: "azure-native:compute/v20210301:Image" }, { type: "azure-nextgen:compute/v20210301:Image" }, { type: "azure-native:compute/v20210401:Image" }, { type: "azure-nextgen:compute/v20210401:Image" }, { type: "azure-native:compute/v20210701:Image" }, { type: "azure-nextgen:compute/v20210701:Image" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Image.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Image(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }
}
exports.Image = Image;
/** @internal */
Image.__pulumiType = 'azure-native:compute/v20180601:Image';
//# sourceMappingURL=image.js.map