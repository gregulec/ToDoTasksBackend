"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Extension = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * The Extension object.
 */
class Extension extends pulumi.CustomResource {
    /**
     * Create a Extension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        var _a, _b;
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterResourceName'");
            }
            if ((!args || args.clusterRp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterRp'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["autoUpgradeMinorVersion"] = (_a = (args ? args.autoUpgradeMinorVersion : undefined)) !== null && _a !== void 0 ? _a : true;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["clusterResourceName"] = args ? args.clusterResourceName : undefined;
            inputs["clusterRp"] = args ? args.clusterRp : undefined;
            inputs["configurationProtectedSettings"] = args ? args.configurationProtectedSettings : undefined;
            inputs["configurationSettings"] = args ? args.configurationSettings : undefined;
            inputs["extensionName"] = args ? args.extensionName : undefined;
            inputs["extensionType"] = args ? args.extensionType : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["releaseTrain"] = (_b = (args ? args.releaseTrain : undefined)) !== null && _b !== void 0 ? _b : "Stable";
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["statuses"] = args ? args.statuses : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["customLocationSettings"] = undefined /*out*/;
            inputs["errorInfo"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["packageUri"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["autoUpgradeMinorVersion"] = undefined /*out*/;
            inputs["configurationProtectedSettings"] = undefined /*out*/;
            inputs["configurationSettings"] = undefined /*out*/;
            inputs["customLocationSettings"] = undefined /*out*/;
            inputs["errorInfo"] = undefined /*out*/;
            inputs["extensionType"] = undefined /*out*/;
            inputs["identity"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["packageUri"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["releaseTrain"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["statuses"] = undefined /*out*/;
            inputs["systemData"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:kubernetesconfiguration/v20210501preview:Extension" }, { type: "azure-native:kubernetesconfiguration:Extension" }, { type: "azure-nextgen:kubernetesconfiguration:Extension" }, { type: "azure-native:kubernetesconfiguration/v20200701preview:Extension" }, { type: "azure-nextgen:kubernetesconfiguration/v20200701preview:Extension" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Extension.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Extension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Extension(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Extension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extension.__pulumiType;
    }
}
exports.Extension = Extension;
/** @internal */
Extension.__pulumiType = 'azure-native:kubernetesconfiguration/v20210501preview:Extension';
//# sourceMappingURL=extension.js.map