import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
/**
 * Resource information.
 */
export declare class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Resource;
    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Resource;
    /**
     * The identity of the resource.
     */
    readonly identity: pulumi.Output<outputs.resources.v20160701.IdentityResponse | undefined>;
    /**
     * The kind of the resource.
     */
    readonly kind: pulumi.Output<string | undefined>;
    /**
     * Resource location
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * Id of the resource that manages this resource.
     */
    readonly managedBy: pulumi.Output<string | undefined>;
    /**
     * Resource name
     */
    readonly name: pulumi.Output<string>;
    /**
     * The plan of the resource.
     */
    readonly plan: pulumi.Output<outputs.resources.v20160701.PlanResponse | undefined>;
    /**
     * The resource properties.
     */
    readonly properties: pulumi.Output<any>;
    /**
     * The sku of the resource.
     */
    readonly sku: pulumi.Output<outputs.resources.v20160701.SkuResponse | undefined>;
    /**
     * Resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Resource type
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * The identity of the resource.
     */
    identity?: pulumi.Input<inputs.resources.v20160701.IdentityArgs>;
    /**
     * The kind of the resource.
     */
    kind?: pulumi.Input<string>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * Id of the resource that manages this resource.
     */
    managedBy?: pulumi.Input<string>;
    /**
     * Resource identity.
     */
    parentResourcePath: pulumi.Input<string>;
    /**
     * The plan of the resource.
     */
    plan?: pulumi.Input<inputs.resources.v20160701.PlanArgs>;
    /**
     * The resource properties.
     */
    properties?: any;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource identity.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Resource identity.
     */
    resourceProviderNamespace: pulumi.Input<string>;
    /**
     * Resource identity.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The sku of the resource.
     */
    sku?: pulumi.Input<inputs.resources.v20160701.SkuArgs>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
