import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
/**
 * Container service
 */
export declare class ContainerService extends pulumi.CustomResource {
    /**
     * Get an existing ContainerService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ContainerService;
    /**
     * Returns true if the given object is an instance of ContainerService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ContainerService;
    /**
     * Properties of agent pools
     */
    readonly agentPoolProfiles: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceAgentPoolProfileResponse[]>;
    /**
     * Properties for Diagnostic Agent
     */
    readonly diagnosticsProfile: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceDiagnosticsProfileResponse | undefined>;
    /**
     * Properties for Linux VMs
     */
    readonly linuxProfile: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceLinuxProfileResponse>;
    /**
     * Resource location
     */
    readonly location: pulumi.Output<string>;
    /**
     * Properties of master agents
     */
    readonly masterProfile: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceMasterProfileResponse>;
    /**
     * Resource name
     */
    readonly name: pulumi.Output<string>;
    /**
     * Properties of orchestrator
     */
    readonly orchestratorProfile: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceOrchestratorProfileResponse | undefined>;
    /**
     * Gets the provisioning state, which only appears in the response.
     */
    readonly provisioningState: pulumi.Output<string>;
    /**
     * Resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Resource type
     */
    readonly type: pulumi.Output<string>;
    /**
     * Properties of Windows VMs
     */
    readonly windowsProfile: pulumi.Output<outputs.containerservice.v20151101preview.ContainerServiceWindowsProfileResponse | undefined>;
    /**
     * Create a ContainerService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ContainerService resource.
 */
export interface ContainerServiceArgs {
    /**
     * Properties of agent pools
     */
    agentPoolProfiles: pulumi.Input<pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceAgentPoolProfileArgs>[]>;
    /**
     * The name of the container service within the given subscription and resource group.
     */
    containerServiceName?: pulumi.Input<string>;
    /**
     * Properties for Diagnostic Agent
     */
    diagnosticsProfile?: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceDiagnosticsProfileArgs>;
    /**
     * Properties for Linux VMs
     */
    linuxProfile: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceLinuxProfileArgs>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * Properties of master agents
     */
    masterProfile: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceMasterProfileArgs>;
    /**
     * Properties of orchestrator
     */
    orchestratorProfile?: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceOrchestratorProfileArgs>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Properties of Windows VMs
     */
    windowsProfile?: pulumi.Input<inputs.containerservice.v20151101preview.ContainerServiceWindowsProfileArgs>;
}
