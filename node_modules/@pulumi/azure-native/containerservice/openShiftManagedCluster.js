"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenShiftManagedCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * OpenShift Managed cluster.
 * API Version: 2019-04-30.
 */
class OpenShiftManagedCluster extends pulumi.CustomResource {
    /**
     * Create a OpenShiftManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.openShiftVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openShiftVersion'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["agentPoolProfiles"] = args ? args.agentPoolProfiles : undefined;
            inputs["authProfile"] = args ? args.authProfile : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["masterPoolProfile"] = args ? args.masterPoolProfile : undefined;
            inputs["networkProfile"] = args ? args.networkProfile : undefined;
            inputs["openShiftVersion"] = args ? args.openShiftVersion : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceName"] = args ? args.resourceName : undefined;
            inputs["routerProfiles"] = args ? args.routerProfiles : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["clusterVersion"] = undefined /*out*/;
            inputs["fqdn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicHostname"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        else {
            inputs["agentPoolProfiles"] = undefined /*out*/;
            inputs["authProfile"] = undefined /*out*/;
            inputs["clusterVersion"] = undefined /*out*/;
            inputs["fqdn"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["masterPoolProfile"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkProfile"] = undefined /*out*/;
            inputs["openShiftVersion"] = undefined /*out*/;
            inputs["plan"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["publicHostname"] = undefined /*out*/;
            inputs["routerProfiles"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        const aliasOpts = { aliases: [{ type: "azure-nextgen:containerservice:OpenShiftManagedCluster" }, { type: "azure-native:containerservice/v20180930preview:OpenShiftManagedCluster" }, { type: "azure-nextgen:containerservice/v20180930preview:OpenShiftManagedCluster" }, { type: "azure-native:containerservice/v20190430:OpenShiftManagedCluster" }, { type: "azure-nextgen:containerservice/v20190430:OpenShiftManagedCluster" }, { type: "azure-native:containerservice/v20190930preview:OpenShiftManagedCluster" }, { type: "azure-nextgen:containerservice/v20190930preview:OpenShiftManagedCluster" }, { type: "azure-native:containerservice/v20191027preview:OpenShiftManagedCluster" }, { type: "azure-nextgen:containerservice/v20191027preview:OpenShiftManagedCluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(OpenShiftManagedCluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing OpenShiftManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new OpenShiftManagedCluster(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OpenShiftManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenShiftManagedCluster.__pulumiType;
    }
}
exports.OpenShiftManagedCluster = OpenShiftManagedCluster;
/** @internal */
OpenShiftManagedCluster.__pulumiType = 'azure-native:containerservice:OpenShiftManagedCluster';
//# sourceMappingURL=openShiftManagedCluster.js.map